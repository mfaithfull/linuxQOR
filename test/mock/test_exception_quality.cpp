// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"
#include "../../src/qor/test/test.h"
#include "../../src/qor/mock/mocks.h"

using namespace qor;
using namespace qor::test;

struct X {};

bool operator==(const X &, const X &)
{
	return true;
}

class IS 
{
public:

    virtual ~IS() {}

	virtual int f() 
	{ 
		return 1; 
	}

	virtual int g(int, int) 
	{ 
		return 2; 
	}

	virtual void h() = 0;
	virtual void i(int, const X &) = 0;
};

qor_pp_test_case (checkNoResultContainsFuncName)
{
	bool exceptionCaught = false;
	MockRepository mocks;
	IS *iamock = mocks.Mock<IS>();
	mocks.ExpectCall(iamock, IS::f);
	try 
	{
		iamock->f();
	} 
	catch(qor::mock::NoResultSetUpException &ex) 
	{
		exceptionCaught = true;
		qor_pp_test_check(strstr(ex.what(), "IS::f") != NULL);
	}
	qor_pp_test_check(exceptionCaught);
}

qor_pp_test_case (checkNoResultContainsBlankArgSpec)
{
	bool exceptionCaught = false;
	MockRepository mocks;
	IS *iamock = mocks.Mock<IS>();
	mocks.ExpectCall(iamock, IS::g);
	try 
	{
		iamock->g(1,2);
	} 
	catch(qor::mock::NoResultSetUpException &ex) 
	{
		exceptionCaught = true;
		qor_pp_test_check(strstr(ex.what(), "IS::g") != NULL);
		qor_pp_test_check(strstr(ex.what(), "(...)") != NULL);
	}
	qor_pp_test_check(exceptionCaught);
}

qor_pp_test_case (checkNoResultContainsActualArgSpec)
{
	bool exceptionCaught = false;
	MockRepository mocks;
	IS *iamock = mocks.Mock<IS>();
	mocks.ExpectCall(iamock, IS::g).With(1,2);
	try 
	{
		iamock->g(1,2);
	} 
	catch(qor::mock::NoResultSetUpException &ex) 
	{
		exceptionCaught = true;
		qor_pp_test_check(strstr(ex.what(), "IS::g") != NULL);
		qor_pp_test_check(strstr(ex.what(), "(1,2)") != NULL);
	}
	qor_pp_test_check(exceptionCaught);
}

qor_pp_test_case (checkNoResultContainsActualUnprintableArgSpec)
{
	bool exceptionCaught = false;
	MockRepository mocks;
	IS *iamock = mocks.Mock<IS>();
	mocks.NeverCall(iamock, IS::i).With(42, X());
	try 
	{
		iamock->h();
	} 
	catch(qor::mock::NotImplementedException &ex) 
	{
		exceptionCaught = true;
		qor_pp_test_check(strstr(ex.what(), "IS::i") != NULL);
		qor_pp_test_check(strstr(ex.what(), "(42,??\?)") != NULL);
	}
	qor_pp_test_check(exceptionCaught);
}

qor_pp_test_case (checkNoResultDoesNotComplainIfNotCalled)
{
	MockRepository mocks;
	IS *iamock = mocks.Mock<IS>();
	mocks.OnCall(iamock, IS::g).With(1,2);
	mocks.OnCall(iamock, IS::g).With(3,4).Return(42);
	iamock->g(3,4);
}

qor_pp_test_case(checkNotImplementedExceptionToContainInfo)
{
	bool exceptionCaught = false;
	MockRepository mocks;
	mocks.autoExpect = false;
	IS *ismock = mocks.Mock<IS>();
	mocks.ExpectCall(ismock, IS::f).Return(1);
	mocks.OnCall(ismock, IS::f).Return(2);
	mocks.ExpectCall(ismock, IS::g).With(1,2).Return(2);
	mocks.OnCall(ismock, IS::g).Return(3);
	mocks.NeverCall(ismock, IS::g).With(3,4);

	try
	{
		ismock->h();
	}
	catch (qor::mock::NotImplementedException &ex)
	{
		qor_pp_test_check(strstr(ex.what(), "Expectation for IS::f()") != NULL);
		qor_pp_test_check(strstr(ex.what(), "Result set for IS::f()") != NULL);
		qor_pp_test_check(strstr(ex.what(), "Expectation for IS::g(1,2)") != NULL);
		qor_pp_test_check(strstr(ex.what(), "Result set for IS::g(...)") != NULL);
		qor_pp_test_check(strstr(ex.what(), "Result set for IS::g(3,4)") != NULL);
		qor_pp_test_check(strstr(ex.what(), __FILE__) != NULL);
		exceptionCaught = true;
	}
	mocks.reset();
	qor_pp_test_check(exceptionCaught);
}

qor_pp_test_case(checkExpectationExceptionToContainInfo)
{
	bool exceptionCaught = false;
	MockRepository mocks;
	mocks.autoExpect = false;
	IS *ismock = mocks.Mock<IS>();
	mocks.ExpectCall(ismock, IS::f).Return(1);
	mocks.OnCall(ismock, IS::f).Return(2);
	mocks.ExpectCall(ismock, IS::g).With(1,2).Return(2);
	mocks.OnCall(ismock, IS::g).With(2,3).Return(3);
	mocks.NeverCall(ismock, IS::g).With(3,4);
	mocks.NeverCall(ismock, IS::h);

	try
	{
		ismock->g(0,1);
	}
	catch (qor::mock::ExpectationException &ex)
	{
		qor_pp_test_check(strstr(ex.what(), "Function IS::g(0,1) called") != NULL);
		qor_pp_test_check(strstr(ex.what(), "Expectation for IS::f()") != NULL);
		qor_pp_test_check(strstr(ex.what(), "Result set for IS::f()") != NULL);
		qor_pp_test_check(strstr(ex.what(), "Expectation for IS::g(1,2)") != NULL);
		qor_pp_test_check(strstr(ex.what(), "Result set for IS::g(2,3)") != NULL);
		qor_pp_test_check(strstr(ex.what(), "Result set for IS::g(3,4)") != NULL);
		qor_pp_test_check(strstr(ex.what(), "Result set for IS::h()") != NULL);
		qor_pp_test_check(strstr(ex.what(), __FILE__) != NULL);
		exceptionCaught = true;
	}
	mocks.reset();
	qor_pp_test_check(exceptionCaught);
}

qor_pp_test_case(checkCallMissingExceptionToContainInfo)
{
	bool exceptionCaught = false;
	try
	{
		MockRepository mocks;
		mocks.autoExpect = false;
		IS *ismock = mocks.Mock<IS>();
		mocks.ExpectCall(ismock, IS::f).Return(1);
		mocks.OnCall(ismock, IS::f).Return(2);
		mocks.ExpectCall(ismock, IS::g).With(1,2).Return(2);
		mocks.OnCall(ismock, IS::g).Return(3);
		mocks.NeverCall(ismock, IS::g).With(3,4);
	}
	catch (qor::mock::CallMissingException &ex)
	{
		qor_pp_test_check(strstr(ex.what(), "Expectation for IS::f()") != NULL);
		qor_pp_test_check(strstr(ex.what(), "Result set for IS::f()") != NULL);
		qor_pp_test_check(strstr(ex.what(), "Expectation for IS::g(1,2)") != NULL);
		qor_pp_test_check(strstr(ex.what(), "Result set for IS::g(...)") != NULL);
		qor_pp_test_check(strstr(ex.what(), "Result set for IS::g(3,4)") != NULL);
		qor_pp_test_check(strstr(ex.what(), __FILE__) != NULL);
		exceptionCaught = true;
	}
	qor_pp_test_check(exceptionCaught);
}
