// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"
#include "../../src/qor/test/test.h"
#include "../../src/qor/mock/mocks.h"

using namespace qor;
using namespace qor::test;

class IE 
{
public:

    virtual ~IE() {}

	virtual int f() 
	{ 
		return 0; 
	}

	virtual std::string g() = 0;
};

qor_pp_test_case (checkPrimitiveExceptionAcceptedAndThrown)
{
	MockRepository mocks;
	IE *iamock = mocks.Mock<IE>();
	mocks.ExpectCall(iamock, IE::f).Throw(42);
	bool exceptionCaught = false;
	try 
	{
		iamock->f();
	}
	catch(int a)
	{
		qor_pp_test_check(a == 42);
		exceptionCaught = true;
	}
	qor_pp_test_check(exceptionCaught);
}

class SomeException : public std::exception 
{
private:
	const char *text;
public:

	SomeException(const char *txt) : text(txt) {}

	const char *what() const throw() 
	{ 
		return text; 
	}
};

qor_pp_test_case (checkThrowFuncWorks)
{
	const char *sText = "someText";
	MockRepository mocks;
	IE *iamock = mocks.Mock<IE>();
	mocks.ExpectCall(iamock, IE::f).ThrowFunc([&]{ throw SomeException(sText); });
	bool exceptionCaught = false;
	try 
	{
		iamock->f();
	}
	catch(SomeException &a)
	{
		qor_pp_test_check(a.what() == sText);
		exceptionCaught = true;
	}
	qor_pp_test_check(exceptionCaught);
}

qor_pp_test_case (checkClassTypeExceptionWithContent)
{
	const char *sText = "someText";
	MockRepository mocks;
	IE *iamock = mocks.Mock<IE>();
	mocks.ExpectCall(iamock, IE::f).Throw(SomeException(sText));
	bool exceptionCaught = false;
	try 
	{
		iamock->f();
	}
	catch(SomeException &a)
	{
		qor_pp_test_check(a.what() == sText);
		exceptionCaught = true;
	}
	qor_pp_test_check(exceptionCaught);
}

qor_pp_test_case(checkMockRepoVerifyDoesNotThrowDuringException)
{
	bool exceptionCaught = false;
	try
	{
		MockRepository mocks;
		IE *iamock = mocks.Mock<IE>();
		mocks.ExpectCall(iamock, IE::f);
	}
	catch (qor::mock::CallMissingException &)
	{
		exceptionCaught = true;
	}
	qor_pp_test_check(exceptionCaught);
	exceptionCaught = false;
	try
	{
		MockRepository mocks;
		IE *iamock = mocks.Mock<IE>();
		mocks.ExpectCall(iamock, IE::f);
		throw 42;
	}
	catch (int)
	{
		exceptionCaught = true;
	}
	qor_pp_test_check(exceptionCaught);
}

