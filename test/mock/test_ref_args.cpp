// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"
#include "../../src/qor/test/test.h"
#include "../../src/qor/mock/mocks.h"

using namespace qor;
using namespace qor::test;

class IRefArg 
{
public:
	virtual void test() = 0;
};

class IK 
{
public:

	virtual ~IK() {}

	virtual void f(int &) {}

	virtual void g(int &) = 0;
	virtual int &h() = 0;
	virtual const std::string &k() = 0;

	virtual void l(IRefArg &refArg) 
	{ 
		refArg.test();
	}
};

qor_pp_test_case (checkRefArgumentsAccepted)
{
	MockRepository mocks;
	IK *iamock = mocks.Mock<IK>();
	int x = 42;
	mocks.ExpectCall(iamock, IK::f).With(x);
	mocks.ExpectCall(iamock, IK::g).With(x);
	iamock->f(x);
	iamock->g(x);
}

qor_pp_test_case (checkRefArgumentsChecked)
{
	MockRepository mocks;
	IK *iamock = mocks.Mock<IK>();
	int x = 1, y = 2;
	mocks.ExpectCall(iamock, IK::f).With(x);
	mocks.ExpectCall(iamock, IK::g).With(y);
	bool exceptionCaught = false;
	try 
	{
		iamock->f(y);
	}
	catch (qor::mock::ExpectationException)
	{
		exceptionCaught = true;
	}
	qor_pp_test_check(exceptionCaught);
	mocks.reset();
}

void plusplus(int &x) 
{ 
	x++; 
}

void plusequals2(int &x) 
{
	x+=2; 
}

qor_pp_test_case (checkRefArgumentsPassedAsRef)
{
	MockRepository mocks;
	IK *iamock = mocks.Mock<IK>();
	int x = 1, y = 2;
	mocks.ExpectCall(iamock, IK::f).Do(plusplus);
	mocks.ExpectCall(iamock, IK::g).Do(plusequals2);
	iamock->f(x);
	iamock->g(y);
	qor_pp_test_check(x == 2);
	qor_pp_test_check(y == 4);
}

qor_pp_test_case (checkRefReturnValues)
{
	MockRepository mocks;
	IK *iamock = mocks.Mock<IK>();
	int x = 0;
	mocks.ExpectCall(iamock, IK::h).Return(std::ref(x));
	mocks.ExpectCall(iamock, IK::k).Return("Hello World");
	iamock->h() = 1;
	qor_pp_test_equal(iamock->k(), "Hello World");
	qor_pp_test_equal(x, 1);
}

bool operator==(const IRefArg &a, const IRefArg &b)
{
	return (&a == &b);
}

qor_pp_test_case (checkRefArgCheckedAsReference)
{
	MockRepository mocks;
	IK *iamock = mocks.Mock<IK>();
	IRefArg *refArg = mocks.Mock<IRefArg>();

	mocks.ExpectCall(iamock, IK::l).With(std::ref(*refArg));
	iamock->l(*refArg);
}

class IB 
{
public:

    virtual ~IB() {}

   virtual void doSomething() const = 0;

};

class IA 
{
public:

	virtual ~IA() {}

	virtual const IB & getB() const = 0;
   
};

qor_pp_test_case (checkRefReturnAsReference)
{
   MockRepository mocks;

   IB * b = mocks.Mock<IB>();

   IA * a = mocks.Mock<IA>();

   mocks.OnCall(a, IA::getB).Return(std::reference_wrapper<IB>(*b));
   mocks.ExpectCall(b, IB::doSomething);

   qor_pp_test_check(b == &a->getB());
   a->getB().doSomething();

   mocks.VerifyAll();
}
