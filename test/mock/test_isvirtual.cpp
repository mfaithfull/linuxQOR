// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"
#include "../../src/qor/test/test.h"
#include "../../src/qor/mock/mocks.h"

using namespace qor;
using namespace qor::test;

class IL 
{ 
public:

	void f() 
	{ 
		std::cout << "0" << std::endl; 
	}

	virtual void g() 
	{ 
		std::cout << "1" << std::endl; 
	}

	virtual void h() 
	{ 
		std::cout << "2" << std::endl; 
	}
};

class SecondBase
{
public:

	virtual void k() 
	{ 
		std::cout << "3" << std::endl; 
	}

	int x;
};

class ThirdBase
{
public:

	virtual void l() 
	{ 
		std::cout << "4" << std::endl; 
	}

	virtual void m() 
	{ 
		std::cout << "4" << std::endl; 
	}
};

class ILD : public IL, public SecondBase, public ThirdBase
{
};

qor_pp_test_case(checkNonVirtual)
{
	qor_pp_test_equal(qor::mock::virtual_index(&ILD::f).first, -1);
}

qor_pp_test_case(checkFirstVirtual)
{
	qor_pp_test_equal(qor::mock::virtual_index(&ILD::g).first, 0);
	qor_pp_test_equal(qor::mock::virtual_index(&ILD::g).second, 0);
}

qor_pp_test_case(checkSecondVirtual)
{
	qor_pp_test_equal(qor::mock::virtual_index(&ILD::h).first, 0);
	qor_pp_test_equal(qor::mock::virtual_index(&ILD::h).second, 1);
}

qor_pp_test_case(checkSecondBaseFirstVirtual)
{
	qor_pp_test_equal(qor::mock::virtual_index((void (ILD::*)())&ILD::k).first, 1);
	qor_pp_test_equal(qor::mock::virtual_index((void (ILD::*)())&ILD::k).second, 0);
}

qor_pp_test_case(checkThirdBaseSecondVirtualAfterInt)
{
	qor_pp_test_equal(qor::mock::virtual_index((void (ILD::*)())&ILD::m).first, 3);
	qor_pp_test_equal(qor::mock::virtual_index((void (ILD::*)())&ILD::m).second, 1);
}

qor_pp_test_case(checkPointerConversionIsOk)
{
	void (ThirdBase::*f)() = &ThirdBase::m;
	qor_pp_test_equal(qor::mock::virtual_index((void (ILD::*)())f).first, 3);
	qor_pp_test_equal(qor::mock::virtual_index((void (ILD::*)())f).second, 1);
}
