// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"
#include "../../src/qor/test/test.h"
#include "../../src/qor/mock/mocks.h"

using namespace qor;
using namespace qor::test;

class IDoFunctor 
{ 
public:
	
	virtual ~IDoFunctor() {}

	virtual void a(std::string arg) = 0;
};

#if __cplusplus > 199711L

qor_pp_test_case (checkDoFunctorCanBeLambdaWithContent)
{
	MockRepository mocks;
	IDoFunctor *iamock = mocks.Mock<IDoFunctor>();
  {
    std::string value = "Hello World";
    mocks.ExpectCall(iamock, IDoFunctor::a).Do([=](std::string arg){
      qor_pp_test_check(arg == value);
    });
  }

  iamock->a("Hello World");
}
#endif

class II 
{ 
public:

	virtual ~II() {}

	virtual void f() {}

	virtual void g() = 0;
};

bool checked;

void setChecked() 
{ 
	checked = true; 
}

class functorClass 
{
public:

    functorClass() : calls(0) {}

	int calls;

	void operator()() 
	{ 
		++calls; 
	}
};

qor_pp_test_case (checkFunctorsCalled)
{
	MockRepository mocks;
	II *iamock = mocks.Mock<II>();
	mocks.ExpectCall(iamock, II::f).Do(setChecked);
	mocks.OnCall(iamock, II::g).Do(setChecked);
	checked = false;
	iamock->g();
	qor_pp_test_check(checked == true);
	checked = false;
	iamock->f();
	qor_pp_test_check(checked == true);
	checked = false;
	iamock->g();
	qor_pp_test_check(checked == true);
}

qor_pp_test_case (checkFunctorObjectCalled)
{
	MockRepository mocks;
	II *iamock = mocks.Mock<II>();
	functorClass obj;
	mocks.ExpectCall(iamock, II::f).Do(std::ref(obj));
	mocks.OnCall(iamock, II::g).Do(std::ref(obj));
	qor_pp_test_check(obj.calls == 0);
	iamock->g();
	qor_pp_test_check(obj.calls == 1);
	iamock->f();
	qor_pp_test_check(obj.calls == 2);
	iamock->g();
	qor_pp_test_check(obj.calls == 3);
}

class functorByVal 
{
public:
	
	functorByVal(int &count) : count(count) {}

	void operator()() 
	{ 
		count++; 
	}

	int &count;

private:
	functorByVal &operator=(const functorByVal&); // Silence VS
};

qor_pp_test_case (checkFunctorObjectByvalCalled)
{
	int count = 0;
	MockRepository mocks;
	II *iamock = mocks.Mock<II>();
	mocks.ExpectCall(iamock, II::f).Do(functorByVal(count));
	mocks.OnCall(iamock, II::g).Do(functorByVal(count));
	qor_pp_test_check(count == 0);
	iamock->g();
	qor_pp_test_check(count == 1);
	iamock->f();
	qor_pp_test_check(count == 2);
	iamock->g();
	qor_pp_test_check(count == 3);
}
