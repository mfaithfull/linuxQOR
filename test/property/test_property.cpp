// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/objectcontext/anyobject.h"
#include "../../src/qor/injection/typeidentity.h"
#include "src/qor/reference/newref.h"
#include "src/qor/property/property.h"
#include "src/qor/property/propertyvector.h"
#include "src/qor/reflection/reflection.h"

using namespace qor;
using namespace qor::test;


struct PropertyTestSuite {};

struct TestPerson
{
    std::string Name;
    std::string DoB;
    unsigned long MembershipNumber;

    friend bool operator==(const TestPerson&, const TestPerson&);
};

bool operator == (const TestPerson& lhs, const TestPerson& rhs)
{
    return lhs.Name == rhs.Name && lhs.DoB == rhs.DoB && lhs.MembershipNumber == rhs.MembershipNumber;
}


qor_pp_test_suite_case(PropertyTestSuite, canMakeAValueInstance)
{
    TypedAnyProperty<unsigned long> MemberNo;
    MemberNo = 122004ul;
}

qor_pp_test_suite_case(PropertyTestSuite, canMakeANamedProperty)
{
    PropertyName Name("MembershipNumber");
    Property membershipNmber(Name);
    PropertyValue membershipNumberValue;
    TypedAnyProperty<unsigned long> MemberNo;
    MemberNo = 122004ul;
    membershipNumberValue.Set(MemberNo);
    membershipNmber.SetValue(membershipNumberValue);        
}

qor_pp_test_suite_case(PropertyTestSuite, canMakeAPropertyVector)
{
    PropertyVector fields;
    Property account(PropertyName("Account"));
    account.SetValue(PropertyValue().Set(TypedAnyProperty<int>(3456)));

    Property name(PropertyName("Name"));
    name.SetValue(PropertyValue().Set(TypedAnyProperty<std::string>("John Smoth")));

    fields.emplace_back(account);
    fields.emplace_back(name);
}

qor_pp_test_suite_case(PropertyTestSuite, canMakeAVectorValue)
{
    PropertyVector fields;
    Property account(PropertyName("Account"));
    account.SetValue(PropertyValue().Set(TypedAnyProperty<int>(3456)));

    Property name(PropertyName("Name"));
    name.SetValue(PropertyValue().Set(TypedAnyProperty<std::string>("John Smoth")));

    fields.emplace_back(account);
    fields.emplace_back(name);

    Property customer(PropertyName("Customer"));
    customer.SetValue(PropertyValue().Set(fields));

    //auto p = customer.GetValue();
    if (customer.GetType() == PVT_Vector)
    {
        auto v = customer.GetVector();
        for (auto prop : v)
        {
            switch (prop.GetType())
            {
            case PVT_Property:
                break;
            case PVT_Map:
                break;
            case PVT_Vector:
                break;
            case PVT_Value:
                if (prop.CheckValueType<int>())
                {
                    auto value = prop.Value().Get<int>();
                }

                //auto value = prop.GetValue();
                
                //Here we need to know what the real type of the Value was
                break;
            }
        }
    }
}

qor_pp_test_suite_case(PropertyTestSuite, canBuildPropertyModelFromStruct)
{
    TestPerson person{ "charlie", "06/08/1988", 10745 };
    Property model = Property::FromStruct(person);

    TestPerson copy = model.ToStruct<TestPerson>();

    qor_pp_assert_that(copy == person).isTrue();
}