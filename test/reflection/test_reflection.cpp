// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"
#include "src/qor/reflection/reflection.h"

using namespace qor;
using namespace qor::test;


struct RelectionTestSuite{};

struct some_person {
    std::string name;
    unsigned birth_year;
};

struct foo {            // defining structure
    int some_integer;
    char c;
};

qor_pp_test_suite_case(RelectionTestSuite, canDoReflection101)
{
    some_person val{"Edgar Allan Poe", 1809};

    std::cout << pfr::get<0>(val)                // No macro!
        << " was born in " << pfr::get<1>(val);  // Works with any aggregate initializables!

    std::cout << pfr::io(val);                   // Outputs: {"Edgar Allan Poe", 1809}    
    qor_pp_assert_that(true).isTrue();
}

constexpr std::string_view n1 = pfr::get_name<0, some_person>(); // returns "some_integer"
constexpr std::string_view n2 = pfr::get_name<1, some_person>(); // returns "c"

qor_pp_test_suite_case(RelectionTestSuite, canGetNamesbyReflection)
{
    qor_pp_assert_that(n1 == "name");
    qor_pp_assert_that(n2 == "birth_year");
}

qor_pp_test_suite_case(RelectionTestSuite, canGetFieldsByIndex)
{
    foo f {777, '!'};
    auto& r1 = pfr::get<0>(f); // accessing field with index 0, returns reference to `foo::some_integer`
    auto& r2 = pfr::get<1>(f); // accessing field with index 1, returns reference to `foo::c`

    qor_pp_assert_that(r1).isEqualTo(777);
    qor_pp_assert_that(r2).isEqualTo('!');

    r1 = 42;
    r2 = 'A';

    qor_pp_assert_that(r1).isEqualTo(42);
    qor_pp_assert_that(r2).isEqualTo('A');

    qor_pp_assert_that(f.some_integer).isEqualTo(42);
    qor_pp_assert_that(f.c).isEqualTo('A');
}