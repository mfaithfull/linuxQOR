// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <ostream>

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"
#include "src/qor/sync/asynclatch.h"
#include "src/qor/sync/singleconsumerevent.h"
#include "src/framework/task/task.h"
#include "src/framework/task/whenallready.h"
#include "src/framework/task/syncwait.h"

using namespace qor;
using namespace qor::test;
//using namespace qor::framework;

struct AsyncLatchTestSuite{};

qor_pp_test_suite_case(AsyncLatchTestSuite, latch_constructed_with_zero_count_is_initially_ready)
{
	AsyncLatch latch(0);
	qor_pp_assert_that(latch.is_ready());
}

qor_pp_test_suite_case(AsyncLatchTestSuite, latch_constructed_with_negative_count_is_initially_ready)
{
	AsyncLatch latch(-3);
	qor_pp_assert_that(latch.is_ready());
}

qor_pp_test_suite_case(AsyncLatchTestSuite, count_down_and_is_ready)
{
	AsyncLatch latch(3);
	qor_pp_assert_that(!latch.is_ready());
	latch.count_down();
	qor_pp_assert_that(!latch.is_ready());
	latch.count_down();
	qor_pp_assert_that(!latch.is_ready());
	latch.count_down();
	qor_pp_assert_that(latch.is_ready());
}

qor_pp_test_suite_case(AsyncLatchTestSuite, count_down_by_n)
{
	AsyncLatch latch(5);
	latch.count_down(3);
	qor_pp_assert_that(!latch.is_ready());
	latch.count_down(2);
	qor_pp_assert_that(latch.is_ready());
}

qor_pp_test_suite_case(AsyncLatchTestSuite, single_awaiter)
{
	AsyncLatch latch(2);
	bool after = false;
	sync_wait(when_all_ready(
		[&]() -> task<>
		{
			co_await latch;
			after = true;
		}(),
		[&]() -> task<>
		{
			qor_pp_assert_that(!after);
			latch.count_down();
			qor_pp_assert_that(!after);
			latch.count_down();
			qor_pp_assert_that(after);
			co_return;
		}()
	));
}

qor_pp_test_suite_case(AsyncLatchTestSuite, multiple_awaiters)
{
	AsyncLatch latch(2);
	bool after1 = false;
	bool after2 = false;
	bool after3 = false;
	sync_wait(when_all_ready(
		[&]() -> task<>
		{
			co_await latch;
			after1 = true;
		}(),
		[&]() -> task<>
		{
			co_await latch;
			after2 = true;
		}(),
		[&]() -> task<>
		{
			co_await latch;
			after3 = true;
		}(),
		[&]() -> task<>
		{
			qor_pp_assert_that(!after1);
			qor_pp_assert_that(!after2);
			qor_pp_assert_that(!after3);
			latch.count_down();
			qor_pp_assert_that(!after1);
			qor_pp_assert_that(!after2);
			qor_pp_assert_that(!after3);
			latch.count_down();
			qor_pp_assert_that(after1);
			qor_pp_assert_that(after2);
			qor_pp_assert_that(after3);
			co_return;
		}()));
}
