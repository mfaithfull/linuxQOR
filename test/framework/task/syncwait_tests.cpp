// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <string>
#include <type_traits>

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"
#include "src/framework/task/syncwait.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/objectcontext/anyobject.h"
#include "src/framework/thread/currentthread.h"
#include "src/framework/thread/thread.h"
#include "src/framework/thread/threadpool.h"
#include "src/framework/thread/currentprocess.h"
#include "src/framework/task/task.h"
#include "src/framework/task/sharedtask.h"
#include "src/qor/sync/onscopeexit.h"

using namespace qor;
using namespace qor::test;
using namespace qor::framework;

struct SyncWaitTestSuite{};


static_assert(std::is_same<
	decltype(sync_wait(std::declval<task<std::string>>())),
	std::string&&>::value);
static_assert(std::is_same<
	decltype(sync_wait(std::declval<task<std::string>&>())),
	std::string&>::value);

qor_pp_test_suite_case(SyncWaitTestSuite, sync_wait_task_T)
{
	auto makeTask = []() -> task<std::string>
	{
		co_return "foo";
	};

	auto task = makeTask();
	qor_pp_assert_that(sync_wait(task) == "foo");

	qor_pp_assert_that(sync_wait(makeTask()) == "foo");
}

qor_pp_test_suite_case(SyncWaitTestSuite, sync_wait_shared_task_T)
{
	auto makeTask = []() -> shared_task<std::string>
	{
		co_return "foo";
	};

	auto task = makeTask();

	qor_pp_assert_that(sync_wait(task) == "foo");
	qor_pp_assert_that(sync_wait(makeTask()) == "foo");
}

qor_pp_test_suite_case(SyncWaitTestSuite, sync_wait_multiple_threads)
{
	// We are creating a new task and starting it inside the sync_wait().
	// The task will reschedule itself for resumption on a thread-pool thread
	// which will sometimes complete before this thread calls event.wait()
	// inside sync_wait(). Thus we're roughly testing the thread-safety of
	// sync_wait().
	ThreadPool tp{ 1 };
	tp.Setup();

	int value = 0;
	auto createLazyTask = [&]() -> task<int>
	{
		co_await tp.Schedule();
		co_return value++;
	};

	for (int i = 0; i < 10'000; ++i)
	{
		qor_pp_assert_that(sync_wait(createLazyTask()) == i);
	}
}

