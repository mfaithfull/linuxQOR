// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <thread>
#include <cassert>
#include <vector>
#include <ostream>

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/objectcontext/anyobject.h"
#include "src/framework/thread/currentthread.h"
#include "src/framework/thread/thread.h"
#include "src/framework/thread/threadpool.h"
#include "src/framework/thread/currentprocess.h"
#include "src/framework/task/task.h"
#include "src/framework/task/syncwait.h"
#include "src/framework/task/whenall.h"
#include "src/framework/task/whenallready.h"
#include "src/qor/sync/onscopeexit.h"

#include "src/qor/sync/asyncautoresetevent.h"

using namespace qor;
using namespace qor::test;
using namespace qor::framework;

struct AsyncAutoResetEventTestSuite{};

qor_pp_test_suite_case(AsyncAutoResetEventTestSuite, testSingleWaiter)
{
	AsyncAutoResetEvent event;

	bool started = false;
	bool finished = false;
	auto run = [&]() -> task<>
	{
		started = true;
		co_await event;
		finished = true;
	};

	auto check = [&]() -> task<>
	{
		qor_pp_assert_that(started).isTrue();
		qor_pp_assert_that(finished).isFalse();

		event.set();

		qor_pp_assert_that(finished).isTrue();

		co_return;
	};

	sync_wait(when_all_ready(run(), check()));
}

qor_pp_test_suite_case(AsyncAutoResetEventTestSuite, testMultipleWaiters)
{
	AsyncAutoResetEvent event;
	
	auto run = [&](bool& flag) -> task<>
	{
		co_await event;
		flag = true;
	};

	bool completed1 = false;
	bool completed2 = false;

	auto check = [&]() -> task<>
	{
		qor_pp_assert_that(completed1).isFalse();
		qor_pp_assert_that(completed2).isFalse();

		event.set();

		qor_pp_assert_that(completed1).isTrue();
		qor_pp_assert_that(completed2).isFalse();

		event.set();

		qor_pp_assert_that(completed2).isTrue();

		co_return;
	};

	sync_wait(when_all_ready(
		run(completed1),
		run(completed2),
		check()));
}

qor_pp_test_suite_case(AsyncAutoResetEventTestSuite, testMultiThreaded)
{
	ThreadPool tp;

	auto run = [&]() -> task<>
	{
		AsyncAutoResetEvent event;

		int value = 0;

		auto startWaiter = [&]() -> task<>
		{
			co_await tp.Schedule();
			co_await event;
			++value;
			event.set();
		};

		auto startSignaller = [&]() -> task<>
		{
			co_await tp.Schedule();
			value = 5;
			event.set();
		};

		std::vector<task<>> tasks;

		tasks.emplace_back(startSignaller());

		for (int i = 0; i < 100; ++i)
		{
			tasks.emplace_back(startWaiter());
		}

		co_await when_all(std::move(tasks));

		// NOTE: Can't use qor_pp_assert_that() here because it's not thread-safe
		assert(value == 105);
	};

	std::vector<task<>> tasks;

	for (int i = 0; i < 100; ++i)
	{
		tasks.emplace_back(run());
	}

	sync_wait(when_all(std::move(tasks)));
}

