// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <thread>
#include <cassert>
#include <vector>

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"
#include "src/qor/sync/singleconsumerasyncautoresetevent.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/objectcontext/anyobject.h"
#include "src/framework/thread/currentthread.h"
#include "src/framework/thread/thread.h"
#include "src/framework/thread/threadpool.h"
#include "src/framework/thread/currentprocess.h"
#include "src/framework/task/task.h"
#include "src/framework/task/syncwait.h"
#include "src/framework/task/whenall.h"
#include "src/framework/task/whenallready.h"
#include "src/qor/sync/onscopeexit.h"

using namespace qor;
using namespace qor::test;
using namespace qor::framework;

struct SingleConsumerAsyncAutoResetEventTestSuite{};

qor_pp_test_suite_case(SingleConsumerAsyncAutoResetEventTestSuite, single_waiter)
{
	SingleConsumerAsyncAutoResetEvent event;

	bool started = false;
	bool finished = false;
	auto run = [&]() -> task<>
	{
		started = true;
		co_await event;
		finished = true;
	};

	auto check = [&]() -> task<>
	{
		qor_pp_assert_that(started);
		qor_pp_assert_that(!finished);

		event.set();

		qor_pp_assert_that(finished);

		co_return;
	};

	sync_wait(when_all_ready(run(), check()));
}

qor_pp_test_suite_case(SingleConsumerAsyncAutoResetEventTestSuite, scaare_multi_threaded)
{
	ThreadPool tp;
	tp.Setup();

	sync_wait([&]() -> task<>
	{
		SingleConsumerAsyncAutoResetEvent valueChangedEvent;

		std::atomic<int> value;

		auto consumer = [&]() -> task<int>
		{
			while (value.load(std::memory_order_relaxed) < 10'000)
			{
				co_await valueChangedEvent;
			}

			co_return 0;
		};

		auto modifier = [&](int count) -> task<int>
		{
			co_await tp.Schedule();
			for (int i = 0; i < count; ++i)
			{
				value.fetch_add(1, std::memory_order_relaxed);
				valueChangedEvent.set();
			}
			co_return 0;
		};

		for (int i = 0; i < 1000; ++i)
		{
			value.store(0, std::memory_order_relaxed);

			// Really just checking that we don't deadlock here due to a missed wake-up.
			(void)co_await when_all(consumer(), modifier(5'000), modifier(5'000));
		}
	}());
}

