// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <thread>
#include <ostream>
#include <chrono>

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"
#include "src/framework/task/cancellation/cancellationtoken.h"
#include "src/framework/task/cancellation/cancellationsource.h"
#include "src/framework/task/cancellation/cancellationregistration.h"
#include "src/framework/task/cancellation/operationcancelled.h"

using namespace qor;
using namespace qor::test;
//using namespace qor::framework;

struct CancellationtokenTestSuite{};

qor_pp_test_suite_case(CancellationtokenTestSuite, default_cancellation_token_is_not_cancellable)
{
	CancellationToken t;
	qor_pp_assert_that(!t.is_cancellation_requested());
	qor_pp_assert_that(!t.can_be_cancelled());
}

qor_pp_test_suite_case(CancellationtokenTestSuite, calling_request_cancellation_on_cancellation_source_updates_cancellation_token)
{
	CancellationSource s;
	CancellationToken t = s.token();
	qor_pp_assert_that(t.can_be_cancelled());
	qor_pp_assert_that(!t.is_cancellation_requested());
	s.request_cancellation();
	qor_pp_assert_that(t.is_cancellation_requested());
	qor_pp_assert_that(t.can_be_cancelled());
}

qor_pp_test_suite_case(CancellationtokenTestSuite, cancellation_token_cant_be_cancelled_when_last_cancellation_source_destructed)
{
	CancellationToken t;
	{
		CancellationSource s;
		t = s.token();
		qor_pp_assert_that(t.can_be_cancelled());
	}

	qor_pp_assert_that(!t.can_be_cancelled());
}

qor_pp_test_suite_case(CancellationtokenTestSuite, can_be_cancelled_when_last_cancellation_source_destructed_if_cancellation_already_requested)
{
	CancellationToken t;
	{
		CancellationSource s;
		t = s.token();
		qor_pp_assert_that(t.can_be_cancelled());
		s.request_cancellation();
	}

	qor_pp_assert_that(t.can_be_cancelled());
	qor_pp_assert_that(t.is_cancellation_requested());
}

qor_pp_test_suite_case(CancellationtokenTestSuite, registration_when_cancellation_not_yet_requested)
{
	CancellationSource s;

	bool callbackExecuted = false;
	{
		CancellationRegistration callbackRegistration(
			s.token(),
			[&] { callbackExecuted = true; });
	}

	qor_pp_assert_that(!callbackExecuted);

	{
		CancellationRegistration callbackRegistration(
			s.token(),
			[&] { callbackExecuted = true; });

		qor_pp_assert_that(!callbackExecuted);

		s.request_cancellation();

		qor_pp_assert_that(callbackExecuted);
	}
}

qor_pp_test_suite_case(CancellationtokenTestSuite, throw_if_cancellation_requested)
{
	CancellationSource s;
	CancellationToken t = s.token();

	t.throw_if_cancellation_requested();

	s.request_cancellation();

	qor_pp_test_assert_throw(t.throw_if_cancellation_requested(), operation_cancelled);
}

qor_pp_test_suite_case(CancellationtokenTestSuite, registration_called_immediately_when_cancellation_already_requested)
{
	CancellationSource s;
	s.request_cancellation();

	bool executed = false;
	CancellationRegistration r{ s.token(), [&] { executed = true; } };
	qor_pp_assert_that(executed);
}

qor_pp_test_suite_case(CancellationtokenTestSuite, register_many_callbacks)
/*	"this checks the code-path that allocates the next chunk of entries "
	"in the internal data-structres, which occurs on 17th callback"*/
{
	CancellationSource s;
	auto t = s.token();

	int callbackExecutionCount = 0;
	auto callback = [&] { ++callbackExecutionCount; };

	// Allocate enough to require a second chunk to be allocated.
	CancellationRegistration r1{ t, callback };
	CancellationRegistration r2{ t, callback };
	CancellationRegistration r3{ t, callback };
	CancellationRegistration r4{ t, callback };
	CancellationRegistration r5{ t, callback };
	CancellationRegistration r6{ t, callback };
	CancellationRegistration r7{ t, callback };
	CancellationRegistration r8{ t, callback };
	CancellationRegistration r9{ t, callback };
	CancellationRegistration r10{ t, callback };
	CancellationRegistration r11{ t, callback };
	CancellationRegistration r12{ t, callback };
	CancellationRegistration r13{ t, callback };
	CancellationRegistration r14{ t, callback };
	CancellationRegistration r15{ t, callback };
	CancellationRegistration r16{ t, callback };
	CancellationRegistration r17{ t, callback };
	CancellationRegistration r18{ t, callback };

	s.request_cancellation();

	qor_pp_assert_that(callbackExecutionCount == 18);
}

qor_pp_test_suite_case(CancellationtokenTestSuite, concurrent_registration_and_cancellation)
{
	// Just check this runs and terminates without crashing.
	for (int i = 0; i < 100; ++i)
	{
		CancellationSource source;

		std::thread waiter1{ [token = source.token()]
		{
			std::atomic<bool> cancelled = false;
			while (!cancelled)
			{
				CancellationRegistration registration{ token, [&]
				{
					cancelled = true;
				} };

				CancellationRegistration reg0{ token, [] {} };
				CancellationRegistration reg1{ token, [] {} };
				CancellationRegistration reg2{ token, [] {} };
				CancellationRegistration reg3{ token, [] {} };
				CancellationRegistration reg4{ token, [] {} };
				CancellationRegistration reg5{ token, [] {} };
				CancellationRegistration reg6{ token, [] {} };
				CancellationRegistration reg7{ token, [] {} };
				CancellationRegistration reg8{ token, [] {} };
				CancellationRegistration reg9{ token, [] {} };
				CancellationRegistration reg10{ token, [] {} };
				CancellationRegistration reg11{ token, [] {} };
				CancellationRegistration reg12{ token, [] {} };
				CancellationRegistration reg13{ token, [] {} };
				CancellationRegistration reg14{ token, [] {} };
				CancellationRegistration reg15{ token, [] {} };
				CancellationRegistration reg17{ token, [] {} };

				std::this_thread::yield();
			}
		} };

		std::thread waiter2{ [token = source.token()]
		{
			std::atomic<bool> cancelled = false;
			while (!cancelled)
			{
				CancellationRegistration registration{ token, [&]
				{
					cancelled = true;
				} };

				CancellationRegistration reg0{ token, [] {} };
				CancellationRegistration reg1{ token, [] {} };
				CancellationRegistration reg2{ token, [] {} };
				CancellationRegistration reg3{ token, [] {} };
				CancellationRegistration reg4{ token, [] {} };
				CancellationRegistration reg5{ token, [] {} };
				CancellationRegistration reg6{ token, [] {} };
				CancellationRegistration reg7{ token, [] {} };
				CancellationRegistration reg8{ token, [] {} };
				CancellationRegistration reg9{ token, [] {} };
				CancellationRegistration reg10{ token, [] {} };
				CancellationRegistration reg11{ token, [] {} };
				CancellationRegistration reg12{ token, [] {} };
				CancellationRegistration reg13{ token, [] {} };
				CancellationRegistration reg14{ token, [] {} };
				CancellationRegistration reg15{ token, [] {} };
				CancellationRegistration reg16{ token, [] {} };

				std::this_thread::yield();
			}
		} };

		std::thread waiter3{ [token = source.token()]
		{
			std::atomic<bool> cancelled = false;
			while (!cancelled)
			{
				CancellationRegistration registration{ token, [&]
				{
					cancelled = true;
				} };

				CancellationRegistration reg0{ token, [] {} };
				CancellationRegistration reg1{ token, [] {} };
				CancellationRegistration reg2{ token, [] {} };
				CancellationRegistration reg3{ token, [] {} };
				CancellationRegistration reg4{ token, [] {} };
				CancellationRegistration reg5{ token, [] {} };
				CancellationRegistration reg6{ token, [] {} };
				CancellationRegistration reg7{ token, [] {} };
				CancellationRegistration reg8{ token, [] {} };
				CancellationRegistration reg9{ token, [] {} };
				CancellationRegistration reg10{ token, [] {} };
				CancellationRegistration reg11{ token, [] {} };
				CancellationRegistration reg12{ token, [] {} };
				CancellationRegistration reg13{ token, [] {} };
				CancellationRegistration reg14{ token, [] {} };
				CancellationRegistration reg15{ token, [] {} };
				CancellationRegistration reg16{ token, [] {} };

				std::this_thread::yield();
			}
		} };

		std::thread canceller{ [&source]
		{
			source.request_cancellation();
		} };

		canceller.join();
		waiter1.join();
		waiter2.join();
		waiter3.join();
	}
}

qor_pp_test_suite_case(CancellationtokenTestSuite,  registration_single_threaded_performance)
{
	struct batch
	{
		batch(CancellationToken t)
			: r0(t, [] {})
			, r1(t, [] {})
			, r2(t, [] {})
			, r3(t, [] {})
			, r4(t, [] {})
			, r5(t, [] {})
			, r6(t, [] {})
			, r7(t, [] {})
			, r8(t, [] {})
			, r9(t, [] {})
		{}

		CancellationRegistration r0;
		CancellationRegistration r1;
		CancellationRegistration r2;
		CancellationRegistration r3;
		CancellationRegistration r4;
		CancellationRegistration r5;
		CancellationRegistration r6;
		CancellationRegistration r7;
		CancellationRegistration r8;
		CancellationRegistration r9;
	};

	CancellationSource s;

	constexpr int iterationCount = 100'000;

	auto start = std::chrono::high_resolution_clock::now();

	for (int i = 0; i < iterationCount; ++i)
	{
		CancellationRegistration r{ s.token(), [] {} };
	}

	auto end = std::chrono::high_resolution_clock::now();

	auto time1 = end - start;

	start = end;

	for (int i = 0; i < iterationCount; ++i)
	{
		batch b{ s.token() };
	}

	end = std::chrono::high_resolution_clock::now();

	auto time2 = end - start;

	start = end;

	for (int i = 0; i < iterationCount; ++i)
	{
		batch b0{ s.token() };
		batch b1{ s.token() };
		batch b2{ s.token() };
		batch b3{ s.token() };
		batch b4{ s.token() };
	}

	end = std::chrono::high_resolution_clock::now();

	auto time3 = end - start;

	auto report = [](const char* label, auto time, std::uint64_t count)
	{
		auto us = std::chrono::duration_cast<std::chrono::microseconds>(time).count();
		std::cout << label << " took " << us << "us (" << (1000.0 * us / count) << " ns/item)";
	};

	report("Individual", time1, iterationCount);
	report("Batch10", time2, 10 * iterationCount);
	report("Batch50", time3, 50 * iterationCount);
}

