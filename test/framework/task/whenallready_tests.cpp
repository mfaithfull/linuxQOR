// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <functional>
#include <string>
#include <vector>
#include <ostream>

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"
#include "src/framework/task/whenall.h"
#include "src/framework/task/task.h"
#include "src/framework/task/sharedtask.h"
#include "src/framework/task/syncwait.h"
#include "src/qor/sync/asyncmanualresetevent.h"

#include "counted.h"

using namespace qor;
using namespace qor::test;

struct WhenallReadyTestSuite{};

template<template<typename T> class TASK, typename T>
TASK<T> when_event_set_return(AsyncManualResetEvent& event, T value)
{
	co_await event;
	co_return std::move(value);
}

qor_pp_test_suite_case(WhenallReadyTestSuite, when_all_ready_with_no_args)
{
	[[maybe_unused]] std::tuple<> result = sync_wait(when_all_ready());
}

qor_pp_test_suite_case(WhenallReadyTestSuite, when_all_ready_with_one_task)
{
	bool started = false;
	auto f = [&](AsyncManualResetEvent& event) -> task<>
	{
		started = true;
		co_await event;
	};

	AsyncManualResetEvent event;
	auto whenAllAwaitable = when_all_ready(f(event));
	qor_pp_assert_that(!started);

	bool finished = false;
	sync_wait(when_all_ready(
		[&]() -> task<>
	{
		auto&[t] = co_await whenAllAwaitable;
		finished = true;
		t.result();
	}(),
		[&]() -> task<>
	{
		qor_pp_assert_that(started);
		qor_pp_assert_that(!finished);
		event.set();
		qor_pp_assert_that(finished);
		co_return;
	}()));
}

qor_pp_test_suite_case(WhenallReadyTestSuite, when_all_ready_with_multiple_tasks)
{
	auto makeTask = [&](bool& started, AsyncManualResetEvent& event, int result) -> task<int>
	{
		started = true;
		co_await event;
		co_return result;
	};

	AsyncManualResetEvent event1;
	AsyncManualResetEvent event2;
	bool started1 = false;
	bool started2 = false;
	auto whenAllAwaitable = when_all_ready(
		makeTask(started1, event1, 1),
		makeTask(started2, event2, 2));
	qor_pp_assert_that(!started1);
	qor_pp_assert_that(!started2);

	bool whenAllAwaitableFinished = false;

	sync_wait(when_all_ready(
		[&]() -> task<>
	{
		auto[t1, t2] = co_await std::move(whenAllAwaitable);
		whenAllAwaitableFinished = true;
		qor_pp_assert_that(t1.result() == 1);
		qor_pp_assert_that(t2.result() == 2);
	}(),
		[&]() -> task<>
	{
		qor_pp_assert_that(started1);
		qor_pp_assert_that(started2);

		event2.set();

		qor_pp_assert_that(!whenAllAwaitableFinished);

		event1.set();

		qor_pp_assert_that(whenAllAwaitableFinished);

		co_return;
	}()));
}

qor_pp_test_suite_case(WhenallReadyTestSuite, when_all_ready_with_all_task_types)
{
	AsyncManualResetEvent event;
	auto t0 = when_event_set_return<task>(event, 1);
	auto t1 = when_event_set_return<shared_task>(event, 2);

	auto allTask = when_all_ready(std::move(t0), t1);

	sync_wait(when_all_ready(
		[&]() -> task<>
	{
		auto [r0, r1] = co_await std::move(allTask);

		qor_pp_assert_that(r0.result() == 1);
		qor_pp_assert_that(r1.result() == 2);
	}(),
		[&]() -> task<>
	{
		event.set();
		co_return;
	}()));
}

qor_pp_test_suite_case(WhenallReadyTestSuite, when_all_ready_with_vector_T)
{
	AsyncManualResetEvent event;

	std::uint32_t startedCount = 0;
	std::uint32_t finishedCount = 0;

	auto makeTask = [&]() -> task<>
	{
		++startedCount;
		co_await event;
		++finishedCount;
	};

	std::vector<task<>> tasks;
	for (std::uint32_t i = 0; i < 10; ++i)
	{
		tasks.emplace_back(makeTask());
	}

	auto allTask = when_all_ready(std::move(tasks));

	// Shouldn't have started any tasks yet.
	qor_pp_assert_that(startedCount == 0u);

	sync_wait(when_all_ready(
		[&]() -> task<>
	{
		auto resultTasks = co_await std::move(allTask);
		qor_pp_assert_that(resultTasks.size() == 10u);

		for (auto& t : resultTasks)
		{
			t.result();
		}
	}(),
		[&]() -> task<>
	{
		qor_pp_assert_that(startedCount == 10u);
		qor_pp_assert_that(finishedCount == 0u);

		event.set();

		qor_pp_assert_that(finishedCount == 10u);

		co_return;
	}()));
}

qor_pp_test_suite_case(WhenallReadyTestSuite, when_all_ready_with_vector_shared_task_T)
{
	AsyncManualResetEvent event;

	std::uint32_t startedCount = 0;
	std::uint32_t finishedCount = 0;

	auto makeTask = [&]() -> shared_task<>
	{
		++startedCount;
		co_await event;
		++finishedCount;
	};

	std::vector<shared_task<>> tasks;
	for (std::uint32_t i = 0; i < 10; ++i)
	{
		tasks.emplace_back(makeTask());
	}

	auto allTask = when_all_ready(std::move(tasks));

	// Shouldn't have started any tasks yet.
	qor_pp_assert_that(startedCount == 0u);

	sync_wait(when_all_ready(
		[&]() -> task<>
	{
		auto resultTasks = co_await std::move(allTask);
		qor_pp_assert_that(resultTasks.size() == 10u);

		for (auto& t : resultTasks)
		{
			t.result();
		}
	}(),
		[&]() -> task<>
	{
		qor_pp_assert_that(startedCount == 10u);
		qor_pp_assert_that(finishedCount == 0u);

		event.set();

		qor_pp_assert_that(finishedCount == 10u);

		co_return;
	}()));
}

qor_pp_test_suite_case(WhenallReadyTestSuite, when_all_ready_doesnt_rethrow_exception)
{
	auto makeTask = [](bool throwException) -> task<int>
	{
		if (throwException)
		{
			throw std::exception{};
		}
		else
		{
			co_return 123;
		}
	};

	sync_wait([&]() -> task<>
	{
		try
		{
			auto[t0, t1] = co_await when_all_ready(makeTask(true), makeTask(false));

			// You can obtain the exceptions by re-awaiting the returned tasks.
			qor_pp_test_assert_throw(t0.result(), std::exception);
			qor_pp_assert_that(t1.result() == 123);
		}
		catch (...)
		{
			qor_pp_assert_that(false);
		}
	}());
}


