// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"
#include "src/qor/sync/asyncmanualresetevent.h"
#include "src/framework/task/task.h"
#include "src/framework/task/syncwait.h"
#include "src/framework/task/whenallready.h"

using namespace qor;
using namespace qor::test;
//using namespace qor::framework;

struct AsyncManualRestEventTestSuite{};

qor_pp_test_suite_case(AsyncManualRestEventTestSuite, default_constructor_initially_not_set)
{
	AsyncManualResetEvent event;
	qor_pp_assert_that(!event.is_set());
}

qor_pp_test_suite_case(AsyncManualRestEventTestSuite, construct_event_initially_set)
{
	AsyncManualResetEvent event{ true };
	qor_pp_assert_that(event.is_set());
}

qor_pp_test_suite_case(AsyncManualRestEventTestSuite, set_and_reset)
{
	AsyncManualResetEvent event;
	qor_pp_assert_that(!event.is_set());
	event.set();
	qor_pp_assert_that(event.is_set());
	event.set();
	qor_pp_assert_that(event.is_set());
	event.reset();
	qor_pp_assert_that(!event.is_set());
	event.reset();
	qor_pp_assert_that(!event.is_set());
	event.set();
	qor_pp_assert_that(event.is_set());
}

qor_pp_test_suite_case(AsyncManualRestEventTestSuite, await_not_set_event)
{
	AsyncManualResetEvent event;

	auto createWaiter = [&](bool& flag) -> task<>
	{
		co_await event;
		flag = true;
	};

	bool completed1 = false;
	bool completed2 = false;

	auto check = [&]() -> task<>
	{
		qor_pp_assert_that(!completed1);
		qor_pp_assert_that(!completed2);

		event.reset();

		qor_pp_assert_that(!completed1);
		qor_pp_assert_that(!completed2);

		event.set();

		qor_pp_assert_that(completed1);
		qor_pp_assert_that(completed2);

		co_return;
	};

	sync_wait(when_all_ready(
		createWaiter(completed1),
		createWaiter(completed2),
		check()));
}

qor_pp_test_suite_case(AsyncManualRestEventTestSuite, await_already_set_event_doesnt_suspend)
{
	AsyncManualResetEvent event{ true };

	auto createWaiter = [&]() -> task<>
	{
		co_await event;
	};

	// Should complete without blocking.
	sync_wait(when_all_ready(
		createWaiter(),
		createWaiter()));
}
