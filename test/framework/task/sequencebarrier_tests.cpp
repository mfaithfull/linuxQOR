// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <stdio.h>
#include <thread>

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"
#include "src/qor/sync/sequencebarrier.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/objectcontext/anyobject.h"
#include "src/framework/thread/currentthread.h"
#include "src/framework/thread/thread.h"
#include "src/framework/thread/threadpool.h"
#include "src/framework/thread/currentprocess.h"
#include "src/framework/task/task.h"
#include "src/framework/task/syncwait.h"
#include "src/framework/task/whenall.h"
#include "src/framework/task/scheduler/inlinescheduler.h"

using namespace qor;
using namespace qor::test;
using namespace qor::detail;
using namespace qor::framework;

struct SequenceBarrierTestSuite{};

qor_pp_test_suite_case(SequenceBarrierTestSuite, default_construction)
{
	SequenceBarrier<std::uint32_t> barrier;
	qor_pp_assert_that(barrier.last_published() == sequence_of<std::uint32_t>::initial_sequence);
	barrier.publish(3);
	qor_pp_assert_that(barrier.last_published() == 3);
}

qor_pp_test_suite_case(SequenceBarrierTestSuite, constructing_with_initial_sequence_number)
{
	SequenceBarrier<std::uint64_t> barrier{ 100 };
	qor_pp_assert_that(barrier.last_published() == 100);
}

qor_pp_test_suite_case(SequenceBarrierTestSuite, wait_until_published_single_threaded)
{
	InlineScheduler scheduler;

	SequenceBarrier<std::uint32_t> barrier;
	bool reachedA = false;
	bool reachedB = false;
	bool reachedC = false;
	bool reachedD = false;
	bool reachedE = false;
	bool reachedF = false;
	sync_wait(when_all(
		[&]() -> task<>
		{
			qor_pp_assert_that(co_await barrier.wait_until_published(0, scheduler) == 0);
			reachedA = true;
			qor_pp_assert_that(co_await barrier.wait_until_published(1, scheduler) == 1);
			reachedB = true;
			qor_pp_assert_that(co_await barrier.wait_until_published(3, scheduler) == 3);
			reachedC = true;
			qor_pp_assert_that(co_await barrier.wait_until_published(4, scheduler) == 10);
			reachedD = true;
			co_await barrier.wait_until_published(5, scheduler);
			reachedE = true;
			co_await barrier.wait_until_published(10, scheduler);
			reachedF = true;
		}(),
		[&]() -> task<>
		{
			qor_pp_assert_that(!reachedA);
			barrier.publish(0);
			qor_pp_assert_that(reachedA);
			qor_pp_assert_that(!reachedB);
			barrier.publish(1);
			qor_pp_assert_that(reachedB);
			qor_pp_assert_that(!reachedC);
			barrier.publish(2);
			qor_pp_assert_that(!reachedC);
			barrier.publish(3);
			qor_pp_assert_that(reachedC);
			qor_pp_assert_that(!reachedD);
			barrier.publish(10);
			qor_pp_assert_that(reachedD);
			qor_pp_assert_that(reachedE);
			qor_pp_assert_that(reachedF);
			co_return;
		}()));
	qor_pp_assert_that(reachedF);
}

qor_pp_test_suite_case(SequenceBarrierTestSuite, wait_until_published_multiple_awaiters)
{
	InlineScheduler scheduler;

	SequenceBarrier<std::uint32_t> barrier;
	bool reachedA = false;
	bool reachedB = false;
	bool reachedC = false;
	bool reachedD = false;
	bool reachedE = false;
	sync_wait(when_all(
		[&]() -> task<>
	{
		qor_pp_assert_that(co_await barrier.wait_until_published(0, scheduler) == 0);
		reachedA = true;
		qor_pp_assert_that(co_await barrier.wait_until_published(1, scheduler) == 1);
		reachedB = true;
		qor_pp_assert_that(co_await barrier.wait_until_published(3, scheduler) == 3);
		reachedC = true;
	}(),
		[&]() -> task<>
	{
		qor_pp_assert_that(co_await barrier.wait_until_published(0, scheduler) == 0);
		reachedD = true;
		qor_pp_assert_that(co_await barrier.wait_until_published(3, scheduler) == 3);
		reachedE = true;
	}(),
		[&]() -> task<>
	{
		qor_pp_assert_that(!reachedA);
		qor_pp_assert_that(!reachedD);
		barrier.publish(0);
		qor_pp_assert_that(reachedA);
		qor_pp_assert_that(reachedD);
		qor_pp_assert_that(!reachedB);
		qor_pp_assert_that(!reachedE);
		barrier.publish(1);
		qor_pp_assert_that(reachedB);
		qor_pp_assert_that(!reachedC);
		qor_pp_assert_that(!reachedE);
		barrier.publish(2);
		qor_pp_assert_that(!reachedC);
		qor_pp_assert_that(!reachedE);
		barrier.publish(3);
		qor_pp_assert_that(reachedC);
		qor_pp_assert_that(reachedE);
		co_return;
	}()));
	qor_pp_assert_that(reachedC);
	qor_pp_assert_that(reachedE);
}

qor_pp_test_suite_case(SequenceBarrierTestSuite, sbts_multi_threaded_usage_single_consumer)
{
	ThreadPool tp;
	tp.Setup();

	SequenceBarrier<std::size_t> writeBarrier;
	SequenceBarrier<std::size_t> readBarrier;

	constexpr std::size_t iterationCount = 1'000'000;

	constexpr std::size_t bufferSize = 256;
	std::uint64_t buffer[bufferSize];

	auto[result, dummy] = sync_wait(when_all(
		[&]() -> task<std::uint64_t>
	{
		// Consumer
		std::uint64_t sum = 0;

		bool reachedEnd = false;
		std::size_t nextToRead = 0;
		do
		{
			std::size_t available = co_await writeBarrier.wait_until_published(nextToRead, tp);
			do
			{
				sum += buffer[nextToRead % bufferSize];
			} while (nextToRead++ != available);

			// Zero value is sentinel that indicates the end of the stream.
			reachedEnd = buffer[available % bufferSize] == 0;

			// Notify that we've finished processing up to 'available'.
			readBarrier.publish(available);
		} while (!reachedEnd);

		co_return sum;
	}(),
		[&]() -> task<>
	{
		// Producer
		std::size_t available = readBarrier.last_published() + bufferSize;
		for (std::size_t nextToWrite = 0; nextToWrite <= iterationCount; ++nextToWrite)
		{
			if (sequence_of<std::size_t>::precedes(available, nextToWrite))
			{
				available = co_await readBarrier.wait_until_published(nextToWrite - bufferSize, tp) + bufferSize;
			}

			if (nextToWrite == iterationCount)
			{
				// Write sentinel (zero) as last element.
				buffer[nextToWrite % bufferSize] = 0;
			}
			else
			{
				// Write value
				buffer[nextToWrite % bufferSize] = nextToWrite + 1;
			}

			// Notify consumer that we've published a new value.
			writeBarrier.publish(nextToWrite);
		}
	}()));

	// Suppress unused variable warning.
	(void)dummy;

	constexpr std::uint64_t expectedResult =
		std::uint64_t(iterationCount) * std::uint64_t(iterationCount + 1) / 2;

	qor_pp_assert_that(result == expectedResult);
}

