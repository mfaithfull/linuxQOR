// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"

#include "../../src/qor/test/test.h"
#include "../../src/qor/assert/assert.h"
#include "../../src/framework/workflow/workflow.h"
#include "../../src/framework/workflow/compound_workflow.h"

using namespace qor;
using namespace qor::test;
using namespace qor::workflow;


struct WorkflowTestSuite{};

class ExampleWorkflow : public Workflow
{
    void InitialStateHandler(Transition t)
    {
        switch(t)
        {
            case Transition::Enter:
                std::cout << " initial workflow state entered.";
                PushState(state_t::Create<ExampleWorkflow, &ExampleWorkflow::State1>(this));
            break;
            case Transition::Suspend:
                std::cout << " initial workflow state suspended.";
            break;
            case Transition::Resume:
                std::cout << " initial workflow state resumed.";
                PopState();
            break;
            case Transition::Leave:
                std::cout << " initial workflow state completed.";
                m_complete = true;
            break;
        }
    }

    void State1(Transition t)
    {
        switch(t)
        {
            case Transition::Enter:
                std::cout << " workflow state1 entered.";
                PopState();
            break;
            case Transition::Suspend:
                std::cout << " workflow state1 suspended.";
            break;
            case Transition::Resume:
                std::cout << " workflow state1 resumed.";
                PopState();
            break;
            case Transition::Leave:
                std::cout << " workflow state1 completed.";            
            break;
        }
    }

};

qor_pp_test_suite_case(WorkflowTestSuite, canDoSimpleWorkflow)
{    
    ExampleWorkflow test_workflow;
    test_workflow.Start();
    qor_pp_assert_that(test_workflow.IsComplete()).isTrue();
}

qor_pp_test_suite_case(WorkflowTestSuite, canDoCompoundWorkflow)
{    
    CompoundWorkflow test_compound;
    test_compound.SetInitialWorkflow( new_ref<ExampleWorkflow>().AsRef<IWorkflow>() );    
    test_compound.Start();
}
