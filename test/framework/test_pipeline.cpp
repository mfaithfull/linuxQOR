// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <random>

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"
#include "src/framework/pipeline/pipeline.h"
#include "src/framework/pipeline/podbuffer.h"
#include "src/framework/pipeline/copyfilter.h"
#include "src/framework/pipeline/iosource.h"
#include "src/components/framework/pipeline/sinks/stdoutsink/stdoutsink.h"
#include "src/components/framework/pipeline/sources/stringsource/stringsource.h"
#include "src/components/framework/pipeline/filters/base64encodefilter/base64encodefilter.h"
#include "src/components/framework/pipeline/filters/base64decodefilter/base64decodefilter.h"
#include "src/components/framework/pipeline/sinks/stringsink/stringsink.h"

using namespace qor;
using namespace qor::test;
using namespace qor::pipeline;
using namespace qor::components;

struct PipelineTestSuite{};

qor_pp_test_suite_case(PipelineTestSuite, testCompilesWithQORPipelineLinked)
{    
    qor_pp_assert_that(true).isTrue();
}

qor_pp_test_suite_case(PipelineTestSuite, canMakeAByteBuffer)
{    
    ByteBuffer test_buffer(64);
}

qor_pp_test_suite_case(PipelineTestSuite, writeOneReadOne)
{    
    PODBuffer<int> test_buffer(64);

    test_buffer << 42;
    int result;    
    test_buffer >> result;

    qor_pp_assert_that(result).isEqualTo(42);
}

qor_pp_test_suite_case(PipelineTestSuite, readToEnd)
{    
    PODBuffer<int> test_buffer(4);

    test_buffer << 42 << 84 << 168;
    int result;
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(42);
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(84);
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(168);
    qor_pp_assert_that(test_buffer.ReadCapacity()).isEqualTo(0);
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(168);
}

qor_pp_test_suite_case(PipelineTestSuite, writeOverEnd)
{    
    PODBuffer<int> test_buffer(2);

    test_buffer << 42 << 84 << 168;
    int result;
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(42);
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(84);
    qor_pp_assert_that(test_buffer.WriteCapacity()).isEqualTo(2);
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(84);
}

qor_pp_test_suite_case(PipelineTestSuite, wrapAllowsEndlessUse)
{    
    PODBuffer<int> test_buffer(3);
    int result;
    int count = 0;
    do
    {
        test_buffer << 42 << 84;
    
        test_buffer >> result;
        test_buffer >> result;
    } while (count++ < 20);
   
    qor_pp_assert_that(test_buffer.WriteCapacity()).isEqualTo(3);
    test_buffer << 12;
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(12);
}

class NoiseSource : public qor::pipeline::iosource_base
{
public:

    NoiseSource() = default;
    virtual ~NoiseSource() = default;

    virtual size_t ReadBytes(byte* buffer, size_t bytesToRead)
    {
        for (unsigned int i = 0; i < bytesToRead; i++)
        {
            buffer[i] = Next() % 256;
        }
        return bytesToRead;
    }
/*
    virtual bool Read(size_t& unitsRead, size_t unitsToRead = 1)
    {
        Buffer* unitBuffer = GetBuffer();
        if(unitBuffer)
        {
            size_t unitSize = unitBuffer->GetUnitSize();
            byte* space = GetBuffer()->WriteRequest(unitsToRead);
            size_t bytesRead = ReadBytes(space, unitsToRead * unitSize);
            unitsRead = bytesRead / unitSize;
            unitBuffer->WriteAcknowledge(unitsRead);
            OnReadSuccess(unitsRead);

            if (GetFlowMode() == Push)
            {
                size_t unitsWritten = 0;
                ActualSink()->Write(unitsWritten, unitsRead);
                return unitsWritten > 0 ? true : false;
            }
        }        
        return true;
    }
        */
    virtual bool IsAtEnd() {return false;}

protected:

    unsigned int Next()
    {
        return m_rnd();
    }

private:

    std::random_device m_rnd;

};

qor_pp_test_suite_case(PipelineTestSuite, readNoiseFromNoiseSource)
{
	ByteBuffer Buffer(32);
	NoiseSource noiseSource;
	noiseSource.SetBuffer(&Buffer);

	size_t Result = 0;
	noiseSource.Read(Result, 32);

	qor::byte* pData = Buffer.ReadRequest(Result);
	for (size_t i = 0; i < Result; i++)
	{
		std::cout << pData[i];
	}
    Buffer.ReadAcknowledge(Result);
}

qor_pp_test_suite_case(PipelineTestSuite, copyFilter)
{
    ByteBuffer InBuffer(32);
    NoiseSource noiseSource;
    noiseSource.SetBuffer(&InBuffer);

    ByteBuffer OutBuffer(32);
    StdOutSink sink;
    sink.SetBuffer(&OutBuffer);

    CopyFilter filter;
    filter.SetSink(&sink);
    filter.SetSource(&noiseSource);

    size_t unitsPumped = 0;
    filter.Pump(unitsPumped, 56);
}

qor_pp_test_suite_case(PipelineTestSuite, copyFilterInPushMode)
{
    Pipeline PushedPipe;
    PushedPipe.SetFlowMode(Element::FlowMode::Push);
    
    ByteBuffer InBuffer(32);
    NoiseSource noiseSource;
    noiseSource.SetFlowMode(Element::FlowMode::Push);
    noiseSource.SetBuffer(&InBuffer);    
    noiseSource.SetParent(&PushedPipe);

    ByteBuffer OutBuffer(32);
    StdOutSink sink;
    sink.SetFlowMode(Element::FlowMode::Push);
    sink.SetBuffer(&OutBuffer);
    sink.SetParent(&PushedPipe);

    CopyFilter filter;
    filter.SetFlowMode(Element::FlowMode::Push);
    filter.SetParent(&PushedPipe);
    filter.SetSink(&sink);
    filter.SetSource(&noiseSource);

    PushedPipe.SetSource(&filter);
    PushedPipe.SetSink(&filter);

    size_t unitsPumped = 0;
    PushedPipe.Pump(unitsPumped, (size_t)56);
}

qor_pp_test_suite_case(PipelineTestSuite, validateStringSource)
{
    std::string testData = "Mary had a little lamb. The lamb was white as snow.";
    
    Pipeline testStringSource;
    testStringSource.SetFlowMode(Element::FlowMode::Push);

    ByteBuffer Buffer(128);

    StdOutSink sink;
    sink.SetParent(&testStringSource);
    sink.SetBuffer(&Buffer);    

    StringSource stringSource;
    stringSource.SetBuffer(&Buffer);
    stringSource.SetParent(&testStringSource);
    stringSource.SetData(testData);
    stringSource.SetSink(&sink);

    sink.SetSource(&stringSource);

    testStringSource.SetSource(&stringSource);
    testStringSource.SetSink(&sink);

    size_t unitsPumped = 0;
    testStringSource.Pump(unitsPumped, testData.length());
}

qor_pp_test_suite_case(PipelineTestSuite, testBase64EncodeFilter)
{
    std::string testData = "Mary had a little lamb. The lamb was white as snow.";
    
    Pipeline testPipeline;
    testPipeline.SetFlowMode(Element::FlowMode::Push);

    ByteBuffer InBuffer(128);
    ByteBuffer OutBuffer(200);

    StdOutSink sink;
    sink.SetParent(&testPipeline);
    sink.SetBuffer(&OutBuffer);    

    StringSource source;
    source.SetBuffer(&InBuffer);
    source.SetParent(&testPipeline);
    source.SetData(testData);

    Base64EncodeFilter filter;
    filter.SetFlowMode(Element::FlowMode::Push);
    filter.SetParent(&testPipeline);
    filter.SetSink(&sink);
    filter.SetSource(&source);
    
    testPipeline.SetSource(&filter);
    testPipeline.SetSink(&filter);

    size_t unitsPumped = 0;
    testPipeline.Pump(unitsPumped, testData.length());
}

qor_pp_test_suite_case(PipelineTestSuite, validateStringSink)
{
    std::string testData = "Mary had a little lamb. The lamb was white as snow.";
    
    Pipeline testPipeline;
    testPipeline.SetFlowMode(Element::FlowMode::Push);

    ByteBuffer Buffer(128);

    StringSink stringSink;
    stringSink.SetParent(&testPipeline);
    stringSink.SetBuffer(&Buffer);    

    StringSource source;
    source.SetBuffer(&Buffer);
    source.SetData(testData);
    source.SetSink(&stringSink);

    stringSink.SetSource(&source);

    testPipeline.SetSource(&source);
    testPipeline.SetSink(&stringSink);

    size_t unitsPumped = 0;
    testPipeline.Pump(unitsPumped, testData.length());
}

qor_pp_test_suite_case(PipelineTestSuite, testBase64DecodeFilter)
{
    std::string testData = "Mary had a little lamb. The lamb was white as snow.";
    
    Pipeline testPipeline;
    testPipeline.SetFlowMode(Element::FlowMode::Push);

    ByteBuffer InBuffer(128);
    ByteBuffer EncodedBuffer(200);
    ByteBuffer OutBuffer(128);

    StringSource source;
    source.SetBuffer(&InBuffer);
    source.SetParent(&testPipeline);
    source.SetData(testData);

    StringSink sink;
    sink.SetParent(&testPipeline);
    sink.SetBuffer(&OutBuffer);    

    Base64EncodeFilter encodeFilter;
    encodeFilter.SetBuffer(&EncodedBuffer);
    encodeFilter.SetFlowMode(Element::FlowMode::Push);
    encodeFilter.SetParent(&testPipeline);    
    encodeFilter.SetSource(&source);

    Base64DecodeFilter decodeFilter;
    decodeFilter.SetBuffer(&EncodedBuffer);
    decodeFilter.SetFlowMode(Element::FlowMode::Push);
    decodeFilter.SetParent(&testPipeline);    
    decodeFilter.SetSource(&encodeFilter);

    encodeFilter.SetSink(&decodeFilter);
    decodeFilter.SetSink(&sink);
    
    testPipeline.SetSource(&decodeFilter);
    testPipeline.SetSink(&decodeFilter);

    size_t unitsPumped = 0;
    testPipeline.Pump(unitsPumped, testData.length());
    std::string output = sink.GetData();
    qor_pp_assert_that(output).isEqualTo(testData);
}
