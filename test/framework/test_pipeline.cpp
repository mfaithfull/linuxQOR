// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"

#include <random>

#include "../../src/qor/test/test.h"
#include "../../src/qor/assert/assert.h"
#include "../../src/framework/pipeline/pipeline.h"
#include "../../src/framework/pipeline/podbuffer.h"

using namespace qor;
using namespace qor::test;
using namespace qor::pipeline;


struct PipelineTestSuite{};

qor_pp_test_suite_case(PipelineTestSuite, testCompilesWithQORPipelineLinked)
{    
    qor_pp_assert_that(true).isTrue();
}

qor_pp_test_suite_case(PipelineTestSuite, canMakeAByteBuffer)
{    
    ByteBuffer test_buffer(64);
}

qor_pp_test_suite_case(PipelineTestSuite, writeOneReadOne)
{    
    PODBuffer<int> test_buffer(64);

    test_buffer << 42;
    int result;    
    test_buffer >> result;

    qor_pp_assert_that(result).isEqualTo(42);
}

qor_pp_test_suite_case(PipelineTestSuite, readToEnd)
{    
    PODBuffer<int> test_buffer(4);

    test_buffer << 42 << 84 << 168;
    int result;
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(42);
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(84);
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(168);
    qor_pp_assert_that(test_buffer.ReadCapacity()).isEqualTo(0);
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(168);
}

qor_pp_test_suite_case(PipelineTestSuite, writeOverEnd)
{    
    PODBuffer<int> test_buffer(2);

    test_buffer << 42 << 84 << 168;
    int result;
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(42);
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(84);
    qor_pp_assert_that(test_buffer.WriteCapacity()).isEqualTo(2);
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(84);
}

qor_pp_test_suite_case(PipelineTestSuite, wrapAllowsEndlessUse)
{    
    PODBuffer<int> test_buffer(3);
    int result;
    int count = 0;
    do
    {
        test_buffer << 42 << 84;
    
        test_buffer >> result;
        test_buffer >> result;
    } while (count++ < 20);
   
    qor_pp_assert_that(test_buffer.WriteCapacity()).isEqualTo(3);
    test_buffer << 12;
    test_buffer >> result;
    qor_pp_assert_that(result).isEqualTo(12);
}

class NoiseSource : public qor::pipeline::Source
{
public:

    NoiseSource() : Source(){}
    virtual ~NoiseSource() = default;
    virtual bool Read(size_t& unitsRead, size_t unitsToRead = 1)
    {
        byte* pBuffer = GetBuffer()->WriteRequest(unitsToRead);

        for (unsigned int i = 0; i < unitsToRead; i++)
        {
            pBuffer[i] = Next() % 256;
        }
        unitsRead = unitsToRead;
        GetBuffer()->WriteAcknowledge(unitsRead);
        OnReadSuccess(unitsRead);

        if (GetFlowMode() == Push)
        {
            size_t unitsWritten = 0;
            ActualSink()->Write(unitsWritten, unitsRead);
            return unitsWritten > 0 ? true : false;
        }
        
        return true;
    }
    virtual bool IsAtEnd() { return false;}

protected:

    unsigned int Next()
    {
        return m_rnd();
    }

    private:

    std::random_device m_rnd;

};

qor_pp_test_suite_case(PipelineTestSuite, readNoiseFromNoiseSource)
{
	ByteBuffer Buffer(32);
	NoiseSource noiseSource;
	noiseSource.SetBuffer(&Buffer);

	unsigned long ulResult = 0;
	noiseSource.Read(ulResult, 32);

	qor::byte* pData = Buffer.ReadRequest(ulResult);
	for (size_t i = 0; i < ulResult; i++)
	{
		std::cout << pData[i];
	}
}