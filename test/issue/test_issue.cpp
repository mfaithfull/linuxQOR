// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"
#include "../../src/qor/test/test.h"
#include "../../src/qor/assert/assert.h"
#include "../../src/qor/module/module.h"
#include "../../src/qor/issue/issue.h"

using namespace qor;
using namespace qor::test;

struct IssueTestSuite{};

enum class Category
{
    Top = 1,
    Up,
    Down,
    Strange,
    Charm,
    Bottom
};

class CategoryIssue : public qor::Issue<qor::What>
{
public:

    CategoryIssue(Category q)
    {
        m_q = q;
    }

    virtual ~CategoryIssue() noexcept = default;
    
    virtual void Handle(void)
    {
        Resolve( m_q == Category::Charm );
    }

    virtual void Escalate(void)
    {
        qor::issue<CategoryIssue, Category>(Category::Charm);
    }
private:

    Category m_q;
};

void raise_category_issue(const Category& q)
{
    qor::issue<CategoryIssue, const Category&>(q);
}

qor_pp_test_suite_case(IssueTestSuite, canConstructACategoryIssue)
{
    raise_category_issue( Category::Strange );

    qor_pp_assert_that( true ).isTrue();
}
