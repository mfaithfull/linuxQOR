// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"
#include "../../src/qor/test/test.h"
#include "../../src/qor/assert/assert.h"
#include "../../src/qor/module/module.h"
#include "../../src/qor/interception/functioncontext.h"
#include "../../src/qor/interception/callinterceptor.h"

using namespace qor;
using namespace qor::test;

struct CallInterceptorTestSuite{};

class CallCounter : public CallInterceptor
{
public:
    CallCounter() : callCount(0), callCompletedCount(0)
    {

    }

    void CallMade( CallContext* pCall, IFunctionContext* pFunction )
    {
        callCount++;
    }

    virtual void CallCompleted( CallContext* pCall )
    {
        callCompletedCount++;
    }

    uint64_t callCount;
    uint64_t callCompletedCount;
};

qor_pp_test_suite_case(CallInterceptorTestSuite, canInstantiateACallInterceptor)
{
    CallInterceptor CI;
    qor_pp_assert_that(&CI).isNotNull();
}

int getAValue()
{
    qor_pp_fcontext;
    return 3;
}

int getBValue()
{
    qor_pp_fcontext;
    return 5;
}

int addValues(int a, int b)
{
    qor_pp_fcontext;
    return a + b;
}

qor_pp_test_suite_case(CallInterceptorTestSuite, canInterceptCalls)
{
    qor_pp_fcontext;
    CallCounter counter;
    int result = addValues(getAValue(), getBValue());
    qor_pp_assert_that(result).isEqualTo(8);
    qor_pp_assert_that(counter.callCount).isEqualTo(3);
    qor_pp_assert_that(counter.callCompletedCount).isEqualTo(3);
}
