// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <arpa/inet.h>
#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/objectcontext/anyobject.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/reference/newref.h"
#include "src/platform/network/sockets.h"
#include "src/platform/network/address.h"

using namespace qor;
using namespace qor::test;
using namespace qor::platform;
using namespace qor::network;
using namespace qor::network::sockets;

struct NetworkTestSuite{};
bool requiresSockets = qor::ImplementsSockets();

qor_pp_test_suite_case(NetworkTestSuite, canCreateSocketsInstance)
{    
    auto ref = new_ref<Sockets>();
    qor_pp_assert_that( &(ref()) ).isNotNull();
}

qor_pp_test_suite_case(NetworkTestSuite, canSetupSocketsInstance)
{    
    auto subsystem = new_ref<Sockets>();
    subsystem->Setup();
    subsystem->Shutdown();
}

qor_pp_test_suite_case(NetworkTestSuite, canCreateSocket)
{    
    auto subsystem = new_ref<Sockets>();
    subsystem->Setup();
    eAddressFamily addressFamily = eAddressFamily::AF_INet;
    eType type = eType::Sock_Stream;
    eProtocol protocol = eProtocol::IPProto_TCP;
    auto socket = subsystem->CreateSocket(addressFamily, type, protocol);
    subsystem->Shutdown();
}

qor_pp_test_suite_case(NetworkTestSuite, canConnectSocket)
{    
    auto subsystem = new_ref<Sockets>();
    subsystem->Setup();
    eAddressFamily addressFamily = eAddressFamily::AF_INet;
    eType type = eType::Sock_Stream;
    eProtocol protocol = eProtocol::IPProto_TCP;
    auto socket = subsystem->CreateSocket(addressFamily, type, protocol);

    Address address;
    address.sa_family = eAddressFamily::AF_INet;
    address.SetIPV4Address( 192, 168, 1, 1);
    address.sa.IPAddress.sin_port = ::htons(static_cast<uint16_t>(8006));    
    auto result = socket->Connect(address);
    subsystem->Shutdown();
}
