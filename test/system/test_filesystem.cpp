// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"

#include "../../src/qor/test/test.h"
#include "../../src/qor/assert/assert.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/objectcontext/anyobject.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/reference/newref.h"
#include "src/system/filesystem/filesystem.h"
#include "src/system/filesystem/folder.h"

using namespace qor;
using namespace qor::test;
using namespace qor::system;


struct FileSystemTestSuite{};
bool requiresFileSystem = qor::ImplementsIFileSystem();

qor_pp_test_suite_case(FileSystemTestSuite, canCreatefileSytemInstance)
{    
    auto ref = new_ref<FileSystem>();
    qor_pp_assert_that( &(ref()) ).isNotNull();
}

qor_pp_test_suite_case(FileSystemTestSuite, canGetRootFolder)
{    
    auto fileSystem = new_ref<FileSystem>();
    fileSystem().Setup();
    Folder rootFolder(fileSystem().GetRoot().Path());

    std::cout << rootFolder.Path().ToString();
    qor_pp_assert_that( rootFolder.Path().ToString().empty() ).isFalse();
}

qor_pp_test_suite_case(FileSystemTestSuite, canEnumerateCurrentFolderRegularFiles)
{
    auto fileSystem = new_ref<FileSystem>();
    fileSystem().Setup();
    Folder currentFolder(fileSystem().CurrentPath());
    std::cout << std::endl;
    currentFolder.Enumerate( [](FileIndex& i) ->bool {
        if(i.IsRegularFile())
        {
            std::cout << i.ToString() << std::endl;
        }
        return true;
    });
    qor_pp_assert_that(true).isTrue();
}

qor_pp_test_suite_case(FileSystemTestSuite, createAndDeleteANewFile)
{
    auto fileSystem = new_ref<FileSystem>();
    fileSystem().Setup();
    FileIndex newIndex(fileSystem().CurrentPath(), "TestTemp");
    auto refFile = fileSystem().CreateFile(newIndex, IFileSystem::WithFlags::NonBlock);
    fileSystem().DeleteFile(newIndex);
}