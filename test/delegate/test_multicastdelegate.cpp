// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"
#include "../../src/qor/test/test.h"
#include "../../src/qor/assert/assert.h"
#include "../../src/qor/delegate/multicastdelegate.h"

using namespace qor;
using namespace qor::test;

struct MulticastDelegateTestSuite{};


class DelegateTestTarget1 
{
    public:
    void InstanceFunction(int, char, const char*) {}
};

class DelegateTestTarget2 
{
    public:
        void InstanceFunction(int, char, const char*) {}
};

qor_pp_test_suite_case(MulticastDelegateTestSuite, canDefaultConstructMulticastDelegate)
{         
    MulticastDelegate<void(int, char, const char*)> d;
}

qor_pp_test_suite_case(MulticastDelegateTestSuite, canConstructMulticastDelegateOnMemberFunction)
{
    DelegateTestTarget1 target1;
    DelegateTestTarget2 target2;
      
    MulticastDelegate<void(int, char, const char*)> d;
    d += Delegate<void(int, char, const char*)>::Create<DelegateTestTarget1, &DelegateTestTarget1::InstanceFunction>(&target1);
    d += Delegate<void(int, char, const char*)>::Create<DelegateTestTarget2, &DelegateTestTarget2::InstanceFunction>(&target2);
}

qor_pp_test_suite_case(MulticastDelegateTestSuite, canCallMulticastDelegateOnMemberFunction)
{
    DelegateTestTarget1 target1;
    DelegateTestTarget2 target2;
      
    MulticastDelegate<void(int, char, const char*)> d;
    d+= Delegate<void(int, char, const char*)>::Create<DelegateTestTarget1, &DelegateTestTarget1::InstanceFunction>(&target1);
    d+= Delegate<void(int, char, const char*)>::Create<DelegateTestTarget2, &DelegateTestTarget2::InstanceFunction>(&target2);
    d(0, 'A', "Instance method call");
}
