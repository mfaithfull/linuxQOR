// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"
#include "../../src/qor/test/test.h"
#include "../../src/qor/assert/assert.h"
#include "../../src/qor/observer/chainlink.h"

using namespace qor;
using namespace qor::test;

struct ChainLinkTestSuite{};

size_t globalLinkableItemCount = 0;

class LinkableItem : public qor::ChainLink
{
public:

    virtual ~LinkableItem() noexcept = default;

    virtual void Process()
    {
        ++globalLinkableItemCount;
        std::cout << " Processing Linkable Item.";
    }

};

qor_pp_test_suite_case(ChainLinkTestSuite, canDoSimpleAdd)
{
    ChainLink one;
    ChainLink two;

    ChainLink* pfirst = &two;
    ChainLink::AddBefore(pfirst, &one);

    qor_pp_assert_that(one.Next()).isEqualTo(&two);
    qor_pp_assert_that(two.Prev()).isEqualTo(&one);
}

qor_pp_test_suite_case(ChainLinkTestSuite, canDoRemove)
{
    ChainLink one;
    ChainLink two;

    ChainLink* pfirst = &two;
    ChainLink::AddBefore(pfirst, &one);

    ChainLink::Remove(pfirst,&two);
    qor_pp_assert_that(one.Next()).isNull();
    qor_pp_assert_that(two.Prev()).isNull();
}

qor_pp_test_suite_case(ChainLinkTestSuite, canWalkItems)
{
    LinkableItem a;
    LinkableItem b;

    ChainLink* pfirst = &a;
    ChainLink::AddBefore(pfirst, &b);

    ChainLink::Walk<LinkableItem>(pfirst, [](LinkableItem* pItem) -> void {
        pItem->Process();
    });

    qor_pp_assert_that(globalLinkableItemCount).isEqualTo(2);
}
