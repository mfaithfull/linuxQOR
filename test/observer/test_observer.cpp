// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"
#include "../../src/qor/test/test.h"
#include "../../src/qor/assert/assert.h"
#include "../../src/qor/observer/observer.h"

using namespace qor;
using namespace qor::test;

struct ObserverTestSuite{};

class ModelTarget
{
    public:

    ModelTarget() : o(*this){}

    qor::Observable<ModelTarget> o;
};

class ObservingView
{
    public:

    ObservingView() : m_ObservationCount(0) {}

    void Update(ModelTarget& target)
    {
        ++m_ObservationCount;
        std::cout << " Target observed.";
    }

    size_t m_ObservationCount;
};

qor_pp_test_suite_case(ObserverTestSuite, canObserveByProxy)
{
    ModelTarget model;
    ObservingView view;

    ProxyObserver<ModelTarget, ObservingView> proxy(view);
 
    model.o.AddObserver(&proxy);
    model.o.Update();
    model.o.Update();

    qor_pp_assert_that(view.m_ObservationCount).isEqualTo(2);
}

qor_pp_test_suite_case(ObserverTestSuite, multipleObservers)
{
    ModelTarget model;
    ObservingView view1;
    ObservingView view2;

    ProxyObserver<ModelTarget, ObservingView> proxy1(view1);
    ProxyObserver<ModelTarget, ObservingView> proxy2(view2);
 
    model.o.AddObserver(&proxy1);
    model.o.AddObserver(&proxy2);
    model.o.Update();

    qor_pp_assert_that(view1.m_ObservationCount).isEqualTo(1);
    qor_pp_assert_that(view2.m_ObservationCount).isEqualTo(1);
}
