// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"
#include "../../src/qor/test/test.h"
#include "../../src/qor/mock/mocks.h"
#include "../../src/qor/assert/assertcc.h"

#include "../../src/qor/datastructures/guid.h"

using namespace qor;
using namespace qor::test;

namespace test_guid {

    qor_pp_test_case (canStackGUID)
    {
        GUID g;
        qor_pp_assert_that(&g).isNotEqualTo(nullptr);
    }

    qor_pp_test_case (canStackinitialiseGUID)
    {
        GUID g = {0x00000001, 0x0001, 0x0001, { 0x01, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x8}};
        qor_pp_assert_that(g == GUID({0x00000001, 0x0001, 0x0001, { 0x01, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x8}}));
    }

    qor_pp_test_case (canConstExprinitialiseGUID)
    {
        constexpr GUID guid = {0x00000001, 0x0001, 0x0002, { 0x01, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x8}};
        const GUID* luid = &guid;
        qor_pp_assert_that(*luid == GUID({0x00000001, 0x0001, 0x0002, { 0x01, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x8}}));
    }

    qor_pp_test_case (GUIdComparison)
    {
        constexpr GUID guid = {0x00000001, 0x0001, 0x0002, { 0x01, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x8}};
        qor_pp_assert_that(guid != null_guid);
        qor_pp_assert_that(guid > null_guid);
    }

}//test_guid
