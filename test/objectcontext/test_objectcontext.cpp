// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"

#include "../../src/qor/test/test.h"
#include "../../src/qor/assert/assert.h"

#include "../../src/qor/objectcontext/objectcontext.h"

using namespace qor;
using namespace qor::test;

struct ObjectContextTestSuite{};

struct SpecificType {};
struct UnrelatedType {};

qor_pp_test_suite_case(ObjectContextTestSuite, canStoreAndRetrieveintPointerInObjectPointer)
{
    int i = 987;
    int* pi = &i;
    ObjectPointer<int> objpint(pi);

    auto r = *objpint;

    qor_pp_assert_that(r).isEqualTo(i);
    qor_pp_assert_that(objpint.operator int *()).isEqualTo(pi);
}

SpecificType* RetrieveTypedPointerFromUntypedObjectContext( ObjectContextBase& UntypedObjectContext )
{
    SpecificType* pResult = UntypedObjectContext;

    return pResult;
}

qor_pp_test_suite_case(ObjectContextTestSuite, canStoreAndRetrieveTypedObjectInObjectContext)
{
    SpecificType* pRealObject = new SpecificType();

    ObjectContext<SpecificType> TypedObjectContext(pRealObject);
    qor_pp_assert_that(TypedObjectContext.IsNull()).isFalse();

    UnrelatedType* pU = nullptr;

    qor_pp_assert_that(TypedObjectContext.IsTypeTarget(pU)).isFalse();

    SpecificType* wp = nullptr;

    qor_pp_assert_that(TypedObjectContext.IsTypeTarget(wp)).isTrue();

    wp = TypedObjectContext;

    qor_pp_assert_that( wp ).isEqualTo(pRealObject);
    delete pRealObject;
}

qor_pp_test_suite_case(ObjectContextTestSuite, canStoreAndRetrieveTypedObjectInUntypedObjectContext)
{
    SpecificType* pRealObject = new SpecificType();

    ObjectContextBase UntypedObjectContext(pRealObject);
    qor_pp_assert_that(UntypedObjectContext.IsNull()).isFalse();

    SpecificType* wp = RetrieveTypedPointerFromUntypedObjectContext(UntypedObjectContext);

    qor_pp_assert_that( wp ).isEqualTo(pRealObject);

    delete pRealObject;
}
