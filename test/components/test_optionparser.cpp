// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../src/configuration/configuration.h"

#include <string.h>

#include "../../src/qor/test/test.h"
#include "../../src/qor/assert/assert.h"
#include "../../src/components/framework/optionparser/getter.h"

using namespace qor;
using namespace qor::test;
using namespace qor::components;


struct OptionParserTestSuite{};


class TestOptionable : public optparser::IOptionable
{
private:

    bool m_a;
    bool m_b;
    std::string m_c;
    std::string m_d;
    std::string m_add;
    bool m_append;
    std::string m_delete;
    bool m_verbose;
    std::string m_create;
    std::string m_file;

public:

    TestOptionable() = default;
    virtual ~TestOptionable() = default;

    virtual optparser::Option* ProvideLongOptions()
	{
		static optparser::Option longOptions[] =
		{
		/*   NAME       ARGUMENT				                FLAG	SHORTNAME */
			{"add",     optparser::Option::required_argument, nullptr, 0},
			{"append",  optparser::Option::no_argument,       nullptr, 0},
			{"delete",  optparser::Option::required_argument, nullptr, 0},
			{"verbose", optparser::Option::no_argument,       nullptr, 0},
			{"create",  optparser::Option::required_argument, nullptr, 'c'},
			{"file",    optparser::Option::required_argument, nullptr, 0},
			{nullptr,   0,						              nullptr, 0}
		};
		return longOptions;
	}

	virtual const char* ProvideShortOptionString()
	{
		return "abc:d:012";
	}

	virtual void ReceiveOptionSwitch(char c)
	{
		switch (c)
		{
		case 'a':
			m_a = true;
			break;
		case 'b':
			m_b = true;
			break;
		}
	}

	virtual void ReceiveOptionParameter(char c, const char* value)
	{
		switch (c)
		{
		case 'c':
			m_c = value;
			break;
		case 'd':
			m_d = value;
			break;
		}
	}
	
	virtual void ReceiveLongOption(const char* option, const char* value)
	{
		if (strncmp(option, "add", 3) == 0)
		{
			m_add =value;
		}
		else if (strncmp(option, "append", 6) == 0)
		{
			m_append = true;
		}
		else if (strncmp(option, "delete", 6) == 0)
		{
			m_delete = value;
		}
		else if (strncmp(option, "verbose", 7) == 0)
		{
			m_verbose = true;
		}
		else if (strncmp(option, "create", 6) == 0)
		{
			m_create = value;
		}
		else if (strncmp(option, "file", 4) == 0)
		{
			m_file = value;
		}

	}

    virtual void ReceiveNonOption(const char* parameter)
    {
        //printf("%s ", parameter);
    }
};


qor_pp_test_suite_case(OptionParserTestSuite, canRetrieveOptionalPrameters)
{
    const char* args[] = {"the program name goes here", "-a", "-b", "--create", "fog", "--file", "C:\\data\\somename.duf", "-2", "-d6"};
    TestOptionable testOptionable;
    optparser::OptionGetter optionGetter(9, args);
    optionGetter.SetOptions(testOptionable.ProvideShortOptionString(), testOptionable.ProvideLongOptions());
    optionGetter.GetOptions(testOptionable, false, false);
}