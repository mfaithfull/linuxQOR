// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"

#include "src/qor/objectcontext/anyobject.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/factory/factory.h"
#include "src/qor/instance/instance.h"
#include "src/qor/reference/ref.h"
#include "src/qor/reference/newref.h"
#include "src/qor/instance/threadsingleton.h"
#include "src/components/qor/threadmemory/smallobjectheap/smallobjectheap.h"
#include "src/components/qor/threadmemory/smallobjectsource.h"

using namespace qor;
using namespace qor::test;
using namespace qor::components::threadmemory;

struct SmallObjectHeapTestSuite{};

struct SmallTestBlob
{
    int data [7] = {};
};

namespace qor{ 
    qor_pp_declare_source_of(SmallTestBlob, SmallObjectSource) 
    qor_pp_declare_source_of(typename ref_of<SmallTestBlob>::type, SmallObjectSource) 
}

qor_pp_test_suite_case(SmallObjectHeapTestSuite, canAllocateAndFreeSmallObjectHeap)
{
    const size_t size = 48;
    const size_t number = 1000;
    auto soh = new_ref<SmallObjectHeap>();
    byte* memory[number];
    for(size_t count = 0; count < number; ++count)
    {
        memory[count] = soh->Allocate(size);
        memset(memory[count], 0x54, size);
    }
    qor_pp_assert_that(memory[number-1][size-1] == 0x54);
    for(size_t count = 0; count < number; ++count)
    {
        soh->Free(memory[count], size);
    }
    qor_pp_assert_that(soh->TotalAllocation()).isEqualTo(0);
}

qor_pp_test_suite_case(SmallObjectHeapTestSuite, canAutoAllocateAndFreeFromSmallObjectHeapByTrait)
{
    ref_of<SmallTestBlob>::type ref = new_ref<SmallTestBlob>();
    auto soh = new_ref<SmallObjectHeap>();
    qor_pp_assert_that(soh->TotalAllocation()).isAtLeast(sizeof(SmallTestBlob));
}