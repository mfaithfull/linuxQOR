// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"

#include "src/qor/objectcontext/anyobject.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/factory/factory.h"
#include "src/qor/instance/instance.h"
#include "src/qor/reference/ref.h"
#include "src/qor/reference/newref.h"
#include "src/qor/instance/threadsingleton.h"
#include "src/components/qor/threadmemory/smallobjectheap/smallobjectpage.h"

using namespace qor;
using namespace qor::test;
using namespace qor::components::threadmemory;

struct SmallObjectPageTestSuite{};

struct TestSmallitem
{
    long pole;
    long ladder;
    long handle;
};

qor_pp_test_suite_case(SmallObjectPageTestSuite, canAllocateAndFreeFromSmallObjectPage)
{
    SmallObjectPage* page = new SmallObjectPage(64, 1);
    qor_pp_assert_that(page).isNotNull();
    qor_pp_assert_that(page->IsEmpty()).isTrue();
    byte* item = page->Allocate();    
    qor_pp_assert_that(item).isNotNull();
    qor_pp_assert_that(page->IsEmpty()).isFalse();
    qor_pp_assert_that(page->IsFull()).isFalse();
    page->Free(item);
    qor_pp_assert_that(page->IsEmpty()).isTrue();
    delete page;
}

qor_pp_test_suite_case(SmallObjectPageTestSuite, canAllocateAndFreeManyFromSmallObjectPage)
{
    SmallObjectPage* page = new SmallObjectPage(sizeof(TestSmallitem) & 0x3F, 1);
    qor_pp_assert_that(page).isNotNull();
    qor_pp_assert_that(page->IsEmpty()).isTrue();
    TestSmallitem* allocations[64];
    for(size_t count = 0; count < 64; ++count)
    {
        byte* memory = page->Allocate();    
        new(memory) TestSmallitem { 34,57,89};
        allocations[count] = reinterpret_cast<TestSmallitem*>(memory);
    }

    qor_pp_assert_that(page->IsEmpty()).isFalse();
    qor_pp_assert_that(page->IsFull()).isTrue();

    for(size_t count = 0; count < 64; ++count)
    {
        page->Free(reinterpret_cast<byte*>(allocations[count]));
    }
    qor_pp_assert_that(page->IsEmpty()).isTrue();
    delete page;
}
