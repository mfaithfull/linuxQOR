// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"

#include "src/qor/objectcontext/anyobject.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/factory/factory.h"
#include "src/qor/instance/instance.h"
#include "src/qor/reference/ref.h"
#include "src/qor/reference/newref.h"
#include "src/qor/instance/threadsingleton.h"
#include "src/components/qor/threadmemory/fastheap/fastbucket.h"

using namespace qor;
using namespace qor::test;
using namespace qor::components::threadmemory;

struct FastBucketTestSuite{};

qor_pp_test_suite_case(FastBucketTestSuite, canAllocateAndFreeFastBucket)
{
    FastBucket* bucket = nullptr;
    bucket = new FastBucket();
    qor_pp_assert_that(bucket).isNotNull();
    delete bucket;
}

qor_pp_test_suite_case(FastBucketTestSuite, canAllocateAndFreeAnItemFromAFastBucket)
{
    FastBucket* bucket = nullptr;
    bucket = new FastBucket();
    
    bucket->SetSize(1);
    bucket->Initialise();
    void* memory = bucket->Allocate(5631);
    qor_pp_assert_that(bucket->AllocatedItems()).isEqualTo(1);
    qor_pp_assert_that(bucket->AllocatedPages()).isEqualTo(1);
    qor_pp_assert_that(bucket->AllocatedSpace()).isAtLeast(5631);
    bucket->Free(memory, 5631);    
    delete bucket;
}

qor_pp_test_suite_case(FastBucketTestSuite, canFillMoreThanOnePage)
{
    FastBucket* bucket = nullptr;
    bucket = new FastBucket();
    
    bucket->SetSize(1);
    bucket->Initialise();
    void* memory1 = bucket->Allocate(15631);
    void* memory2 = bucket->Allocate(15631);
    void* memory3 = bucket->Allocate(15631);
    void* memory4 = bucket->Allocate(15631);
    void* memory5 = bucket->Allocate(15631);
    qor_pp_assert_that(bucket->AllocatedItems()).isEqualTo(5);
    qor_pp_assert_that(bucket->AllocatedPages()).isEqualTo(2);
    qor_pp_assert_that(bucket->AllocatedSpace()).isAtLeast(65536);
    bucket->Free(memory3, 15631);
    bucket->Free(memory4, 15631);
    bucket->Free(memory5, 15631);
    qor_pp_assert_that(bucket->AllocatedItems()).isEqualTo(2);
    qor_pp_assert_that(bucket->AllocatedPages()).isEqualTo(1);
    bucket->Free(memory1, 15631);
    bucket->Free(memory2, 15631);
    qor_pp_assert_that(bucket->AllocatedItems()).isEqualTo(0);
    qor_pp_assert_that(bucket->AllocatedPages()).isEqualTo(1);
    delete bucket;
}
