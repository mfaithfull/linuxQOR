// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <random>

#include "src/qor/test/test.h"
#include "src/qor/assert/assert.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/objectcontext/anyobject.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/reference/newref.h"
#include "src/framework/pipeline/pipeline.h"
#include "src/framework/pipeline/podbuffer.h"
#include "src/components/framework/pipeline/sinks/stdoutsink/stdoutsink.h"
#include "src/components/framework/pipeline/sources/stdinsource/stdinsource.h"
#include "src/framework/pipeline/source.h"

using namespace qor;
using namespace qor::test;
using namespace qor::pipeline;
using namespace qor::components;

struct StdOutSinkTestSuite{};

qor_pp_test_suite_case(StdOutSinkTestSuite, testCompilesWithqor_stdoutsinkLinked)
{    
    qor_pp_assert_that(true).isTrue();
}

qor_pp_test_suite_case(StdOutSinkTestSuite, canInstancestdoutsink)
{    
    auto sink = new_ref<StdOutSink>();
    qor_pp_assert_that(sink.IsNotNull()).isTrue();
}
/*
qor_pp_test_suite_case(StdOutSinkTestSuite, canWriteToStdOutSink)
{    
    ByteBuffer buffer(1024);
    StdOutSink sink;
    StdInSource source;
    source.SetSink(&sink);
    source.SetBuffer(&buffer);
    sink.SetBuffer(&buffer);
    sink.SetSource(&source);
    size_t unitsWritten = 0;
    size_t unitsToWrite = 10;
    while( sink.Write(unitsWritten, unitsToWrite) && unitsToWrite > 0)
    {
        unitsToWrite -= unitsWritten;
        unitsWritten = 0;
    }
    qor_pp_assert_that(unitsToWrite).isEqualTo(0);
}
*/