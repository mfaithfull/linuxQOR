// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from assertcc
//Copyright 2021 Sean Nash
//under BSD 3 clause license

#include "../../src/configuration/configuration.h"
#include <memory>
#include "../../src/qor/assert/assertcc.h"
#include "../../src/qor/test/test.h"

using namespace qor;
using namespace qor::test;

struct WeakPtrSubjectTests
{
};

qor_pp_test_suite_case(WeakPtrSubjectTests, IsExpired) 
{
  std::weak_ptr<int> p;
  qor_pp_assert_that(p).isExpired();
}

qor_pp_test_suite_case(WeakPtrSubjectTests, IsNotExpired) 
{
  auto sp = std::make_shared<int>(1);
  std::weak_ptr<int> p = sp;
  qor_pp_assert_that(p).isNotExpired();
}

qor_pp_test_suite_case(WeakPtrSubjectTests, Value) 
{
  auto p = std::make_unique<int>(3);
  qor_pp_assert_that(p).hasValueThat().isEqualTo(3);
  qor_pp_assert_that(p).isNotNull();
}

qor_pp_test_suite_case(WeakPtrSubjectTests, Value2) 
{
  std::shared_ptr<int> p0 = std::make_shared<int>(5);
  std::weak_ptr<int> wp = p0;
  qor_pp_assert_that(wp).isNotExpired().value().isEqualTo(5);
}
