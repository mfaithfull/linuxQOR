// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "src/framework/pipeline/podbuffer.h"
#include "src/platform/filesystem/filesystem.h"
#include "fileprocessorworkflow.h"
#include "fileprocessorapp.h"

using namespace qor;
using namespace qor::workflow;
using namespace qor::pipeline;
using namespace qor::platform;
using namespace qor::components::optparser;

bool requiresFileSystem = ImplementsIFileSystem();

FileProcessorWorkflow::FileProcessorWorkflow() : state0(CreateDefaultState())
{
    state0.Enter = [](Workflow* w)->void{
        
        ref_of<FileProcessorApp>::type application = new_ref<FileProcessorApp>();    
        std::string filename = application->GetFileName();
        auto filesystem = ThePlatform()->GetSubsystem(guid_of<FileSystem>::guid()).AsRef<FileSystem>();
        FileIndex newIndex(filesystem->CurrentPath(), "source.txt");

        auto refReadFile = filesystem->Open(newIndex, IFileSystem::OpenFor::ReadOnly, IFileSystem::WithFlags::Exclusive);
        auto size = refReadFile->GetSize();
        PODBuffer<byte> byteBuffer;
        byteBuffer.SetCapacity(size);

        size_t& byteCount = size;
        byte* address = byteBuffer.WriteRequest(byteCount);
        auto bytesRead = refReadFile->Read(address, byteCount);
    };

    state0.Leave = [](Workflow* w)->void{

        w->SetComplete();
    };

    SetInitialState(state0);
}