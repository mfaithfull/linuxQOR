// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <iostream>
#include <optional>
#include <stdexcept>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <poll.h>

#include "src/configuration/configuration.h"
#include "src/framework/pipeline/podbuffer.h"
#include "echoserverworkflow.h"
#include "echoserverapp.h"


using namespace qor;
using namespace qor::workflow;
using namespace qor::pipeline;
using namespace qor::platform;
using namespace qor::components::optparser;

bool requiresFileSystem = ImplementsSockets();

EchoServerWorkflow::EchoServerWorkflow() : 
    setup(CreateDefaultState()), 
    listen(CreateDefaultState()),
    accept(CreateDefaultState()),
    echo(CreateDefaultState())
{
    setup.Enter = [this](Workflow* workflow)->void
    {
        auto sockets_subsystem = ThePlatform()->GetSubsystem<network::Sockets>().AsRef<network::Sockets>();

        context.server_socket = sockets_subsystem->CreateSocket(
            network::sockets::eAddressFamily::AF_INet, 
            network::sockets::eType::Sock_Stream, 
            network::sockets::eProtocol::IPProto_IP);        

        context.server_address.sa_family = network::sockets::eAddressFamily::AF_INet;
        context.server_address.SetPort(12345);
        context.server_address.SetIPV4Address(0,0,0,0);

        workflow->SetState(listen);
    };

    listen.Enter = [this](Workflow* workflow)->void
    {
        if( context.server_socket->Bind(context.server_address) < 0 ||
            context.server_socket->Listen(1) < 0)
        {
            std::cout << "can't listen on socket: " << strerror(errno) << "\n";
            
            workflow->SetResult(EXIT_FAILURE);
            workflow->SetComplete();
        }
        else
        {
            workflow->SetState(accept);
        }
    };

    accept.Enter = [this](Workflow* workflow)->void
    {
        context.client_socket = context.server_socket->Accept(context.client_address);        
        context.client_socket->SetNonBlocking(true);
        workflow->SetState(echo);
    };

    echo.Enter = [this](Workflow* workflow)->void
    {
        char buf[4];
        while(size_t n = context.client_socket->Receive(buf, sizeof buf,0))
        {
            for(size_t o{}, w(1); o != n && 0 < w; o += w)
            {
                w = context.client_socket->Send(buf + o, n - o);
            }
        }
        workflow->SetResult(EXIT_SUCCESS);
        workflow->SetComplete();
    };

    echo.Leave = [this](Workflow* workflow)->void
    {
        context.client_socket->Shutdown(network::sockets::eShutdown::ShutdownReadWrite);
        context.server_socket->Shutdown(network::sockets::eShutdown::ShutdownReadWrite);
    };

    SetInitialState(setup);
}