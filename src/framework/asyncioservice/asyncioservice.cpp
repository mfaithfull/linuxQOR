// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <cassert>

#include "asyncioservice.h"
#include "src/qor/sync/onscopeexit.h"
#include "src/framework/role/role.h"
#include "src/framework/thread/threadpool.h"

namespace qor { namespace framework{

    AsyncIOService::AsyncIOService() : m_threadState(0), m_workCount(0), m_Concurrency(0)
    {

    }

    AsyncIOService::~AsyncIOService()
    {
        assert(m_threadState.load(std::memory_order_relaxed) < active_thread_count_increment);
    }

    void AsyncIOService::SetConcurrency(unsigned short concurrency)
    {
        m_Concurrency = concurrency;
    }

    void AsyncIOService::Setup()
    {
		try
		{   
            auto poolFeature = m_Role->GetFeature(guid_of<ThreadPool>::guid()).AsRef<ThreadPool>();
			for (std::uint32_t i = 0; i < ( 1 << m_Concurrency); ++i)
			{
                poolFeature->PostTask([this] { ProcessEvents(); });
			}
		}
		catch (...)
		{
			Stop();
			throw;
		}
    }
    
    void AsyncIOService::Shutdown()
    {
        Stop();
    }

    uint64_t AsyncIOService::ProcessEvents()
    {
        uint64_t eventCount = 0;
        if (TryEnterEventLoop())
        {
            auto exitLoop = on_scope_exit([&] { ExitEventLoop(); });

            constexpr bool waitForEvent = true;
            while (!IsStopRequested() && TryProcessOneEvent(waitForEvent))
            {
                ++eventCount;
            }
        }

        return eventCount;
    }

    void AsyncIOService::NotifyWorkStarted() noexcept
    {
        m_workCount.fetch_add(1, std::memory_order_relaxed);
    }

    void AsyncIOService::NotifyWorkFinished() noexcept
    {
        if (m_workCount.fetch_sub(1, std::memory_order_relaxed) == 1)
        {
            Stop();
        }
    }

    bool AsyncIOService::IsStopRequested() const noexcept
    {
        return (m_threadState.load(std::memory_order_acquire) & stop_requested_flag) != 0;
    }

    void AsyncIOService::Stop() noexcept
    {
        const auto oldState = m_threadState.fetch_or(stop_requested_flag, std::memory_order_release);
        if ((oldState & stop_requested_flag) == 0)
        {
            for (auto activeThreadCount = oldState / active_thread_count_increment;
                    activeThreadCount > 0;
                    --activeThreadCount)
            {
                PostWakeUpEvent();
            }
        }
    }

    void AsyncIOService::Reset()
    {
        const auto oldState = m_threadState.fetch_and(~stop_requested_flag, std::memory_order_relaxed);

        // Check that there were no active threads running the event loop.
        assert(oldState == stop_requested_flag);
    }


    bool AsyncIOService::TryEnterEventLoop() noexcept
    {
        auto currentState = m_threadState.load(std::memory_order_relaxed);
        do
        {
            if ((currentState & stop_requested_flag) != 0)
            {
                return false;
            }
        } while (!m_threadState.compare_exchange_weak( currentState,
            currentState + active_thread_count_increment,
            std::memory_order_relaxed));

        return true;
    }

    bool AsyncIOService::TryProcessOneEvent(bool waitForEvent)
    {
       return false;
    }

    void AsyncIOService::ExitEventLoop() noexcept
    {
	    m_threadState.fetch_sub(active_thread_count_increment, std::memory_order_relaxed);
    }

    void AsyncIOService::PostWakeUpEvent() noexcept
    {

    }

    IOTask AsyncIOService::Read(int fd, byte* buffer, size_t len)
    {
        AsyncIOResult result{.status_code = -1, .file = ""};
        co_return result;
    }
}}//qor::framework