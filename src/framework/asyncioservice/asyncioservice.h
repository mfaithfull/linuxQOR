// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_ASYNCIOSERVICE
#define QOR_PP_H_FRAMEWORK_ASYNCIOSERVICE
 
#include <atomic>
#include <coroutine>
#include "src/qor/instance/singleton.h"
#include "src/qor/factory/factory.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/factory/externalfactory.h"
#include "src/framework/role/ifeature.h"
#include "src/framework/task/task.h"

namespace qor{ bool qor_pp_import ImplementsAsyncIOService();}

namespace qor { namespace framework{
  
    struct AsyncIOResult 
    {
        int status_code{0};
        std::string file;//TODO: carry owner pointer instead
    };

    using IOTask = task<AsyncIOResult>;

    struct AsyncIORequest 
    {
        std::coroutine_handle<> handle;
        int statusCode{-1};
    };

    class qor_pp_module_interface(QOR_LINUXASYNCIOSERVICE) AbstractIOWaiter
    {
    public:

        AbstractIOWaiter() = default;
        virtual ~AbstractIOWaiter() noexcept = default;
        virtual IOTask Read(int fd, byte* buffer, size_t len) = 0;
    };

    class qor_pp_module_interface(QOR_ASYNCIOSERVICE) AsyncIOService : public IFeature, public AbstractIOWaiter
    {
    public:

        AsyncIOService();
        virtual ~AsyncIOService();

		AsyncIOService(AsyncIOService&& other) = delete;
		AsyncIOService(const AsyncIOService& other) = delete;
		AsyncIOService& operator=(AsyncIOService&& other) = delete;
		AsyncIOService& operator=(const AsyncIOService& other) = delete;

        void SetConcurrency(unsigned short concurrency);
        virtual void Setup();
        virtual void Shutdown();

        void Stop() noexcept;
        void Reset();
        uint64_t ProcessEvents();
        void NotifyWorkStarted() noexcept;
        void NotifyWorkFinished() noexcept;
        bool IsStopRequested() const noexcept;

        AbstractIOWaiter& Context() { return *this; }

        virtual IOTask Read(int fd, byte* buffer, size_t len);
        
    private:        

		static constexpr std::uint32_t stop_requested_flag = 1;
		static constexpr std::uint32_t active_thread_count_increment = 2;

		// Bit 0: stop_requested_flag
		// Bit 1-31: count of active threads currently running the event loop
		std::atomic<std::uint32_t> m_threadState;
        std::atomic<std::uint32_t> m_workCount;

    protected:

        unsigned short m_Concurrency;
        
        bool TryEnterEventLoop() noexcept;
        virtual bool TryProcessOneEvent(bool waitForEvent);
        void ExitEventLoop() noexcept;
        void PostWakeUpEvent() noexcept;
    };
    } //framework

    qor_pp_declare_instancer_of(framework::AsyncIOService, SingletonInstancer);
    qor_pp_declare_factory_of(framework::AsyncIOService, ExternalFactory);
    constexpr GUID AsyncIOServiceGUID = {0x6201abca, 0xf405, 0x4709, {0xa9, 0x86, 0x26, 0x82, 0xeb, 0x66, 0xfd, 0xc6}};
    qor_pp_declare_guid_of(framework::AsyncIOService,AsyncIOServiceGUID);

}//qor

#endif//QOR_PP_H_FRAMEWORK_ASYNCIOSERVICE
