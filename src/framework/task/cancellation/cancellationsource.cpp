// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <cassert>

#include "cancellationsource.h"
#include "cancellationstate.h"

namespace qor{

	CancellationSource::CancellationSource() : m_state(detail::CancellationState::create())
	{
	}

	CancellationSource::CancellationSource(const CancellationSource& other) noexcept : m_state(other.m_state)
	{
		if (m_state != nullptr)
		{
			m_state->add_source_ref();
		}
	}

	CancellationSource::CancellationSource(CancellationSource&& other) noexcept : m_state(other.m_state)
	{
		other.m_state = nullptr;
	}

	CancellationSource::~CancellationSource()
	{
		if (m_state != nullptr)
		{
			m_state->release_source_ref();
		}
	}

	CancellationSource& CancellationSource::operator=(const CancellationSource& other) noexcept
	{
		if (m_state != other.m_state)
		{
			if (m_state != nullptr)
			{
				m_state->release_source_ref();
			}

			m_state = other.m_state;

			if (m_state != nullptr)
			{
				m_state->add_source_ref();
			}
		}

		return *this;
	}

	CancellationSource& CancellationSource::operator=(CancellationSource&& other) noexcept
	{
		if (this != &other)
		{
			if (m_state != nullptr)
			{
				m_state->release_source_ref();
			}

			m_state = other.m_state;
			other.m_state = nullptr;
		}

		return *this;
	}

	bool CancellationSource::can_be_cancelled() const noexcept
	{
		return m_state != nullptr;
	}

	CancellationToken CancellationSource::token() const noexcept
	{
		return CancellationToken(m_state);
	}

	void CancellationSource::request_cancellation()
	{
		if (m_state != nullptr)
		{
			m_state->request_cancellation();
		}
	}

	bool CancellationSource::is_cancellation_requested() const noexcept
	{
		return m_state != nullptr && m_state->is_cancellation_requested();
	}

}//qor
