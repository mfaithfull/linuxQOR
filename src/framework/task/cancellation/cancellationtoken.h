// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_TASK_CANCEL_TOKEN
#define QOR_PP_H_FRAMEWORK_TASK_CANCEL_TOKEN

namespace qor
{
	class CancellationSource;
	class CancellationRegistration;

	namespace detail
	{
		class CancellationState;
	}

	class qor_pp_module_interface(QOR_TASK) CancellationToken
	{
	public:

		/// Construct to a cancellation token that can't be cancelled.
		CancellationToken() noexcept;

		/// Copy another cancellation token.
		///
		/// New token will refer to the same underlying state.
		CancellationToken(const CancellationToken& other) noexcept;

		CancellationToken(CancellationToken&& other) noexcept;

		~CancellationToken();

		CancellationToken& operator=(const CancellationToken& other) noexcept;

		CancellationToken& operator=(CancellationToken&& other) noexcept;

		void swap(CancellationToken& other) noexcept;

		/// Query if it is possible that this operation will be cancelled
		/// or not.
		///
		/// Cancellable operations may be able to take more efficient code-paths
		/// if they don't need to handle cancellation requests.
		bool can_be_cancelled() const noexcept;

		/// Query if some thread has requested cancellation on an associated
		/// CancellationSource object.
		bool is_cancellation_requested() const noexcept;

		/// Throws operation_cancelled exception if cancellation
		/// has been requested for the associated operation.
		void throw_if_cancellation_requested() const;

	private:

		friend class CancellationSource;
		friend class CancellationRegistration;

		CancellationToken(detail::CancellationState* state) noexcept;

		detail::CancellationState* m_state;

	};

	inline void swap(CancellationToken& a, CancellationToken& b) noexcept
	{
		a.swap(b);
	}
}//qor

#endif//QOR_PP_H_FRAMEWORK_TASK_CANCEL_TOKEN
