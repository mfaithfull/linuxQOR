// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <utility>
#include <cassert>

#include "cancellationtoken.h"
#include "operationcancelled.h"
#include "cancellationstate.h"

namespace qor{

	cancellation_token::cancellation_token() noexcept : m_state(nullptr)
	{
	}

	cancellation_token::cancellation_token(const cancellation_token& other) noexcept : m_state(other.m_state)
	{
		if (m_state != nullptr)
		{
			m_state->add_token_ref();
		}
	}

	cancellation_token::cancellation_token(cancellation_token&& other) noexcept : m_state(other.m_state)
	{
		other.m_state = nullptr;
	}

	cancellation_token::~cancellation_token()
	{
		if (m_state != nullptr)
		{
			m_state->release_token_ref();
		}
	}

	cancellation_token& cancellation_token::operator=(const cancellation_token& other) noexcept
	{
		if (other.m_state != m_state)
		{
			if (m_state != nullptr)
			{
				m_state->release_token_ref();
			}

			m_state = other.m_state;

			if (m_state != nullptr)
			{
				m_state->add_token_ref();
			}
		}

		return *this;
	}

	cancellation_token& cancellation_token::operator=(cancellation_token&& other) noexcept
	{
		if (this != &other)
		{
			if (m_state != nullptr)
			{
				m_state->release_token_ref();
			}

			m_state = other.m_state;
			other.m_state = nullptr;
		}

		return *this;
	}

	void cancellation_token::swap(cancellation_token& other) noexcept
	{
		std::swap(m_state, other.m_state);
	}

	bool cancellation_token::can_be_cancelled() const noexcept
	{
		return m_state != nullptr && m_state->can_be_cancelled();
	}

	bool cancellation_token::is_cancellation_requested() const noexcept
	{
		return m_state != nullptr && m_state->is_cancellation_requested();
	}

	void cancellation_token::throw_if_cancellation_requested() const
	{
		if (is_cancellation_requested())
		{
			throw operation_cancelled{};
		}
	}

	cancellation_token::cancellation_token(detail::cancellation_state* state) noexcept : m_state(state)
	{
		if (m_state != nullptr)
		{
			m_state->add_token_ref();
		}
	}

}//qor
