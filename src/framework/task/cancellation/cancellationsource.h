// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_TASK_CANCEL_SOURCE
#define QOR_PP_H_FRAMEWORK_TASK_CANCEL_SOURCE

namespace qor
{
	class cancellation_token;

	namespace detail
	{
		class cancellation_state;
	}

	class qor_pp_module_interface(QOR_TASK) cancellation_source
	{
	public:

		/// Construct to a new cancellation source.
		cancellation_source();

		/// Create a new reference to the same underlying cancellation
		/// source as \p other.
		cancellation_source(const cancellation_source& other) noexcept;

		cancellation_source(cancellation_source&& other) noexcept;

		~cancellation_source();

		cancellation_source& operator=(const cancellation_source& other) noexcept;

		cancellation_source& operator=(cancellation_source&& other) noexcept;

		/// Query if this cancellation source can be cancelled.
		///
		/// A cancellation source object will not be cancellable if it has
		/// previously been moved into another cancellation_source instance
		/// or was copied from a cancellation_source that was not cancellable.
		bool can_be_cancelled() const noexcept;

		/// Obtain a cancellation token that can be used to query if
		/// cancellation has been requested on this source.
		///
		/// The cancellation token can be passed into functions that you
		/// may want to later be able to request cancellation.
		cancellation_token token() const noexcept;

		/// Request cancellation of operations that were passed an associated
		/// cancellation token.
		///
		/// Any cancellation callback registered via a cancellation_registration
		/// object will be called inside this function by the first thread to
		/// call this method.
		///
		/// This operation is a no-op if can_be_cancelled() returns false.
		void request_cancellation();

		/// Query if some thread has called 'request_cancellation()' on this
		/// cancellation_source.
		bool is_cancellation_requested() const noexcept;

	private:

		detail::cancellation_state* m_state;

	};

}//qor

#endif//QOR_PP_H_FRAMEWORK_TASK_CANCEL_SOURCE
