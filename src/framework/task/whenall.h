// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_TASK_WHENALL
#define QOR_PP_H_FRAMEWORK_TASK_WHENALL

#include "whenallready.h"
#include "awaitabletraits.h"
#include "isawaitable.h"
#include "fmap.h"

#include "detail/unwrapreference.h"

#include <tuple>
#include <functional>
#include <utility>
#include <vector>
#include <type_traits>
#include <cassert>

namespace qor
{
	// Variadic when_all()

	template< typename... AWAITABLES, std::enable_if_t< std::conjunction_v<is_awaitable<detail::unwrap_reference_t<std::remove_reference_t<AWAITABLES>>>...>, int> = 0>
	[[nodiscard]] auto when_all(AWAITABLES&&... awaitables)
	{
		return fmap([](auto&& taskTuple)
		{
			return std::apply([](auto&&... tasks) {
				return std::make_tuple(static_cast<decltype(tasks)>(tasks).non_void_result()...);
			}, static_cast<decltype(taskTuple)>(taskTuple));
		}, when_all_ready(std::forward<AWAITABLES>(awaitables)...));
	}

	// when_all() with vector of awaitable

	template< typename AWAITABLE, typename RESULT = typename awaitable_of<detail::unwrap_reference_t<AWAITABLE>>::await_result_t, std::enable_if_t<std::is_void_v<RESULT>, int> = 0>
	[[nodiscard]] auto when_all(std::vector<AWAITABLE> awaitables)
	{
		return fmap([](auto&& taskVector) {
			for (auto& task : taskVector)
			{
				task.result();
			}
		}, when_all_ready(std::move(awaitables)));
	}

	template< typename AWAITABLE, typename RESULT = typename awaitable_of<detail::unwrap_reference_t<AWAITABLE>>::await_result_t, std::enable_if_t<!std::is_void_v<RESULT>, int> = 0>
	[[nodiscard]] auto when_all(std::vector<AWAITABLE> awaitables)
	{
		using result_t = std::conditional_t< std::is_lvalue_reference_v<RESULT>, std::reference_wrapper<std::remove_reference_t<RESULT>>, std::remove_reference_t<RESULT>>;

		return fmap([](auto&& taskVector) {
			std::vector<result_t> results;
			results.reserve(taskVector.size());
			for (auto& task : taskVector)
			{
				if constexpr (std::is_rvalue_reference_v<decltype(taskVector)>)
				{
					results.emplace_back(std::move(task).result());
				}
				else
				{
					results.emplace_back(task.result());
				}
			}
			return results;
		}, when_all_ready(std::move(awaitables)));
	}
}

#endif//QOR_PP_H_FRAMEWORK_TASK_WHENALL
