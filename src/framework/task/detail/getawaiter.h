// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_TASK_DETAIL_GETAWAITER
#define QOR_PP_H_FRAMEWORK_TASK_DETAIL_GETAWAITER

#include <coroutine>

#include "isawaiter.h"
#include "src/qor/objectcontext/any.h"

namespace qor{	namespace detail{

    template<typename T>
    auto GetAwaiterImpl(T&& value, int)
        noexcept(noexcept(static_cast<T&&>(value).operator co_await()))
        -> decltype(static_cast<T&&>(value).operator co_await())
    {
        return static_cast<T&&>(value).operator co_await();
    }

    template<typename T>
    auto GetAwaiterImpl(T&& value, long)
        noexcept(noexcept(operator co_await(static_cast<T&&>(value))))
        -> decltype(operator co_await(static_cast<T&&>(value)))
    {
        return operator co_await(static_cast<T&&>(value));
    }

    template<typename T, std::enable_if_t<qor::detail::is_awaiter<T&&>::value, int> = 0>
    T&& GetAwaiterImpl(T&& value, qor::detail::any) noexcept
    {
        return static_cast<T&&>(value);
    }

    template<typename T>
    auto GetAwaiter(T&& value)
        noexcept(noexcept(detail::GetAwaiterImpl(static_cast<T&&>(value), 123)))
        -> decltype(detail::GetAwaiterImpl(static_cast<T&&>(value), 123))
    {
        return detail::GetAwaiterImpl(static_cast<T&&>(value), 123);
    }

}}//qor::detail

#endif//QOR_PP_H_FRAMEWORK_TASK_DETAIL_GETAWAITER
