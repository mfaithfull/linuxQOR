// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_TASK_DETAIL_WHEN_ALL_COUNTER
#define QOR_PP_H_FRAMEWORK_TASK_DETAIL_WHEN_ALL_COUNTER

#include <coroutine>
#include <atomic>
#include <cstdint>

namespace qor{	namespace detail{

	class WhenAllCounter
	{
	public:

		WhenAllCounter(std::size_t count) noexcept : m_count(count + 1) , m_awaitingCoroutine(nullptr) {}

		bool is_ready() const noexcept
		{
			// We consider this complete if we're asking whether it's ready
			// after a coroutine has already been registered.
			return static_cast<bool>(m_awaitingCoroutine);
		}

		bool try_await(std::coroutine_handle<> awaitingCoroutine) noexcept
		{
			m_awaitingCoroutine = awaitingCoroutine;
			return m_count.fetch_sub(1, std::memory_order_acq_rel) > 1;
		}

		void notify_awaitable_completed() noexcept
		{
			if (m_count.fetch_sub(1, std::memory_order_acq_rel) == 1)
			{
				m_awaitingCoroutine.resume();
			}
		}

	protected:

		std::atomic<std::size_t> m_count;
		std::coroutine_handle<> m_awaitingCoroutine;

	};
	
}}//qor::detail

#endif//QOR_PP_H_FRAMEWORK_TASK_DETAIL_WHEN_ALL_COUNTER
