// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_TASK_DETAIL_ISAWAITER
#define QOR_PP_H_FRAMEWORK_TASK_DETAIL_ISAWAITER

#include <type_traits>
#include <coroutine>

namespace qor{ namespace detail {

    template<typename T>
    struct is_coroutine_handle : std::false_type {};

    template<typename PROMISE>
    struct is_coroutine_handle<std::coroutine_handle<PROMISE>> : std::true_type {};

    // NOTE: We're accepting a return value of coroutine_handle<P> here
    // which is an extension supported by Clang which is not yet part of
    // the C++ coroutines TS.
    template<typename T>
    struct is_valid_await_suspend_return_value : std::disjunction<
        std::is_void<T>, std::is_same<T, bool>, is_coroutine_handle<T>>{};

    template<typename T, typename = std::void_t<>>
    struct is_awaiter : std::false_type {};

    // NOTE: We're testing whether await_suspend() will be callable using an
    // arbitrary coroutine_handle here by checking if it supports being passed
    // a coroutine_handle<void>. This may result in a false-result for some
    // types which are only awaitable within a certain context.
    template<typename T>
    struct is_awaiter<T, std::void_t<
        decltype(std::declval<T>().await_ready()),
        decltype(std::declval<T>().await_suspend(std::declval<std::coroutine_handle<>>())),
        decltype(std::declval<T>().await_resume())>> :
        std::conjunction<
            std::is_constructible<bool, decltype(std::declval<T>().await_ready())>,
            detail::is_valid_await_suspend_return_value<
                decltype(std::declval<T>().await_suspend(std::declval<std::coroutine_handle<>>()))>> {};

}}//qor::detail

#endif//QOR_PP_H_FRAMEWORK_TASK_DETAIL_ISAWAITER
