// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_TASK_DETAIL_WHEN_ALL_READY_AWAITABLE
#define QOR_PP_H_FRAMEWORK_TASK_DETAIL_WHEN_ALL_READY_AWAITABLE

#include <coroutine>
#include <tuple>

#include "whenallcounter.h"

namespace qor{	namespace detail{

	template<typename TASK_CONTAINER>
	class WhenAllReadyAwaitable;

	template<>
	class WhenAllReadyAwaitable<std::tuple<>>
	{
	public:

		constexpr WhenAllReadyAwaitable() noexcept {}
		explicit constexpr WhenAllReadyAwaitable(std::tuple<>) noexcept {}

		constexpr bool await_ready() const noexcept { return true; }
		void await_suspend(std::coroutine_handle<>) noexcept {}
		std::tuple<> await_resume() const noexcept { return {}; }

	};

	template<typename... TASKS>
	class WhenAllReadyAwaitable<std::tuple<TASKS...>>
	{
	public:

		explicit WhenAllReadyAwaitable(TASKS&&... tasks)
			noexcept(std::conjunction_v<std::is_nothrow_move_constructible<TASKS>...>)
			: m_counter(sizeof...(TASKS))
			, m_tasks(std::move(tasks)...) {}

		explicit WhenAllReadyAwaitable(std::tuple<TASKS...>&& tasks)
			noexcept(std::is_nothrow_move_constructible_v<std::tuple<TASKS...>>)
			: m_counter(sizeof...(TASKS))
			, m_tasks(std::move(tasks)) {}

		WhenAllReadyAwaitable(WhenAllReadyAwaitable&& other) noexcept
			: m_counter(sizeof...(TASKS))
			, m_tasks(std::move(other.m_tasks)) {}

		auto operator co_await() & noexcept
		{
			struct awaiter
			{
				awaiter(WhenAllReadyAwaitable& awaitable) noexcept
					: m_awaitable(awaitable)
				{}

				bool await_ready() const noexcept
				{
					return m_awaitable.is_ready();
				}

				bool await_suspend(std::coroutine_handle<> awaitingCoroutine) noexcept
				{
					return m_awaitable.try_await(awaitingCoroutine);
				}

				std::tuple<TASKS...>& await_resume() noexcept
				{
					return m_awaitable.m_tasks;
				}

			private:

				WhenAllReadyAwaitable& m_awaitable;

			};

			return awaiter{ *this };
		}

		auto operator co_await() && noexcept
		{
			struct awaiter
			{
				awaiter(WhenAllReadyAwaitable& awaitable) noexcept
					: m_awaitable(awaitable)
				{}

				bool await_ready() const noexcept
				{
					return m_awaitable.is_ready();
				}

				bool await_suspend(std::coroutine_handle<> awaitingCoroutine) noexcept
				{
					return m_awaitable.try_await(awaitingCoroutine);
				}

				std::tuple<TASKS...>&& await_resume() noexcept
				{
					return std::move(m_awaitable.m_tasks);
				}

			private:

				WhenAllReadyAwaitable& m_awaitable;

			};

			return awaiter{ *this };
		}

	private:

		bool is_ready() const noexcept
		{
			return m_counter.is_ready();
		}

		bool try_await(std::coroutine_handle<> awaitingCoroutine) noexcept
		{
			start_tasks(std::make_integer_sequence<std::size_t, sizeof...(TASKS)>{});
			return m_counter.try_await(awaitingCoroutine);
		}

		template<std::size_t... INDICES>
		void start_tasks(std::integer_sequence<std::size_t, INDICES...>) noexcept
		{
			(void)std::initializer_list<int>{
				(std::get<INDICES>(m_tasks).start(m_counter), 0)...
			};
		}

		WhenAllCounter m_counter;
		std::tuple<TASKS...> m_tasks;

	};

	template<typename TASK_CONTAINER>
	class WhenAllReadyAwaitable
	{
	public:

		explicit WhenAllReadyAwaitable(TASK_CONTAINER&& tasks) noexcept
			: m_counter(tasks.size())
			, m_tasks(std::forward<TASK_CONTAINER>(tasks)) {}

		WhenAllReadyAwaitable(WhenAllReadyAwaitable&& other)
			noexcept(std::is_nothrow_move_constructible_v<TASK_CONTAINER>)
			: m_counter(other.m_tasks.size())
			, m_tasks(std::move(other.m_tasks)) {}

		WhenAllReadyAwaitable(const WhenAllReadyAwaitable&) = delete;
		WhenAllReadyAwaitable& operator=(const WhenAllReadyAwaitable&) = delete;

		auto operator co_await() & noexcept
		{
			class awaiter
			{
			public:

				awaiter(WhenAllReadyAwaitable& awaitable) : m_awaitable(awaitable) {}

				bool await_ready() const noexcept
				{
					return m_awaitable.is_ready();
				}

				bool await_suspend(std::coroutine_handle<> awaitingCoroutine) noexcept
				{
					return m_awaitable.try_await(awaitingCoroutine);
				}

				TASK_CONTAINER& await_resume() noexcept
				{
					return m_awaitable.m_tasks;
				}

			private:

				WhenAllReadyAwaitable& m_awaitable;

			};

			return awaiter{ *this };
		}


		auto operator co_await() && noexcept
		{
			class awaiter
			{
			public:

				awaiter(WhenAllReadyAwaitable& awaitable)
					: m_awaitable(awaitable)
				{}

				bool await_ready() const noexcept
				{
					return m_awaitable.is_ready();
				}

				bool await_suspend(std::coroutine_handle<> awaitingCoroutine) noexcept
				{
					return m_awaitable.try_await(awaitingCoroutine);
				}

				TASK_CONTAINER&& await_resume() noexcept
				{
					return std::move(m_awaitable.m_tasks);
				}

			private:

				WhenAllReadyAwaitable& m_awaitable;

			};

			return awaiter{ *this };
		}

	private:

		bool is_ready() const noexcept
		{
			return m_counter.is_ready();
		}

		bool try_await(std::coroutine_handle<> awaitingCoroutine) noexcept
		{
			for (auto&& task : m_tasks)
			{
				task.start(m_counter);
			}

			return m_counter.try_await(awaitingCoroutine);
		}

		WhenAllCounter m_counter;
		TASK_CONTAINER m_tasks;

	};

}}//qor::detail

#endif//QOR_PP_H_FRAMEWORK_TASK_DETAIL_WHEN_ALL_READY_AWAITABLE
