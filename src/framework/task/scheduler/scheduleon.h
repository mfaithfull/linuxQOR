// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_TASK_SCHEDULE_ON
#define QOR_PP_H_FRAMEWORK_TASK_SCHEDULE_ON

#include "src/framework/task/task.h"
#include "src/framework/task/sharedtask.h"
#include "src/framework/task/generator/asyncgenerator.h"
#include "src/framework/task/awaitabletraits.h"

#include "src/framework/task/detail/removervaluereference.h"

namespace qor
{
	template<typename SCHEDULER>
	struct ScheduleOnTransform
	{
		explicit ScheduleOnTransform(SCHEDULER& scheduler) noexcept : scheduler(scheduler) {}

		SCHEDULER& scheduler;
	};

	template<typename SCHEDULER>
	ScheduleOnTransform<SCHEDULER> ScheduleOn(SCHEDULER& scheduler)
	{
		return ScheduleOnTransform<SCHEDULER>{ scheduler };
	}

	template<typename T, typename SCHEDULER>
	decltype(auto) operator|(T&& value, ScheduleOnTransform<SCHEDULER> transform)
	{
		return ScheduleOn(transform.scheduler, std::forward<T>(value));
	}

	template<typename SCHEDULER, typename AWAITABLE>
	auto ScheduleOn(SCHEDULER& scheduler, AWAITABLE awaitable)
		-> task<detail::remove_rvalue_reference_t<typename awaitable_of<AWAITABLE>::await_result_t>>
	{
		co_await scheduler.Schedule();
		co_return co_await std::move(awaitable);
	}

	template<typename T, typename SCHEDULER>
	AsyncGenerator<T> ScheduleOn(SCHEDULER& scheduler, AsyncGenerator<T> source)
	{
		// Transfer exection to the scheduler before the implicit calls to
		// 'co_await begin()' or subsequent calls to `co_await iterator::operator++()`
		// below. This ensures that all calls to the Generator's coroutine_handle<>::resume()
		// are executed on the execution context of the scheduler.
		co_await scheduler.Schedule();

		const auto itEnd = source.end();
		auto it = co_await source.begin();
		while (it != itEnd)
		{
			co_yield *it;

			co_await scheduler.Schedule();

			(void)co_await ++it;
		}
	}
	
}//qor

#endif//QOR_PP_H_FRAMEWORK_TASK_SCHEDULE_ON
