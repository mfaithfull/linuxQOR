// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PIPELINE_BUFFER
#define QOR_PP_H_PIPELINE_BUFFER

#include "src/platform/compiler/compiler.h"

namespace qor{ namespace pipeline{

    //This provides most of the logic for simple buffer management without any anctual allocation
    //Derive a class from it to add actual memory to the buffer in unit sizes.
    //As this is intended for a pipeline it presumes one writer and one reader that follow one
    //another through the buffer.
    //Both Writes and reads are two step, they reserve space, then attempt to read or write it
    //Then acknowledge how much they have read or written.
    //This allows for failure and unreliable device interaction without courrupting the buffer
    class qor_pp_module_interface(QOR_PIPELINE) Buffer
    {
    public:

        Buffer(size_t unitSize = 1, size_t itemCount = 0);
        Buffer(const Buffer& src);
        virtual ~Buffer();
        Buffer& operator = (const Buffer& src);

        virtual size_t WriteCapacity() const;
        virtual size_t ReadCapacity() const;
        virtual byte* WriteRequest(size_t& itemCount) = 0;
        virtual byte* ReadRequest(size_t& itemCount) = 0;
        virtual void SetCapacity(size_t itemCount);
        size_t Capacity() const;
        size_t ReadAcknowledge(size_t& itemCount);
        size_t ReadReject(size_t& itemCount);
        size_t WriteAcknowledge(size_t& itemCount);
        size_t GetUnitSize() const;

    protected:

        void SetUnitSize(size_t unitSize);

        size_t m_allocationCount;   //Tracks number of items of m_unitSize we have space for
        size_t m_unitSize;
        size_t m_readBegin;
        size_t m_readEnd;
        size_t m_writeBegin;
        size_t m_writeEnd;

    };

}}//qor::pipeline

#endif//QOR_PP_H_PIPELINE_BUFFER
