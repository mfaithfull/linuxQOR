// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PIPELINE_PLUG
#define QOR_PP_H_PIPELINE_PLUG

#include "src/framework/signals/signal.h"
#include "src/qor/sync/syncobject.h"

namespace qor{ namespace pipeline{

    class qor_pp_module_interface(QOR_PIPELINE) ConnectionPool;

    class qor_pp_module_interface(QOR_PIPELINE) Plug : public SignalBase
    {
        friend class qor_pp_module_interface(QOR_PIPELINE) ConnectionPool;

    public:

        qor_pp_signal_func ConnectedSignal();
        qor_pp_signal_func ConnectionErrorSignal();
        qor_pp_signal_func DisconnectedSignal();
        qor_pp_signal_func DisconnectionErrorSignal();

        Plug(ConnectionPool* pool = nullptr);
        virtual ~Plug();
        virtual bool Connect();
        virtual void Disconnect();
        virtual bool HandlePendingConnectionResult(bool connected);
        virtual void OnConnected();
        virtual void OnConnectionError();
        virtual void OnDisconnected();
        virtual void OnDisconnectionError();
        bool IsConnected() const;
        virtual const bool AsyncConnection() const;
        virtual SyncObject* GetSyncObject();
        virtual void SetSyncObject(SyncObject* syncobject);

    protected:

        bool m_connected;

    private:

        SyncObject* m_syncobject;
        ConnectionPool* m_pool;
    };

}}//qor::pipeline

#endif//QOR_PP_H_PIPELINE_PLUG
