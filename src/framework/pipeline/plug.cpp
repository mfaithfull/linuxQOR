// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "plug.h"

namespace qor{ namespace pipeline{

    qor_pp_signal_func Plug::ConnectedSignal()
    {
        qor_pp_signal(ConnectedSignal);
    }

    qor_pp_signal_func Plug::ConnectionErrorSignal()
    {
        qor_pp_signal(ConnectionErrorSignal);
    }

    qor_pp_signal_func Plug::DisconnectedSignal()
    {
        qor_pp_signal(DisconnectedSignal);
    }

    qor_pp_signal_func Plug::DisconnectionErrorSignal()
    {
        qor_pp_signal(DisconnectionErrorSignal);
    }

    Plug::Plug(ConnectionPool* pool) : m_syncobject(0), m_pool(pool)
    {
        m_connected = false;
    }

    Plug::~Plug()
    {
        if (m_connected)
        {
            Disconnect();
        }
        m_connected = false;
    }

    bool Plug::Connect()
    {
        return false;
    }

    void Plug::Disconnect()
    {
    }

    //Override for Asynchronous connections with custom pending connection states
    bool Plug::HandlePendingConnectionResult(bool connected)
    {
        return connected;
    }

    void Plug::OnConnected()
    {
        m_connected = true;
        ConnectedSignal();
    }
    
    void Plug::OnConnectionError()
    {
        m_connected = false;
        ConnectionErrorSignal();
    }

    void Plug::OnDisconnected()
    {
        m_connected = false;
        DisconnectedSignal();
    }

    void Plug::OnDisconnectionError()
    {
        m_connected = false;
        DisconnectionErrorSignal();
    }

    bool Plug::IsConnected() const
    {
        return m_connected;
    }

    const bool Plug::AsyncConnection() const
    {
        return false;
    }

    SyncObject* Plug::GetSyncObject()
    {
        return m_syncobject;
    }

    void Plug::SetSyncObject(SyncObject* syncobject)
    {
        m_syncobject = syncobject;
    }

}}//qor::pipeline