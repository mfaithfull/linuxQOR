// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "sink.h"
#include "source.h"

namespace qor{ namespace pipeline{

    qor_pp_signal_func Sink::WriteSuccessSignal(size_t unitsWritten)
    {
        qor_pp_signal(WriteSuccessSignal, unitsWritten);
    }

    qor_pp_signal_func Sink::WriteErrorSignal(size_t unitsWritten, size_t error)
    {
        qor_pp_signal(WriteErrorSignal, unitsWritten, error);            
    }

    Sink::Sink() : m_source(nullptr) {}

    Sink::Sink( const Sink& src)
    {
        *this = src;        
    }

    Sink& Sink::operator = (const Sink& src)
    {
        if(&src != this)
        {
            Element::operator=(src);
            m_source = src.m_source;
        }
        return *this;
    }

    void Sink::SetSource(Element* source)
    {
        if( source->IsSource() )
        {
            m_source = source;
        }
    }

    Element* Sink::GetSource()
    {
        return m_source;
    }

    bool Sink::HasSource()
    {
        return m_source != nullptr;
    }

    void Sink::OnWriteSuccess(size_t unitsWritten)
    {
        WriteSuccessSignal(unitsWritten);
    }

    void Sink::OnWriteError(size_t error, size_t unitsWritten)
    {
        WriteErrorSignal(unitsWritten, error);
    }

    bool Sink::IsSink()
    {
        return true;
    }

    Source* Sink::ActualSource()
    {
        return dynamic_cast<Source*>(m_source);
    }

}}//qor::pipeline
