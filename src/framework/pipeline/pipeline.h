// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_PIPELINE
#define QOR_PP_H_FRAMEWORK_PIPELINE

#include "element.h"
#include "filter.h"
#include "connection.h"

namespace qor{ namespace pipeline{

    class qor_pp_module_interface(QOR_PIPELINE) Pipeline : public Filter
    {
    public:

        enum FilterPos
        {
            BeforeSink,
            AfterSource,
        };

        Pipeline();
        virtual ~Pipeline() = default;
        Pipeline( const Pipeline& src );
        Pipeline& operator = (const Pipeline& src);

        Pipeline(Connection* SourceConnection, Connection* SinkConnection, Element::FlowMode flowmode = Element::FlowMode::Pull) : m_flowmode(flowmode)
        {
            SetSink(SinkConnection->GetSink());
            SetSource(SourceConnection->GetSource());
        }

        void SetSource(Element* source)
        {
            if(source && source->IsSource())
            {
                m_source = source;
                m_source->SetParent(this);
            }
        }

        void SetSink(Element* sink)
        {
            if(sink && sink->IsSink())
            {
                m_sink = sink;
                m_sink->SetParent(this);
            }
        }

        virtual Element::FlowMode GetFlowMode()
        {
            auto pipelineparent = dynamic_cast<Pipeline*>(GetParent());
            return (pipelineparent != nullptr) ? pipelineparent->GetFlowMode() : m_flowmode;
        }

        void SetFlowMode(Element::FlowMode flowmode)
        {
            auto pipelineparent = dynamic_cast<Pipeline*>(GetParent());
            if(pipelineparent != nullptr)
            {
                pipelineparent->SetFlowMode(flowmode);
            }
            else
            {
                m_flowmode = flowmode;
            }
        }

        virtual void Run(void);
        bool Pump(void);

        virtual bool Pump(size_t& unitsPumped, size_t unitsToPump)
        {
            return Filter::Pump(unitsPumped, unitsToPump);
        }

        virtual void InsertFilter(Filter* pFilter, FilterPos Pos = BeforeSink);

    protected:

        FlowMode m_flowmode;

    };

}}//qor::pipeline

#endif//QOR_PP_H_FRAMEWORK_PIPELINE
