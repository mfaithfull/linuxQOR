// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PIPELINE_SOURCE
#define QOR_PP_H_PIPELINE_SOURCE

#include "element.h"
#include "src/framework/signals/signal.h"

namespace qor{ namespace pipeline{

#ifndef QOR_PP_H_PIPELINE_SINK
    class qor_pp_module_interface(QOR_PIPELINE) Sink;
#endif

    class qor_pp_module_interface(QOR_PIPELINE) Source : public virtual Element, public virtual SignalBase
    {
    public:

        SIGNAL_1(void qor_pp_noinline ReadSuccessSignal(size_t unitsRead))
        SIGNAL_2(ReadSuccessSignal, unitsRead)
      
        SIGNAL_1(void qor_pp_noinline EndOfDataSignal(void))
        SIGNAL_2(EndOfDataSignal)

        SIGNAL_1(void qor_pp_noinline ReadErrorSignal(size_t unitsRead, size_t error))
        SIGNAL_2(ReadErrorSignal, unitsRead, error)

        Source();
        virtual ~Source() = default;
        Source(const Source& src);
        Source& operator = (const Source& src);

        virtual void SetSink(Element* pSink);
        virtual void SetSource(Element* source);
        virtual Element* GetSink(void);
        virtual bool HasSink(void);
        virtual bool Read(size_t& numberOfUnitsRead, size_t numberOfUnitsToRead = 1) = 0;
        virtual void OnReadSuccess(size_t unitsRead);
        virtual void OnReadError(size_t error, size_t unitsRead);
        virtual void OnEndOfData();
        virtual bool IsSource();

    protected:

        Element* m_sink;
        Sink* ActualSink();
    };

}}//qor::pipeline

#endif//QOR_PP_H_PIPELINE_SOURCE
