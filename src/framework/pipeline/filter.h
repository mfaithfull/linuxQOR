// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PIPELINE_FILTER
#define QOR_PP_H_PIPELINE_FILTER

#include <functional>
#include "source.h"
#include "sink.h"

namespace qor{ namespace pipeline{

    class qor_pp_module_interface(QOR_PIPELINE) Filter : public Sink, public Source
    {
    public:

        Filter();
        virtual ~Filter() = default;
        Filter(const Filter& src);
        Filter& operator = (const Filter& src);
        virtual void SetSink(Element* sink);
        virtual Element* GetSink();
        virtual bool HasSink();
        virtual void SetSource(Element* source);
        virtual Element* GetSource();
        virtual bool HasSource();        
        virtual bool IsSource();
        virtual bool IsSink();
        virtual bool Pump(size_t& unitsPumped, size_t unitsToPump);
        virtual bool Pump(size_t& unitsPumped, size_t unitsToPump, std::function<bool(size_t&, size_t)> filterFn);
        virtual bool ReadFilter(size_t& unitsProcessed, size_t unitsToProcess);
        virtual bool WriteFilter(size_t& unitsProcessed, size_t unitsToProcess);

    protected:
        virtual bool Read(size_t& numberOfUnitsRead, size_t numberOfUnitsToRead = 1);
        virtual bool Write(size_t& unitsWritten, size_t unitstoWrite = 1 );

    private:

        bool Pull(size_t& unitsRead, size_t unitsToRead);
        bool Push(size_t& unitsWritten, size_t unitsToWrite);

    };

}}//qor::pipeline

#endif//QOR_PP_H_PIPELINE_FILTER
