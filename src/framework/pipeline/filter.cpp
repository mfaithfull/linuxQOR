// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "filter.h"

namespace qor{ namespace pipeline{

    Filter::Filter() : Sink(), Source() {}

    Filter::Filter(const Filter& src)
    {
        *this = src;
    }

    Filter& Filter::operator = (const Filter& src)
    {
        if(&src != this)
        {
            Source::operator = (src);
            Sink::operator = (src);
        }
        return *this;
    }

    void Filter::SetSource(Element* source)
    {
        if(source->IsSource())
        {
            m_source = source;
            if(!m_source->HasSink())
            {
                m_source->SetSink(this);
            }
        }
    }

    Element* Filter::GetSource()
    {
        return m_source;
    }

    bool Filter::HasSource()
    {
        return m_source != nullptr;
    }

    void Filter::SetSink(Element* sink)
    {
        if(sink->IsSink())
        {
            m_sink = sink;
            if(!m_sink->HasSource())
            {
                m_sink->SetSource(this);
            }
        }
    }

    Element* Filter::GetSink()
    {
        return m_sink;
    }

    bool Filter::HasSink()
    {
        return m_sink != nullptr;
    }

    bool Filter::IsSource()
    {
        return true;
    }

    bool Filter::IsSink()
    {
        return true;
    }

    bool Filter::Pump(size_t& unitsPumped, size_t unitsToPump)
    {    
        bool working = true;    
        while(working && unitsToPump > 0)
        {
            size_t unitsPumpedAtOnce = 0;
            if(GetFlowMode() == FlowMode::Pull)
            {
                working = ActualSink()->Write(unitsPumpedAtOnce, unitsToPump);
            }
            else
            {
                working = ActualSource()->Read(unitsPumpedAtOnce, unitsToPump);
            }
            unitsToPump -= unitsPumpedAtOnce;
            unitsPumped += unitsPumpedAtOnce;
        };
        return working;
    }

    bool Filter::Read(size_t& unitsRead, size_t unitsToRead)
    {
        return ActualSource()->Read(unitsRead, unitsToRead) ? 
        (
            (GetFlowMode() == FlowMode::Pull) ? 
                (ReadFilter(unitsRead, unitsRead)): true
        ) : false;

        //return Pump(unitsRead,unitsToRead, std::bind(&Filter::ReadFilter, this, unitsRead, unitsToRead));
    }

    bool Filter::Write(size_t& unitsWritten, size_t unitsToWrite)
    {
        return Pull(unitsWritten, unitsToWrite) ? 
        (
            WriteFilter(unitsWritten, unitsWritten) ? 
                ActualSink()->Write(unitsWritten, unitsToWrite) : false
        ) : false;

        //return Pump(unitsWritten,unitsToWrite, std::bind(&Filter::WriteFilter, this, unitsWritten, unitsToWrite));
    }

    bool Filter::Pull(size_t& unitsRead, size_t unitsToRead)
    {
        return (GetFlowMode() == FlowMode::Pull) ? ActualSource()->Read(unitsRead, unitsToRead) : true;
    }

    bool Filter::Push(size_t& unitsWritten, size_t unitsToWrite)
    {
        return (GetFlowMode() == FlowMode::Push) ? ActualSink()->Write(unitsWritten, unitsToWrite) : true;
    }

    bool Filter::Pump(size_t& unitsPumped, size_t unitsToPump, std::function<bool(size_t&, size_t)> filterFn)
    {
        if(GetFlowMode() == FlowMode::Pull)
        {
            return Pull(unitsPumped, unitsToPump) ? 
            (
                filterFn(unitsPumped, unitsPumped) ? 
                    Push(unitsPumped,unitsPumped) : false
            ) : false;
        }
        else
        {
            return filterFn(unitsPumped, unitsPumped) ? 
            (
                Push(unitsPumped, unitsToPump) ? 
                    Pull(unitsPumped, unitsToPump) : false
            ) : false;
        }
    }

    bool Filter::ReadFilter(size_t& unitsProcessed, size_t unitsToProcess)
    {
        unitsProcessed = unitsToProcess;
        return true;
    }

    bool Filter::WriteFilter(size_t& unitsProcessed, size_t unitsToProcess)
    {
        unitsProcessed = unitsToProcess;
        return true;
    }


}}//qor::pipeline
