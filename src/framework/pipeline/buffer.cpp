// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "buffer.h"

namespace qor{ namespace pipeline{

    Buffer::Buffer(size_t unitSize, size_t itemCount) : m_unitSize(unitSize)
    {
        SetCapacity(itemCount);
    }

    void Buffer::SetUnitSize(size_t unitSize)
    {
        if(m_allocationCount > 0 )
        {
            SetCapacity((size_t)0);
        }
        m_unitSize = unitSize;
    }

    Buffer::Buffer(const Buffer& src)
    {
        *this = src;
    }

    Buffer::~Buffer()
    {
        SetCapacity((size_t)0);
    }

    Buffer& Buffer::operator = (const Buffer& src)
    {
        if(&src != this)
        {
            SetUnitSize(src.GetUnitSize());
            SetCapacity(src.Capacity());
            m_readBegin = src.m_readBegin;
            m_readEnd = src.m_readEnd;
            m_writeBegin = src.m_writeBegin;
            m_writeEnd = src.m_writeEnd;    
        }
        return *this;
    }

    void Buffer::SetCapacity(size_t itemCount)
    {
        m_allocationCount = itemCount;
        m_readBegin = 0;
        m_readEnd = 0;
        m_writeBegin = 0;
        m_writeEnd = 0;
    }

    size_t Buffer::Capacity(void) const
    {
        return m_allocationCount;
    }

    size_t Buffer::ReadAcknowledge(size_t& itemCount)
    {
        if(itemCount > (m_readEnd - m_readBegin))
        {
            itemCount = static_cast<size_t>(m_readEnd - m_readBegin);
        }

        m_readBegin += itemCount;
        m_readEnd = m_readBegin;
        return ReadCapacity();
    }

    size_t Buffer::ReadReject(size_t& itemCount)
    {
        if(itemCount > (m_readEnd - m_readBegin))
        {
            itemCount = static_cast<size_t>(m_readEnd - m_readBegin);
        }

        m_readEnd -= itemCount;
        return ReadCapacity();
    }

    size_t Buffer::WriteAcknowledge(size_t& itemCount)
    {
        if(itemCount > (m_writeEnd - m_writeBegin))
        {
            itemCount = static_cast<size_t>(m_writeEnd - m_writeBegin);
        }

        m_writeBegin += itemCount;
        m_writeEnd = m_writeBegin;
        return WriteCapacity();
    }

    size_t Buffer::GetUnitSize() const
    {
        return m_unitSize;
    }

    size_t Buffer::WriteCapacity() const
    {
        size_t result = m_allocationCount - static_cast<size_t>(m_writeEnd - m_readBegin);
        return result;
    }

    size_t Buffer::ReadCapacity() const
    {
        size_t result = static_cast<size_t>(m_writeBegin - m_readEnd);
        return result;
    }

}}//qor::pipeline