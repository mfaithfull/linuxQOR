// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "src/framework/pipeline/source.h"
#include "iosink.h"

namespace qor{ namespace pipeline{ 

    iosink_base::iosink_base() : pipeline::Sink(), m_plug(nullptr)
    {
    }

    void iosink_base::SetPlug(Element* source)
    {
        m_plug = source;
    }

    pipeline::Element* iosink_base::GetPlug()
    {
        return m_plug;
    }

    bool iosink_base::HasPlug()
    {
        return m_plug != nullptr;
    }

    pipeline::Plug* iosink_base::ActualPlug()
    {
        return dynamic_cast<pipeline::Plug*>(m_plug);
    }

    bool iosink_base::Write(size_t& unitsWritten, size_t unitsToWrite)
    {        
        switch( GetFlowMode() )
        {
            case FlowMode::Pull:
                return Pull(unitsWritten, unitsToWrite);
            case FlowMode::Push:
                return Push(unitsWritten, unitsToWrite);
        }
        return false;
    }

    //pull the requested amount of data from the stream
    bool iosink_base::Pull(size_t& unitsWritten, size_t unitsToWrite)
    {
        pipeline::Buffer* buffer = GetBuffer();
        if(buffer)
        {
            size_t availableBytes = buffer->ReadCapacity();
            if(availableBytes < buffer->GetUnitSize() * unitsToWrite )
            {
                size_t extraUnitsToRead = unitsToWrite - (availableBytes / buffer->GetUnitSize());
                size_t extraUnitsRead = 0;
                do
                {
                    if(ActualSource()->Read(extraUnitsRead, extraUnitsToRead))
                    {
                        extraUnitsToRead -= extraUnitsRead;
                    }
                    else
                    {
                        break;
                    }
                }while(extraUnitsToRead > 0);
            }

            byte* data = buffer->ReadRequest(unitsToWrite);
            size_t bytesWritten = WriteBytes(data, buffer->GetUnitSize() * unitsToWrite);
            if(bytesWritten > 0)
            {
                unitsWritten = bytesWritten / buffer->GetUnitSize();
                buffer->ReadAcknowledge(unitsWritten);
                OnWriteSuccess(unitsWritten);
            }
            else //EOF
            {
                //OnEndOfData();
            }
            return true;
        }
        return false;
    }

    //push the requested amount of data up the pipeline
    bool iosink_base::Push(size_t& unitsWritten, size_t unitsToWrite)
    {
        pipeline::Buffer* buffer = GetBuffer();
        if(buffer)
        {
            byte* data = buffer->ReadRequest(unitsToWrite);
            size_t bytesWritten = WriteBytes(data, buffer->GetUnitSize() * unitsToWrite);
            if(bytesWritten > 0)
            {
                unitsWritten = bytesWritten / buffer->GetUnitSize();
                buffer->ReadAcknowledge(unitsWritten);
                OnWriteSuccess(unitsWritten);
            }
            else //EOF
            {
                //OnEndOfData();
            }
            return true;
        }
        return false;
    }

}}//qor::components
