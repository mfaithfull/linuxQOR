// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PIPELINE_ELEMENT
#define QOR_PP_H_PIPELINE_ELEMENT

#include "buffer.h"

namespace qor{ namespace pipeline{

    class qor_pp_module_interface(QOR_PIPELINE) Source;
    class qor_pp_module_interface(QOR_PIPELINE) Sink;

    //a base class for pipeline elements of various kinds
    class qor_pp_module_interface(QOR_PIPELINE) Element
    {
    public:

        enum FlowMode
        {
            Pull,
            Push
        };

        Element();
        virtual ~Element() noexcept (false) = default;
        Element( const Element& src );
        Element& operator = (const Element& src);
        Element* GetParent(void);
        void SetParent(Element* parent);

        virtual bool IsBuffered();
        virtual bool IsSource();
        virtual bool IsSink();
        virtual void SetBuffer(Buffer* buffer);
        Buffer* GetBuffer();
        virtual bool HasBuffer();
        virtual void SetSource(Element* source) = 0;
        virtual Element* GetSource();
        virtual bool HasSource();
        virtual void SetSink(Element* sink) = 0;
        virtual Element* GetSink();
        virtual bool HasSink();
        virtual FlowMode GetFlowMode();
        virtual void SetFlowMode(FlowMode flowmode);

    protected:

        Element* m_parent;// The owning element or pipeline
        Buffer* m_buffer;
    };

}}//qor::pipeline

#endif//QOR_PP_H_PIPELINE_ELEMENT
