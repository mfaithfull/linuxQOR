// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "source.h"
#include "sink.h"

namespace qor{ namespace pipeline{

    Source::Source() : m_sink(nullptr) {}
    
    Source::Source(const Source& src)
    {
        *this = src;
    }

    Source& Source::operator = (const Source& src)
    {
        if(&src != this)
        {
            Element::operator = (src);
            m_sink = src.m_sink;
        }
        return *this;
    }

    void Source::SetSink(Element* sink)
    {
        m_sink = sink;
    }

    void Source::SetSource(Element* source)
    {
        //a Source can't have a source. Do nothing
    }

    Element* Source::GetSink()
    {
        return m_sink;
    }

    bool Source::HasSink()
    {
        return m_sink != nullptr;
    }

    void Source::OnReadSuccess(size_t unitsRead)
    {
        ReadSuccessSignal(unitsRead);
    }
    
    void Source::OnReadError(size_t error, size_t unitsRead)
    {
        ReadErrorSignal(unitsRead, error);
    }

    void Source::OnEndOfData()
    {
        EndOfDataSignal();
    }
    
    bool Source::IsSource()
    {
        return true;
    }

    Sink* Source::ActualSink()
    {
        return dynamic_cast<Sink*>(m_sink);
    }

}}//qor::pipeline
