// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "element.h"

namespace qor{ namespace pipeline{

    Element::Element() : m_parent(nullptr), m_buffer(nullptr) {}

    Element::Element( const Element& src )
    {
        *this = src;
    }

    Element& Element::operator = (const Element& src)
    {
        if(&src != this)
        {
            //NOTE: It's far from obvious that this behaviour will be correct in all cases
            m_parent = src.m_parent;
            if(m_buffer)
            {
                *m_buffer = *src.m_buffer;
            }            
        }
        return *this;
    }

    Element* Element::GetParent(void)
    {
        return m_parent;
    }

    void Element::SetParent(Element* parent)
    {
        m_parent = parent;
    }

    bool Element::IsBuffered()
    {
        return m_buffer != nullptr;
    }

    bool Element::IsSource()
    {
        return false;
    }

    bool Element::IsSink()
    {
        return false;
    }

    void Element::SetBuffer(Buffer* buffer)
    {
        m_buffer = buffer;
    }

    Buffer* Element::GetBuffer()
    {
        return m_buffer;
    }

    Element* Element::GetSource()
    {
        return nullptr;
    }

    bool Element::HasSource()
    {
        return false;
    }

    Element* Element::GetSink()
    {
        return nullptr;
    }

    bool Element::HasSink()
    {
        return false;
    }

    Element::FlowMode Element::GetFlowMode()
    {
        if(m_parent)
        {
            return m_parent->GetFlowMode();
        }
        else
        {
            return Pull;
        }
    }

    void Element::SetFlowMode(Element::FlowMode flowmode)
    {
        if(m_parent)
        {
            m_parent->SetFlowMode(flowmode);
        }
    }

}}//qor::pipeline