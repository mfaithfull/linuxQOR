// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_PIPELINE_IPO
#define QOR_PP_H_FRAMEWORK_PIPELINE_IPO

#include "pipeline.h"
#include "buffer.h"

namespace qor{ namespace pipeline{

    class qor_pp_module_interface(QOR_PIPELINE) IPO : public Pipeline
    {
    public:

        IPO() = default;
        virtual ~IPO() = default;

        virtual bool Process(size_t& unitsProcessed, size_t unitstoProcess = 1) = 0;

        virtual bool Pump(size_t& unitsPumped, size_t unitsToPump = 1)
        {
            if(!Read(unitsPumped, unitsToPump))
            {
                return false;
            }
            else
            {
                size_t unitsToProcess = unitsPumped;
                size_t unitsProcessed = 0;
                if(!Process(unitsProcessed, unitsToProcess))
                { 
                    return false;
                }
                else
                {
                    size_t unitsToWrite = unitsProcessed;
                    size_t unitsWritten = 0;
                    return Write(unitsWritten, unitsToWrite);
                }
            }
        }

        virtual bool Read(size_t& unitsRead, size_t unitsToRead = 1)
        {
            return ActualSource()->Read(unitsRead, unitsToRead);
        }

        virtual bool Write(size_t& unitsWritten, size_t unitsToWrite = 1 )
        {
            return ActualSink()->Write(unitsWritten, unitsToWrite);
        }

    };

    class qor_pp_module_interface(QOR_PIPELINE) OIP : public IPO
    {
    public:

        OIP() = default;
        virtual ~OIP() = default;

        virtual bool Process(size_t& unitsProcessed, size_t unitstoProcess = 1) = 0;

        virtual bool Pump(size_t& unitsPumped, size_t unitsToPump = 1)
        {
            if(!Write(unitsPumped, unitsToPump))
            {
                return false;
            }
            else
            {
                size_t unitsToRead = unitsPumped;
                size_t unitsRead = 0;
                if(!Read(unitsRead, unitsToRead))
                {
                    return false;
                }
                else
                {
                    size_t unitsToProcess = unitsRead;
                    size_t unitsProcessed = 0;
                    return Process(unitsProcessed, unitsToProcess);
                }
            }
        }
    };
}}//qor::pipeline

#endif//QOR_PP_H_FRAMEWORK_PIPELINE
