// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PIPELINE_CONNECTION
#define QOR_PP_H_PIPELINE_CONNECTION

#include "source.h"
#include "sink.h"
#include "plug.h"

namespace qor{ namespace pipeline{

    class qor_pp_module_interface(QOR_PIPELINE) Connection : public Plug
    {
    public:

        Connection() : Plug(), m_async(false), m_writable(true), m_readable(true)
        {
        }

        virtual ~Connection() = default;

        virtual Element* GetSource()
        {
            return m_source;
        }

        virtual Element* GetSink()
        {
            return m_sink;
        }

        virtual bool CanRead() const
        {
            return m_readable;
        }

        virtual bool CanWrite() const
        {
            return m_writable;
        }

        virtual const bool AsyncConnection() const
        {
            return m_async;
        }

        virtual void SetAsync(bool async)
        {
            m_async = async;
        }

        virtual void OnConnected(void)
        {
            SetSyncObject(m_sync);	//Once connected always use the internal SyncObject for IO        
        }

        virtual void SetReadOnly()
        {
            m_writable = false;
            m_readable = true;
        }

        virtual void SetWriteOnly()
        {
            m_writable = true;
            m_readable = false;
        }

        virtual void SetReadWrite()
        {
            m_readable = true;
            m_writable = true;
        }

    protected:

        Source* ActualSource()
        {
            return dynamic_cast<Source*>(m_source);
        }

        Sink* ActualSink()
        {
            return dynamic_cast<Sink*>(m_sink);
        }

        virtual void OnWriteCompleted(size_t error, size_t unitsWritten)
        {
            auto sink = ActualSink();
            if (sink)
            {
                if (error == 0)
                {
                    sink->OnWriteSuccess(unitsWritten);
                }
                else
                {
                    sink->OnWriteError(unitsWritten, error);
                }
            }
        }

        virtual void OnReadCompleted(size_t error, size_t countUnitsRead)
        {
            auto source = ActualSource();

            if (source)
            {
                if (error == 0)
                {
                    source->OnReadSuccess(countUnitsRead);
                }
                else
                {
                    source->OnReadError(error, countUnitsRead);
                }
            }
        }

        bool m_writable;
        bool m_readable;
        bool m_async;
        Element* m_source;
        Element* m_sink;
        SyncObject* m_sync;
    };

}}//qor::pipeline

#endif//QOR_PP_H_PIPELINE_CONNECTION
