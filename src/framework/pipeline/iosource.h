// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_PIPELINE_IOSOURCE
#define QOR_PP_H_FRAMEWORK_PIPELINE_IOSOURCE

#include "src/framework/pipeline/source.h"
#include "src/framework/pipeline/plug.h"

namespace qor{ namespace pipeline{ 

    class qor_pp_module_interface(QOR_PIPELINE) iosource_base : public Source
    {
    public:

        iosource_base();
        virtual ~iosource_base() = default;

        virtual bool Read(size_t& numberOfUnitsRead, size_t numberOfUnitsToRead = 1);
        
        virtual void SetPlug(Element* pPlug);
        virtual Element* GetPlug();
        virtual bool HasPlug();

        virtual size_t ReadBytes(byte* space, size_t bytesToRead) = 0;

    protected:
        
        bool Pull(size_t& unitsRead, size_t unitsToRead);
        bool Push(size_t& unitsRead, size_t unitsToRead);
        Plug* ActualPlug();

        Element* m_plug;

    };

    template<class PlugType >
    class iosource : public iosource_base
    {
    public:

        iosource() : iosource_base(), m_Connector(nullptr)
        {            
        }

        virtual ~iosource() = default;

        virtual void SetPlug(Element* pPlug)
        {
            iosource_base::SetPlug(pPlug);
            m_Connector = dynamic_cast<PlugType*>(m_plug);
            if(m_plug == nullptr)
            {
                //TODO: Wrong type of plug
            }
        }

        virtual size_t ReadBytes(byte* space, size_t bytesToRead) = 0;

    protected:
        
        PlugType* m_Connector;
    };

}}//qor::pipeline

#endif//QOR_PP_H_FRAMEWORK_PIPELINE_IOSOURCE
