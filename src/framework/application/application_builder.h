// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_APPLICATION_BUILDER
#define QOR_PP_H_APPLICATION_BUILDER

#include "application.h"

namespace qor{ namespace framework{

    class qor_pp_module_interface(QOR_APPLICATION) AppBuilder
    {
    public:

        AppBuilder();
        virtual ~AppBuilder() = default;

        ref_of<Application>::type Build(const std::string appName, const int argc = 0, const char** argv = nullptr, const char** env = nullptr);

        template< class AppClass >
        ref_of<Application>::type Build(const std::string appName, const int argc = 0, const char** argv = nullptr, const char** env = nullptr)
        {
            auto application = new_ref<AppClass>().template AsRef<Application>();
            application->Name() = appName;
            return application;
        }

        template<class AppClass, typename TConfigureApp>
        ref_of<Application>::type Build(const std::string appName, TConfigureApp&& config_function, const int argc = 0, const char** argv = nullptr, const char** env = nullptr)
        {
            auto app = new_ref<AppClass>();
            app->Name() = appName;
            config_function(app, argc, argv,env);            
            return app.template AsRef<Application>();
        }

    };
}}//qor::framework

#endif//QOR_PP_H_APPLICATION_BUILDER
