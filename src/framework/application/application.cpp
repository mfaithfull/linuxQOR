// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "application.h"

namespace qor{ namespace framework{

    Application& Application::SetRole(ref_of<IRole>::type role)
    {
        m_Role = role;
        return *this;
    }

    ref_of<IRole>::type Application::GetRole()
    {
        return m_Role;
    }

    Application& Application::SetWorkflow( ref_of<workflow::IWorkflow>::type workflow)
    {
        m_Workflow = workflow;
        return *this;
    }

    ref_of<workflow::IWorkflow>::type Application::GetWorkflow()
    {
        return m_Workflow;        
    }
    
    std::string& Application::Name()
    {
        return m_Name;
    }

    int Application::RunWorkflow( ref_of<workflow::IWorkflow>::type workflow )
    {
        SetWorkflow(workflow);
        return RunWorkflowInternal();
    }

    int Application::RunWorkflowInternal()
    {
        if(m_Role.IsNotNull())
        {
            m_Role->Setup();
        }
        if(m_Workflow.IsNotNull())
        {
            m_Workflow->Start();
        }

        if(m_Role.IsNotNull())
        {
            m_Role->Shutdown();
        }
        return 0;
    }

}}//qor::framework
