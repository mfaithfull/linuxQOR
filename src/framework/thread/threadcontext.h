// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_THREADCONTEXT
#define QOR_PP_H_FRAMEWORK_THREADCONTEXT

#include <thread>
#include <vector>

#include "src/platform/compiler/compiler.h"
#include "src/qor/interception/ifunctioncontext.h"
#include "src/framework/thread/flyermap.h"

namespace qor{ namespace framework{

    class qor_pp_module_interface(QOR_THREAD) ThreadContext
    {

    public:

        ThreadContext();
		ThreadContext(const ThreadContext & src) = delete;
		ThreadContext& operator=(ThreadContext const& src) = delete;
		~ThreadContext();

		virtual IFunctionContext* RegisterFunctionContext(IFunctionContext * pFContext);
		virtual void UnregisterFunctionContext(IFunctionContext * pFContext, IFunctionContext * pParent);

		inline FlyerMap& GetFlyerMap(void)    //Flyer type-instance map
		{
			return m_FlyerMap;
		}

		inline IFunctionContext* FunctionContext()
		{
			return m_pCurrentContext;
		}

    private:

        IFunctionContext* m_pRootContext;
        IFunctionContext* m_pCurrentContext;
        std::vector< void* > m_aThreadLocalStorage;
        FlyerMap m_FlyerMap;

    };

}}//qor::framework

#endif//QOR_PP_H_FRAMEWORK_THREADCONTEXT
