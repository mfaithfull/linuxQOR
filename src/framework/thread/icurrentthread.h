// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_THREAD_CURRENT_INTERFACE
#define QOR_PP_H_FRAMEWORK_THREAD_CURRENT_INTERFACE

#include <optional>
#include <vector>

#include "src/qor/instance/singleton.h"
#include "src/qor/factory/factory.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/factory/externalfactory.h"
#include "src/qor/instance/threadsingleton.h"

namespace qor{ namespace framework{

    class ICurrentThread
    {
    public:

        enum class Priority
        {
            idle = 0,
            lowest,
            below_normal,
            normal,
            above_normal,
            highest,
            realtime
        };    

        ICurrentThread() = default;
        virtual ~ICurrentThread() noexcept = default;

        virtual bool SetPriority(ICurrentThread::Priority priority)
        {
            return false;
        }

        virtual std::optional<ICurrentThread::Priority> GetPriority() const
        {
            return Priority::normal;
        }

        virtual bool SetName(const std::string& name)
        {
            return false;
        }

        virtual std::optional<std::string> GetName()
        {
            return std::nullopt;
        }

        virtual bool SetAffinity(const std::vector<bool>& affinity)
        {
            return false;
        }
        
        virtual std::optional<std::vector<bool>> GetAffinity()
        {
            return std::nullopt;
        }
    };
    
    }//qor::framework

    qor_pp_declare_instancer_of(framework::ICurrentThread, ThreadSingletonInstancer);    
    qor_pp_declare_factory_of(framework::ICurrentThread, ExternalFactory);
    constexpr GUID ICurrentThreadGUID = {0x6d4deb2e, 0x05d5, 0x40b0, { 0xbc, 0x25, 0x9d, 0xa9, 0x3d, 0x55, 0xa1, 0xd6}};
    qor_pp_declare_guid_of(framework::ICurrentThread,ICurrentThreadGUID);

}//qor

#endif//QOR_PP_H_FRAMEWORK_THREAD_CURRENT_PROCESS_INTERFACE


