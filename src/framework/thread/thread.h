// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_THREAD
#define QOR_PP_H_FRAMEWORK_THREAD

#include <chrono>
#include <thread>

#include "src/platform/compiler/compiler.h"
#include "currentthread.h"
#include "src/qor/delegate/delegate.h"

namespace qor{ namespace framework{

    class qor_pp_module_interface(QOR_PP_THREAD) Thread
    {

    public:

        Thread();
		Thread(const Thread & src) = delete;
		Thread& operator=(Thread const& src) = delete;
		virtual ~Thread();

		std::thread::id GetID();		
		void Detach();
		std::stop_source GetStopSource();
		std::stop_token GetStopToken();
		void Join();
		bool Joinable();
		bool RequestStop();

		virtual void Run(){}

    private:	
		void Setup();
		void CleanUp();
		
		CurrentThread* m_pCurrent;
        std::jthread m_std_thread;
		std::stop_callback< Delegate<void(void)> > m_callback;
    };

}}//qor::framework

#endif//QOR_PP_H_FRAMEWORK_THREAD
