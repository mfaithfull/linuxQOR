// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_THREADPOOL_VERSION
#define QOR_PP_H_FRAMEWORK_THREADPOOL_VERSION

#if defined(__linux__)
// On Linux, <sys/sysmacros.h> defines macros called `major` and `minor`. We undefine them here so the `version` struct can work.
#ifdef major
    #undef major
#endif
#ifdef minor
    #undef minor
#endif
#endif

 // Macros indicating the version of the thread pool library.
 #define qor_pp_threadpool_version_major 5
 #define qor_pp_threadpool_version_minor 0
 #define qor_pp_threadpool_version_patch 0
 
 namespace qor { namespace framework{

    //A struct used to store a version number, which can be checked and compared at compilation time.
    struct version
    {
        constexpr version(const std::uint64_t major_, const std::uint64_t minor_, const std::uint64_t patch_) noexcept : major(major_), minor(minor_), patch(patch_) {}
    
    // In C++20 and later we can use the spaceship operator `<=>` to automatically generate comparison operators. In C++17 we have to define them manually.
#ifdef __cpp_impl_three_way_comparison
        std::strong_ordering operator<=>(const version&) const = default;
#else
        [[nodiscard]] constexpr friend bool operator==(const version& lhs, const version& rhs) noexcept
        {
            return std::tuple(lhs.major, lhs.minor, lhs.patch) == std::tuple(rhs.major, rhs.minor, rhs.patch);
        }
    
        [[nodiscard]] constexpr friend bool operator!=(const version& lhs, const version& rhs) noexcept
        {
            return !(lhs == rhs);
        }
    
        [[nodiscard]] constexpr friend bool operator<(const version& lhs, const version& rhs) noexcept
        {
            return std::tuple(lhs.major, lhs.minor, lhs.patch) < std::tuple(rhs.major, rhs.minor, rhs.patch);
        }
    
        [[nodiscard]] constexpr friend bool operator>=(const version& lhs, const version& rhs) noexcept
        {
            return !(lhs < rhs);
        }
    
        [[nodiscard]] constexpr friend bool operator>(const version& lhs, const version& rhs) noexcept
        {
            return std::tuple(lhs.major, lhs.minor, lhs.patch) > std::tuple(rhs.major, rhs.minor, rhs.patch);
        }
    
        [[nodiscard]] constexpr friend bool operator<=(const version& lhs, const version& rhs) noexcept
        {
            return !(lhs > rhs);
        }
#endif
    
        [[nodiscard]] std::string to_string() const
        {
            return std::to_string(major) + '.' + std::to_string(minor) + '.' + std::to_string(patch);
        }
    
        friend std::ostream& operator<<(std::ostream& stream, const version& ver)
        {
            stream << ver.to_string();
            return stream;
        }
    
        std::uint64_t major;
        std::uint64_t minor;
        std::uint64_t patch;
    };
    
    //The version of the thread pool library.
    inline constexpr version thread_pool_version(qor_pp_threadpool_version_major, qor_pp_threadpool_version_minor, qor_pp_threadpool_version_patch);

 }}//qor::framework

#endif//QOR_PP_H_FRAMEWORK_THREADPOOL_VERSION
