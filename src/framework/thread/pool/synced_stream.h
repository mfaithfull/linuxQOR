// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_THREADPOOL_SYNCEDSTREAM
#define QOR_PP_H_FRAMEWORK_THREADPOOL_SYNCEDSTREAM

//inline header. Must be included within qor::framework namespace

    //A utility class to synchronize printing to an output stream by different threads.
    class [[nodiscard]] synced_stream
    {
    public:
        

        explicit synced_stream()
        {
            add_stream(std::cout);
        }
        
        template <typename... T>
        explicit synced_stream(T&... streams)
        {
            (add_stream(streams), ...);
        }

        void add_stream(std::ostream& stream)
        {
            out_streams.push_back(&stream);
        }

        std::vector<std::ostream*>& get_streams() noexcept
        {
            return out_streams;
        }

        template <typename... T>
        void print(const T&... items)
        {
            const std::scoped_lock stream_lock(stream_mutex);
            for (std::ostream* const stream : out_streams)
                (*stream << ... << items);
        }

        template <typename... T>
        void println(T&&... items)
        {
            print(std::forward<T>(items)..., '\n');
        }

        void remove_stream(std::ostream& stream)
        {
            out_streams.erase(std::remove(out_streams.begin(), out_streams.end(), &stream), out_streams.end());
        }

        inline static std::ostream& (&endl)(std::ostream&) = static_cast<std::ostream& (&)(std::ostream&)>(std::endl);

        inline static std::ostream& (&flush)(std::ostream&) = static_cast<std::ostream& (&)(std::ostream&)>(std::flush);

    private:

        std::vector<std::ostream*> out_streams;
        mutable std::mutex stream_mutex;
    };

#endif//QOR_PP_H_FRAMEWORK_THREADPOOL_SYNCEDSTREAM
