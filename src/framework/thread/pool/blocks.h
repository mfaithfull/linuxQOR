// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_THREADPOOL_BLOCKS
#define QOR_PP_H_FRAMEWORK_THREADPOOL_BLOCKS

namespace qor { namespace framework{

    //A helper template to divide a range into blocks. Used by `PostBlocks()`, `SubmitBlocks()`, `PostLoop()`, and `SubmitLoop()`.
    //T The type of the indices. Should be a signed or unsigned integer.
    template <typename T>
    class [[nodiscard]] Blocks
    {
    public:
        
        Blocks(const T first_index_, const T index_after_last_, const std::size_t num_blocks_) noexcept : first_index(first_index_), index_after_last(index_after_last_), num_blocks(num_blocks_)
        {
            if (index_after_last > first_index)
            {
                const std::size_t total_size = static_cast<std::size_t>(index_after_last - first_index);
                num_blocks = std::min(num_blocks, total_size);
                block_size = total_size / num_blocks;
                remainder = total_size % num_blocks;
                if (block_size == 0)
                {
                    block_size = 1;
                    num_blocks = (total_size > 1) ? total_size : 1;
                }
            }
            else
            {
                num_blocks = 0;
            }
        }
        
        [[nodiscard]] T end(const std::size_t block) const noexcept
        {
            return (block == num_blocks - 1) ? index_after_last : start(block + 1);
        }
        
        [[nodiscard]] std::size_t get_num_blocks() const noexcept
        {
            return num_blocks;
        }
        
        [[nodiscard]] T start(const std::size_t block) const noexcept
        {
            return first_index + static_cast<T>(block * block_size) + static_cast<T>(block < remainder ? block : remainder);
        }

    private:
        
        std::size_t block_size = 0;
        T first_index = 0;
        T index_after_last = 0;
        std::size_t num_blocks = 0;
        std::size_t remainder = 0;
    };

}}//qor::framework

#endif//QOR_PP_H_FRAMEWORK_THREADPOOL_BLOCKS