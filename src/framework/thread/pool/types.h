// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_THREADPOOL_TYPES
#define QOR_PP_H_FRAMEWORK_THREADPOOL_TYPES

#include <functional>
#include "src/framework/thread/thread.h"

namespace qor { namespace framework{

    class ThreadPool;                                                   //forward declare ThreadPool class
#ifdef __cpp_lib_move_only_function
    template <typename... S>                                            //The template to use to store functions in the task queue and other places. In C++23 and later we use `std::move_only_function`.
    using function_t = std::move_only_function<S...>;
#else
    template <typename... S>                                            //The template to use to store functions in the task queue and other places. In C++17 we use `std::function`.
    using function_t = std::function<S...>;
#endif
    using task_t = function_t<void()>;                                  //The type of tasks in the task queue.
    using thread_t = Thread;                                            //The type of threads to use.

}}//qor::framework    

#endif//QOR_PP_H_FRAMEWORK_THREADPOOL_TYPES
