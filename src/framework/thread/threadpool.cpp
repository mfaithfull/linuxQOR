// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "threadpool.h"

namespace qor{ namespace framework{

    void ThreadPool::Setup()
    {
        CreateThreads();
    }

    void ThreadPool::Shutdown()
    {
        Pause();
        Wait();
        Purge();
    }

    ThreadPool::~ThreadPool() noexcept                                                                          //Destruct the thread pool. Waits for all tasks to complete, then destroys all threads. If a cleanup function was set, it will run in each thread right before it is destroyed. Note that if the pool is paused, then any tasks still in the queue will never be executed.
    {            
#ifdef __cpp_exceptions
        try
        {
#endif
            Wait();
#ifdef __cpp_exceptions
        }
        catch (...)
        {
        }
#endif
        while(tasks.size())
        {
            tasks.pop();
        }
    }

    std::size_t ThreadPool::GetThreadCount() const noexcept
    {
        return thread_count;
    }

    void ThreadPool::SetThreadCount(const std::size_t num_threads)
    {
        thread_count = DetermineThreadCount(num_threads);
    }

    void ThreadPool::CreateThreads()
    {
        threads = std::make_unique<thread_t[]>(thread_count);
        {
            const std::scoped_lock tasks_lock(tasks_mutex);
            tasks_running = thread_count;
        }
        for (std::size_t i = 0; i < thread_count; ++i)
        {
            threads[i] = thread_t(
                [this, i]
                (const std::stop_token& stop_token)
                {                    
                    CurrentThread::Init();                    
                    Worker(stop_token, i);
                    CurrentThread::Destroy();
                }
            );
        }
    }

    std::size_t ThreadPool::DetermineThreadCount(const std::size_t num_threads) noexcept
    {
        if (num_threads > 0)
            return num_threads;
        if (thread_t::std_thread_t::hardware_concurrency() > 2)
            return 1 + ( thread_t::std_thread_t::hardware_concurrency() - 2 );
        if (thread_t::std_thread_t::hardware_concurrency() > 0)
            return 1 + ( thread_t::std_thread_t::hardware_concurrency() - 1 );
        return 1;
    }

    task_t ThreadPool::PopTask()
    {
        task_t task;
        task = std::move(const_cast<pr_task&>(tasks.top()).task);
        tasks.pop();
        return task;
    }

    void ThreadPool::Worker(const std::stop_token &stop_token, const std::size_t idx)
    {
        CurrentThread::GetMutableCurrent().SetPool(this);
        CurrentThread::GetMutableCurrent().SetIndex(idx);
        init_func(idx);
        while (true)
        {
            std::unique_lock tasks_lock(tasks_mutex);
            --tasks_running;
            if (waiting && (tasks_running == 0) && ( paused || tasks.empty()))
            {
                tasks_done_cv.notify_all();
            }
            //tasks_lock is unlocked by the wait here
            task_available_cv.wait(tasks_lock , stop_token,
                [this]
                {
                    return !( paused || tasks.empty());
                });
            //tasks_lock is relocked by the wait before here
            if (stop_token.stop_requested())
            {
                break;
            }
            {
                task_t task = PopTask(); // NOLINT(misc-const-correctness) In C++23 this cannot be const since `std::move_only_function::operator()` is not a const member function.
                ++tasks_running;
                tasks_lock.unlock();
#ifdef __cpp_exceptions
                try
                {
#endif
                    task();
#ifdef __cpp_exceptions
                }
                catch (...)
                {
                }
#endif
            }
        }
        cleanup_func(idx);
        CurrentThread::GetMutableCurrent().SetIndex(std::nullopt);
        CurrentThread::GetMutableCurrent().SetPool(std::nullopt);
    }

}}//qor::framework
