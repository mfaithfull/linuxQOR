// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "thread.h"

namespace qor{ namespace framework{

    Thread* Thread::m_spMainThread = nullptr;
	qor_pp_thread_local Thread* t_pCurrentThread = nullptr;

	Thread& Thread::GetCurrent(void)
	{
		if (t_pCurrentThread != nullptr)
		{
			return *t_pCurrentThread;
		}
		auto id = std::this_thread::get_id();
		if (id == (dynamic_cast<Thread*>(m_spMainThread))->Getstdid())
		{
			return *m_spMainThread;
		}
		throw std::invalid_argument("Current thread context cannot be determined.");
	}

    void Thread::SetCurrent(Thread* pCurrent)
	{
		if (t_pCurrentThread == nullptr)
		{
			t_pCurrentThread = pCurrent;
		}
		else
		{
			t_pCurrentThread = nullptr;
		}
	}

    Thread& Thread::GetMain(void)
	{
		return *m_spMainThread;
	}

    const Thread* Thread::This(void)
	{
		if (t_pCurrentThread != nullptr)
		{
			return dynamic_cast<Thread*>(t_pCurrentThread);
		}
		auto id = std::this_thread::get_id();
		if (id == dynamic_cast<Thread*>(m_spMainThread)->m_std_id)
		{
			return dynamic_cast<Thread*>(m_spMainThread);
		}
		return nullptr;
	}


	Thread::Thread() : m_std_thread()//, m_callback(m_std_thread.get_stop_token(), StopCallback), m_pRootContext(nullptr), m_pCurrentContext(nullptr)
	{	
		m_std_id = m_std_thread.get_id();
		if (m_spMainThread == nullptr)
		{
			m_spMainThread = this;			
		}
	}

    Thread::~Thread()
	{
		if (m_spMainThread == this)
		{
			m_spMainThread = nullptr;
		}
	}

	void Thread::Sleep(unsigned long ulMilliseconds)
	{
		std::this_thread::sleep_for(std::chrono::milliseconds(ulMilliseconds));
	}

	
	void Thread::Yield()
	{		
		std::this_thread::yield();
	}

	std::thread::id Thread::GetID()
	{
		return m_std_thread.get_id();
	}

    void Thread::Detach(void)
	{
		m_std_thread.detach();
	}

    std::stop_source Thread::GetStopSource(void)
	{		
		return m_std_thread.get_stop_source();
	}

    std::stop_token Thread::GetStopToken()
	{		
		return m_std_thread.get_stop_token();
	}

    void Thread::Join(void)
	{
		m_std_thread.join();				
	}

    bool Thread::Joinable(void)
	{
		return m_std_thread.joinable();		
	}

    bool Thread::RequestStop()
	{
		return m_std_thread.request_stop();
	}

}}//qor::framework
