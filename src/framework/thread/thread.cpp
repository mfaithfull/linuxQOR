// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "thread.h"

namespace qor{ namespace framework{

	Thread::Thread() : m_std_thread(
		Delegate<void(void)>::Create<Thread, &Thread::Setup>(this)
	), m_callback(m_std_thread.get_stop_token(), Delegate<void(void)>::Create<Thread, &Thread::CleanUp>(this) )
	{	
	}

    Thread::~Thread()
	{
	}

	std::thread::id Thread::GetID()
	{
		return m_std_thread.get_id();
	}

    void Thread::Detach(void)
	{
		m_std_thread.detach();
	}

    std::stop_source Thread::GetStopSource(void)
	{		
		return m_std_thread.get_stop_source();
	}

    std::stop_token Thread::GetStopToken()
	{		
		return m_std_thread.get_stop_token();
	}

    void Thread::Join(void)
	{
		m_std_thread.join();				
	}

    bool Thread::Joinable(void)
	{
		return m_std_thread.joinable();		
	}

    bool Thread::RequestStop()
	{
		return m_std_thread.request_stop();
	}

	std::jthread& Thread::stdThread()
	{
		return m_std_thread;
	}

	void Thread::Setup()
	{
		try
		{
			CurrentThread threadScopedState;
			t_pCurrentThread = &threadScopedState;
			Run();			
			t_pCurrentThread = nullptr;
		}
		catch(const std::exception& e)
		{
			//std::cerr << e.what() << '\n';
		}
		catch(...)
		{
			//something worse
		}
	}

	void Thread::CleanUp()
	{
		if (t_pCurrentThread)
		{
			delete t_pCurrentThread;
		}
		t_pCurrentThread = nullptr;
	}

}}//qor::framework
