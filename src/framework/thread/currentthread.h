// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FRAMEWORK_CURRENTTHREAD
#define QOR_PP_H_FRAMEWORK_CURRENTTHREAD

#include <thread>

#include "src/platform/compiler/compiler.h"
#include "threadcontext.h"
#include "icurrentthread.h"

namespace qor
{
    bool qor_pp_import ImplementsICurrentThread();//All libraries providing an implementation of ICurrentThread also need to export this function so that the linker can find them
}

namespace qor{ namespace framework{

    class ThreadPool;                                                   //forward declare ThreadPool class
    class qor_pp_module_interface(QOR_THREAD) CurrentThread;

    extern qor_pp_thread_local CurrentThread* t_pCurrentThread;

#ifdef QOR_THREAD   //Anything other than the qor_thread library doesn't need to know about these
    extern qor_pp_thread_local std::optional<std::size_t> pool_index;
    extern qor_pp_thread_local std::optional<void*> parent_pool;
#endif

    class qor_pp_module_interface(QOR_THREAD) CurrentThread
    {
        friend class qor_pp_module_interface(QOR_THREAD) Thread;
        friend class ThreadPool;
    public:

        static const CurrentThread& GetCurrent();

        CurrentThread(const CurrentThread & src) = delete;
        CurrentThread& operator=(CurrentThread const& src) = delete;
		~CurrentThread(){};

        std::thread::id GetID(void) const;

		template <class _Clock, class _Duration>
		void SleepUntil(const std::chrono::time_point<_Clock, _Duration>& timePoint) const
		{
			std::this_thread::sleep_until(timePoint);
		}

		template <class _Rep, class _Period>
		void SleepFor(const std::chrono::duration<_Rep, _Period>& timePeriod) const
		{
			std::this_thread::sleep_for(timePeriod);
		}

        void Sleep(unsigned long ulMilliseconds) const;
        void Yield() const;

        ThreadContext& Context() const;

        virtual bool SetPriority(ICurrentThread::Priority priority) const;
        virtual std::optional<ICurrentThread::Priority> GetPriority() const;
        virtual bool SetName(const std::string& name) const;
        virtual std::optional<std::string> GetName() const;
        virtual bool SetAffinity(const std::vector<bool>& affinity) const;
        virtual std::optional<std::vector<bool>> GetAffinity() const;
        std::optional<void*> GetPool() const noexcept;
        std::optional<std::size_t> GetPoolIndex() const noexcept;

    private:

        static void Init();
        static void Destroy();
        static CurrentThread& GetMutableCurrent();

        void SetPool(std::optional<void*> pool);
        void SetIndex(std::optional<std::size_t> index);

        mutable ThreadContext m_Context;
        CurrentThread(){};
        void SetCurrent(CurrentThread* pThread);
    };

}}//qor::framework

#endif//QOR_PP_H_FRAMEWORK_CURRENTTHREAD
