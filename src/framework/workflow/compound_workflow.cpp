// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "compound_workflow.h"

namespace qor{ namespace workflow{

    CompoundWorkflow::CompoundWorkflow(){}

    CompoundWorkflow::CompoundWorkflow(const CompoundWorkflow& src)
    {
        *this = src;
    }

    CompoundWorkflow& CompoundWorkflow::operator = (const CompoundWorkflow& src)
    {
        m_WorkflowStack = src.m_WorkflowStack;
        m_InitialWorkflow = src.m_InitialWorkflow;

        return *this;
    }

    void CompoundWorkflow::Start()
    {
        auto workflow = GetInitialWorkflow();
        m_WorkflowStack.push(workflow);
        workflow->Start();
    }

    void CompoundWorkflow::Tick() {}
    void CompoundWorkflow::Suspend() {}
    void CompoundWorkflow::Resume() {}
    void CompoundWorkflow::Leave() {}     

    ref_of<IWorkflow>::type CompoundWorkflow::CurrentWorkflow()
    {
        if( !m_WorkflowStack.empty() )
        {
            return m_WorkflowStack.top();
        }
        return ref_of<IWorkflow>::type();
    }

    void CompoundWorkflow::SetWorkflow(ref_of<IWorkflow>::type workflow)
    {
       CurrentWorkflow()->Leave();
        m_WorkflowStack.pop();
        m_WorkflowStack.push(workflow);
    }

    void CompoundWorkflow::PushWorkflow(ref_of<IWorkflow>::type workflow)
    {
        CurrentWorkflow()->Suspend();
        m_WorkflowStack.push(workflow);
        workflow->Start();
    }

    void CompoundWorkflow::PopWorkflow()
    {
        CurrentWorkflow()->Leave();
        m_WorkflowStack.pop();
        if( !m_WorkflowStack.empty() )
        {
            CurrentWorkflow()->Resume();
        }
    }

    ref_of<IWorkflow>::type CompoundWorkflow::GetInitialWorkflow()
    {
        return m_InitialWorkflow;
    }

    void CompoundWorkflow::SetInitialWorkflow(ref_of<IWorkflow>::type workflow)
    {
        m_InitialWorkflow = workflow;
    }

}}//qor::workflow
