// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_WORKFLOW_COMPOUND
#define QOR_PP_H_WORKFLOW_COMPOUND

#include "workflow.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/reference/reference.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/reference/newref.h"

namespace qor{ namespace workflow{

    class qor_pp_module_interface(QOR_WORKFLOW) CompoundWorkflow : public IWorkflow
    {
    public:

        CompoundWorkflow();
        virtual ~CompoundWorkflow() = default;
        CompoundWorkflow( const CompoundWorkflow& src );
        CompoundWorkflow& operator = (const CompoundWorkflow& src );

        virtual void Start();        
        virtual void Tick();
        virtual void Suspend();
        virtual void Resume();
        virtual void Leave();        

        void SetInitialWorkflow(ref_of<IWorkflow>::type);
        
    protected:

        ref_of<IWorkflow>::type CurrentWorkflow();
        void SetWorkflow(ref_of<IWorkflow>::type workflow);
        void PushWorkflow(ref_of<IWorkflow>::type workflow);
        void PopWorkflow();
        ref_of<IWorkflow>::type GetInitialWorkflow();
        
        
        std::stack< ref_of<IWorkflow>::type > m_WorkflowStack;
        ref_of<IWorkflow>::type m_InitialWorkflow;
    };

}}//qor::workflow

#endif//QOR_PP_H_WORKFLOW_COMPOUND
