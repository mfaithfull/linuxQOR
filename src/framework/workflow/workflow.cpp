// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "workflow.h"

namespace qor{ namespace workflow{

    State::State(Workflow* workflow) : m_Workflow(workflow)
    {
        Enter = std::bind(&Workflow::Enter, workflow);
        Suspend = std::bind(&Workflow::Suspend, workflow);
        Resume = std::bind(&Workflow::Resume, workflow);
        Leave = std::bind(&Workflow::Leave, workflow);
    }

    Workflow::Workflow() : m_complete(true), m_initialState(this), m_result(0)
    {
    }

    Workflow::Workflow(const Workflow& src) : Workflow()
    {
        *this = src;
    }

    Workflow& Workflow::operator = (const Workflow& src)
    {
        m_complete = src.m_complete;
        m_StateStack = src.m_StateStack;
        m_initialState = src.m_initialState;
        return *this;
    }

    int Workflow::Run()
    {   
        m_complete = false;     
        while(!IsComplete())
        {
            CurrentState().Enter();
        }
        while(!m_StateStack.empty())
        {
            PopState();
        }
        return m_result;
    }

    void Workflow::Enter()
    {
        m_complete = true;
    }
    
    void Workflow::Suspend(){}
    
    void Workflow::Resume(){}

    void Workflow::Leave(){}

    State Workflow::CurrentState()
    {
        if( !m_StateStack.empty() )
        {
            return m_StateStack.top();
        }
        return State(this);
    }

    State Workflow::GetInitialState()
    {
        return m_initialState;
    }

    void Workflow::SetInitialState(State newState)
    {
        if(m_StateStack.empty())
        {
            m_initialState = newState;
            m_StateStack.push(newState);
            m_complete = false;
        }
    }

    void Workflow::SetState(State newState)
    {
        if(!m_StateStack.empty())
        {
    		State currentState = CurrentState();
            currentState.Leave();
		    m_StateStack.pop();
        }
		m_StateStack.push(newState);
    }

    void Workflow::PushState(State newState)
    {
        if(!m_StateStack.empty())
        {
    		State currentState = CurrentState();
	    	currentState.Suspend();
        }
		m_StateStack.push(newState);
		newState.Enter();		
    }

    void Workflow::PopState()
    {
        if(!m_StateStack.empty())
        {
    		State currentState = CurrentState();
	    	currentState.Leave();
            m_StateStack.pop();		
            if(!m_StateStack.empty())
            {
           		currentState = CurrentState();
    	        currentState.Resume();
            }
        }
    }

    bool Workflow::IsComplete() const
    {
        return m_complete;
    }

    void Workflow::SetComplete()
    {
        m_complete = true;
    }

    void Workflow::SetResult(int result)
    {
        m_result = result;
    }

}}//qor::workflow
