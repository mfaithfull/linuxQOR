// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "workflow.h"

namespace qor{ namespace workflow{

    Workflow::Workflow() : m_complete(false)
    {
    }

    Workflow::Workflow(const Workflow& src)
    {
    }

    Workflow& Workflow::operator = (const Workflow& src)
    {
        return *this;
    }

    void Workflow::InitialStateHandler(Transition evt)
    {
        switch(evt)
        {
            case Transition::Enter:
            case Transition::Tick:
            case Transition::Suspend:
            break;
            case Transition::Resume:
            case Transition::Leave:
            m_complete = true;            
        }
    }

    void Workflow::Start()
    {
        auto newstate = GetInitialState();
        m_StateStack.push(newstate);
        newstate(Enter);
    }

    void Workflow::Tick(){}
    void Workflow::Suspend(){}
    void Workflow::Resume(){}
    void Workflow::Leave(){}

    state_t Workflow::CurrentState()
    {
        if( !IsComplete() && !m_StateStack.empty() )
        {
            return m_StateStack.top();
        }
        return state_t::Create<Workflow, &Workflow::InitialStateHandler>(this);
    }

    void Workflow::SetState(state_t newstate)
    {
		state_t currentState = CurrentState();

        currentState(Transition::Leave);
		m_StateStack.pop();		
		m_StateStack.push(newstate);
    }

    void Workflow::PushState(state_t newstate)
    {
		state_t currentState = CurrentState();
		currentState(Transition::Suspend);
		
		m_StateStack.push(newstate);
		newstate(Enter);		
    }

    void Workflow::PopState()
    {
		state_t currentState = CurrentState();
		currentState(Transition::Leave);
        m_StateStack.pop();		
        if(!IsComplete())
        {
    		currentState = CurrentState();
	    	currentState(Transition::Resume);
        }
    }

    state_t Workflow::GetInitialState()
    {
        return state_t::Create<Workflow, &Workflow::InitialStateHandler>(this);
    }

    bool Workflow::IsComplete() const
    {
        return m_complete;
    }

    void Workflow::DefaultHandle(Transition t)
    {
        switch(t)
        {
            case Transition::Enter:
            case Transition::Tick:            
            case Transition::Suspend:
            break;
            case Transition::Resume:
                PopState();
            break;
            case Transition::Leave:
            break;
        }
    }

}}//qor::workflow
