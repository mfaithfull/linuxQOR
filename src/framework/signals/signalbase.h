// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

/***********************************************************************
*
* Copyright (c) 2016-2021 Barbara Geller
* Copyright (c) 2016-2021 Ansel Sermersheim
*
* This file is part of CsSignal.
*
* CsSignal is free software, released under the BSD 2-Clause license.
* For license details refer to LICENSE provided with this project.
*
* CopperSpice is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* https://opensource.org/licenses/BSD-2-Clause
*
***********************************************************************/


#ifndef QOR_PP_H_SIGNALBASE
#define QOR_PP_H_SIGNALBASE

#include <set>
#include <unordered_set>
#include <memory>
#include "src/platform/compiler/compiler.h"
#include "bento.h"
#include "src/qor/datastructures/rcuguarded.h"
#include "src/qor/datastructures/rculist.h"

namespace qor
{
    enum class ConnectionKind 
    {
        AutoConnection,
        DirectConnection,
        QueuedConnection,
        BlockingQueuedConnection
    };

    enum class DisconnectKind 
    {
        DisconnectAll,
        DisconnectOne
    };

    template <class Iter1, class Iter2, class T>
    Iter1 find(Iter1 iter1, const Iter2& iter2, const T& value)
    {
        while (iter1 != iter2) 
        {
            if (value == *iter1) 
            {
                break;
            }
            ++iter1;
        }
        return iter1;
    }

    template<class Sender, class SignalClass, class ...SignalArgs, class Receiver, class SlotClass, class ...SlotArgs, class SlotReturn>
    bool connect(const Sender& sender, void (SignalClass::* signalMethod)(SignalArgs...), const Receiver& receiver, SlotReturn(SlotClass::* slotMethod)(SlotArgs...), ConnectionKind type = ConnectionKind::AutoConnection, bool uniqueConnection = false);

    template<class Sender, class SignalClass, class ...SignalArgs, class Receiver, class T>
    bool connect(const Sender& sender, void (SignalClass::* signalMethod)(SignalArgs...), const Receiver& receiver, T slotLambda, ConnectionKind type = ConnectionKind::AutoConnection, bool uniqueConnection = false);

    template<class Sender, class Receiver>
    bool connect(const Sender& sender, std::unique_ptr<detail::BentoAbstract/*, qor_std_deleter<detail::BentoAbstract>*/ > signalMethod_Bento, const Receiver& receiver, std::unique_ptr< detail::BentoAbstract/*, qor_std_deleter<detail::BentoAbstract>*/ > slotMethod_Bento, ConnectionKind type = ConnectionKind::AutoConnection, bool uniqueConnection = false);


    class qor_pp_module_interface(QOR_SIGNALSLOTS) SignalBase
    {

    public:

        virtual ~SignalBase() noexcept(false);

    protected:

        static detail::BentoAbstract*& get_threadLocal_currentSignal();

        int internal_cntConnections(const SlotBase* receiver, const detail::BentoAbstract& signalMethod_Bento) const;

        std::set<SlotBase*> internal_receiverList( const detail::BentoAbstract& signalMethod_Bento) const;

    private:

        // part of destructor
        static std::mutex& get_mutex_beingDestroyed();
        static std::unordered_set<const SignalBase*>& get_beingDestroyed();

        // part of disconnect
        mutable int m_activateBusy = 0;
        
        struct ConnectStruct 
        {
            std::unique_ptr< const detail::BentoAbstract/*, qor_std_deleter< const detail::BentoAbstract >*/ > signalMethod;
            const SlotBase* receiver;
            std::unique_ptr< const detail::BentoAbstract/*, qor_std_deleter< const detail::BentoAbstract >*/ > slotMethod;
            ConnectionKind type;
        };

        // list of connections from my Signal to some Receiver
        mutable SharedList<ConnectStruct> m_connectList;

        void addConnection( std::unique_ptr< const detail::BentoAbstract/*, qor_std_deleter< const detail::BentoAbstract >*/ > signalMethod, const SlotBase*, std::unique_ptr< const detail::BentoAbstract/*, qor_std_deleter< const detail::BentoAbstract >*/ > slotMethod, ConnectionKind type, SharedList<ConnectStruct>::write_handle senderListHandle) const;

        virtual void handleException(std::exception_ptr data);

        template<class Sender, class SignalClass, class ...SignalArgTypes, class ...Ts>
        friend void activate(Sender& sender, void (SignalClass::* signal)(SignalArgTypes...), Ts &&... Vs);

        template<class Sender, class SignalClass, class ...SignalArgs, class Receiver, class SlotClass, class ...SlotArgs, class SlotReturn>
        friend bool connect(const Sender& sender, void (SignalClass::* signalMethod)(SignalArgs...), const Receiver& receiver, SlotReturn(SlotClass::* slotMethod)(SlotArgs...), ConnectionKind type, bool uniqueConnection);

        template<class Sender, class SignalClass, class ...SignalArgs, class Receiver, class T>
        friend bool connect(const Sender& sender, void (SignalClass::* signalMethod)(SignalArgs...), const Receiver& receiver, T slotLambda, ConnectionKind type, bool uniqueConnection);

        template<class Sender, class Receiver>
        friend bool connect(const Sender& sender, std::unique_ptr<detail::BentoAbstract/*, qor_std_deleter<detail::BentoAbstract>*/ > signalMethod_Bento, const Receiver& receiver, std::unique_ptr<detail::BentoAbstract/*, qor_std_deleter<detail::BentoAbstract>*/ > slotMethod_Bento, ConnectionKind type, bool uniqueConnection);

        template<class Sender, class Receiver>
        friend bool internal_disconnect(const Sender& sender, const detail::BentoAbstract* signalBento, const Receiver* receiver, const detail::BentoAbstract* slotBento);

        friend class SlotBase;
    };

}//qor

#endif//QOR_PP_H_SIGNALBASE
