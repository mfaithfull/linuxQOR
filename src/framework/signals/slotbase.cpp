// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

/***********************************************************************
*
* Copyright (c) 2016-2021 Barbara Geller
* Copyright (c) 2016-2021 Ansel Sermersheim
*
* This file is part of CsSignal.
*
* CsSignal is free software, released under the BSD 2-Clause license.
* For license details refer to LICENSE provided with this project.
*
* CopperSpice is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* https://opensource.org/licenses/BSD-2-Clause
*
***********************************************************************/

#include "src/configuration/configuration.h"
#include "slotbase.h"
#include "pendingslot.h"
#include "signalbase.h"
#include "bento.h"

namespace qor
{
    SlotBase::SlotBase(){}

    SlotBase::SlotBase(const SlotBase&){}

    SlotBase::~SlotBase() noexcept(false)
    {
        try 
        {
            // clean up possible sender connections
            auto receiverListHandle = m_possibleSenders.lock_read();

            for (auto& sender : *receiverListHandle) 
            {
                auto senderListHandle = sender->m_connectList.lock_write();

                auto iter = senderListHandle->begin();

                while (iter != senderListHandle->end()) 
                {
                    if (iter->receiver == this) 
                    {
                        iter = senderListHandle->erase(iter);
                    }
                    else 
                    {
                        ++iter;
                    }
                }
            }

        }
        catch (...) 
        {
            // least of the worst options
            std::terminate();
        }
    }
    
    SignalBase*& SlotBase::get_threadLocal_currentSender()
    {
#ifdef __APPLE__
        static __thread SignalBase* threadLocal_currentSender = nullptr;
#else
        static qor_pp_thread_local SignalBase* threadLocal_currentSender = nullptr;
#endif

        return threadLocal_currentSender;
    }

    bool SlotBase::compareThreads() const
    {
        return true;
    }

    void SlotBase::queueSlot(PendingSlot data, ConnectionKind)
    {
        // calls the slot immediately
        data();
    }

    SignalBase* SlotBase::sender() const
    {
        return get_threadLocal_currentSender();
    }

    std::set<SignalBase*> SlotBase::internal_senderList() const
    {
        std::set<SignalBase*> retval;

        auto receiverListHandle = m_possibleSenders.lock_read();

        for (auto& sender : *receiverListHandle) 
        {
            retval.insert(const_cast<SignalBase*>(sender));
        }

        return retval;
    }

}//qor
