// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_SYSTEM_FILESYSTEM_PATH
#define QOR_PP_H_SYSTEM_FILESYSTEM_PATH

#include <string>
#include <filesystem>

namespace qor{ namespace system{

    class qor_pp_module_interface(QOR_FILESYSTEM) Path
    {
        friend class FileSystem;

    public:

        Path();
        Path(const std::string& path);
        virtual ~Path() = default;

        Path& operator /= (const std::string& folder);
        Path operator / (const std::string& folder);

        Path Parent() const;
        const std::string Separator() const;
        const std::string SelfIndicator() const;
        const std::string ParentIndicator() const;
        const unsigned short MaxElementLength() const;
        const std::string RootIndicator() const;

        std::string ToString() const;
        std::string ToString(std::string FileName) const;

        void Clear();
        Path RootName();
        Path RootDirectory();
        Path RelativePath();
        bool IsEmpty();
        bool HasRootPath();
        bool HasRootName();
        bool HasRootDirectory();
        bool HasRelativePath();
        bool HasParentPath();
        bool IsAbsolute();
        bool IsRelative();
        bool IsSamePath(const Path& Compare) const;

        operator std::filesystem::path()
        {
            return m_path;
        }

        operator const std::filesystem::path() const
        {
            return m_path;
        }

    private:

        static std::string s_separator;
        static std::string s_selfIndicator;
        static std::string s_parentIndicator;
        static std::string s_rootIndicator;
        static unsigned short s_maxElementLength;

    protected:

        std::filesystem::path m_path;

    };
    
}}//qor::system

#endif//QOR_PP_H_SYSTEM_FILESYSTEM_PATH