// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <filesystem>
#include "fileindex.h"

namespace qor{ namespace system{

    FileIndex::FileIndex(const Path & path, const std::string& fileName) : m_dirent(std::filesystem::path(path.ToString(fileName))){}

    FileIndex::FileIndex(const std::filesystem::directory_entry& dirent) : m_dirent(dirent) {}

    FileIndex::FileIndex(const FileIndex& src)
    {
        *this = src;
    }

    FileIndex& FileIndex::operator = (const FileIndex& src)
    {
        if(&src != this)
        {
            m_dirent = src.m_dirent;
        }
        return *this;
    }
    
    bool FileIndex::Exists(void) const
    {
        return m_dirent.exists();
    }

    bool FileIndex::Copy(const FileIndex & Destination, std::filesystem::copy_options copyOptions) const
    {
        return std::filesystem::copy_file(m_dirent.path(), Destination.ToString(), copyOptions);
    }

    bool FileIndex::Delete() const
    {
        return std::filesystem::remove(m_dirent.path());
    }

    bool FileIndex::Move(const FileIndex & Destination) const
    {
        std::filesystem::rename(m_dirent.path(), Destination.ToString());
        return true;
    }

    bool FileIndex::Rename(const FileIndex & Destination)
    {
        m_dirent.replace_filename(Destination.ToString());
        return true;
    }

    bool FileIndex::Resize( std::uintmax_t newSize )
    {
        std::filesystem::resize_file(m_dirent.path(), newSize);
        return true;
    }

    bool FileIndex::IsBlockFile()
    {
        return std::filesystem::is_block_file(m_dirent.path());
    }

    bool FileIndex::IsCharacterFile()
    {
        return std::filesystem::is_character_file(m_dirent.path());
    }

    bool FileIndex::IsDirectory()
    {
        return std::filesystem::is_directory(m_dirent.path());
    }

    bool FileIndex::IsFIFO()
    {
        return std::filesystem::is_fifo(m_dirent.path());
    }

    bool FileIndex::IsOther()
    {
        return std::filesystem::is_other(m_dirent.path());
    }

    bool FileIndex::IsRegularFile()
    {
        return std::filesystem::is_regular_file(m_dirent.path());
    }

    bool FileIndex::IsSocket()
    {
        return std::filesystem::is_socket(m_dirent.path());
    }

    bool FileIndex::IsSymLink()
    {
        return std::filesystem::is_symlink(m_dirent.path());
    }

    std::uintmax_t FileIndex::Size()
    {
        return std::filesystem::file_size(m_dirent.path());
    }
    
    std::filesystem::file_time_type FileIndex::LastWriteTime() const
    {
        return m_dirent.last_write_time();
    }

    std::filesystem::file_status FileIndex::Status() const
    {
        return m_dirent.status();
    }

    std::filesystem::file_status FileIndex::SymLinkStatus() const
    {
        return m_dirent.symlink_status();
    }

    std::string FileIndex::ToString() const
    {
        return m_dirent.path();
    }

    ref_of<File>::type FileIndex::Open(const int openFor, const int withFlags, const int inMode)    
    {
        ref_of<File>::type result;
        return result;
    }

}}//qor::system
