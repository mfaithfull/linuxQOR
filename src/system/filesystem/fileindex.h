// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_SYSTEM_FILESYSTEM_FILEINDEX
#define QOR_PP_H_SYSTEM_FILESYSTEM_FILEINDEX

#include <string>
#include <filesystem>
#include "path.h"
#include "src/qor/reference/reference.h"
#include "file/file.h"

namespace qor{ namespace system{

    class qor_pp_module_interface(QOR_FILESYSTEM) FileIndex
	{
	public:

        FileIndex(const Path & Path, const std::string& FileName);
        FileIndex(const std::filesystem::directory_entry& dirent);
        FileIndex(const FileIndex&);
        FileIndex& operator = (const FileIndex&);
        virtual ~FileIndex() = default;

        bool Exists(void) const;
        bool Copy(const FileIndex & Destination, std::filesystem::copy_options copyOptions = std::filesystem::copy_options::none) const;
        bool Delete() const;
        bool Move(const FileIndex & Destination) const;
        bool Rename( const FileIndex & Destination );
        bool Resize( std::uintmax_t newSize );
        bool IsBlockFile() const;
        bool IsCharacterFile() const;
        bool IsDirectory() const;
        bool IsFIFO() const;
        bool IsOther() const;
        bool IsRegularFile() const;
        bool IsSocket() const;
        bool IsSymLink() const;
        std::uintmax_t Size() const;
        std::filesystem::file_time_type LastWriteTime() const;
        std::filesystem::file_status Status() const;
        std::filesystem::file_status SymLinkStatus() const;
        std::string ToString() const;
        Path GetPath(void) const;
        ref_of<File>::type Create(const int openFor, const int withFlags, const int inMode);
        ref_of<File>::type Open(const int openFor, const int withFlags, const int inMode);
        
    private:

        FileIndex();

        std::filesystem::directory_entry m_dirent;
    };

}}//qor::system

#endif//QOR_PP_H_SYSTEM_FILESYSTEM_FILEINDEX
