// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_SYSTEM_FILESYSTEM_INTERFACE
#define QOR_PP_H_SYSTEM_FILESYSTEM_INTERFACE

#include "src/qor/instance/singleton.h"
#include "src/qor/factory/factory.h"
#include "src/qor/factory/externalfactory.h"


namespace qor{ namespace system{

    class IFileSystem
    {
    public:

        IFileSystem() = default;
        virtual ~IFileSystem() noexcept = default;

        virtual void Setup() {}
        virtual void Shutdown() {}

        std::string PathSeparator() { return "/"; }
        std::string SelfIndicator() { return "."; }
        std::string ParentIndicator() { return ".."; }
        std::string RootIndicator() { return "/"; }
        unsigned short MaxElementLength() { return 256; }
        
    };
    
    }//system
    qor_pp_declare_instancer_of(system::IFileSystem, SingletonInstancer);
    qor_pp_declare_factory_of(system::IFileSystem, ExternalFactory);
    constexpr GUID IFileSystemGUID = {0x3474967c, 0x0be1, 0x417d, { 0xab, 0x71, 0xd0, 0x21, 0x10, 0x16, 0x0e, 0x9f}};
    qor_pp_declare_guid_of(system::IFileSystem,IFileSystemGUID);

}//qor

#endif//QOR_PP_H_SYSTEM_FILESYSTEM_INTERFACE
