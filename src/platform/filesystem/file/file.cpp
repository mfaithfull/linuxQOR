// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "file.h"

namespace qor{ namespace platform{

    static ref_of<IFile>::type Open(const FileIndex& index, int openFor, int withFlags)
    {        
        return new_ref<IFile>(index, openFor, withFlags);
    }

    File::File()
    {
    }

    File::File(const File& src) : m_index(src.m_index)
    {
        *this = src;
    }

    File::File(const FileIndex& index) : m_index(index)//open mode including sharing and access
    {
    }

    File& File::operator = (const File& src)
    {
        if(&src != this)
        {
            m_index = src.m_index;
        }
        return *this;
    }

    File::~File()
    {//derived class owns platform specific resource and handles close in its destructor
    }

    int File::ChangeMode(unsigned int mode)
    {
        return -1;
    }
    
    uint64_t File::GetPosition()
    {
        return 0;
    }

    uint64_t File::SetPosition(uint64_t newPosition)
    {
        return 0;
    }

    void File::Flush()
    {        
    }

    IFile::Type File::GetType()
    {
        return Unknown;
    }

    bool File::SetEOF()
    {
        return false;
    }

    bool File::SupportsPosition()
    {
        return false;
    }

    uint64_t File::SetPositionRelative(int64_t offset)
    {
        return 0;
    }

    void File::Truncate(uint64_t length)
    {

    }

    void File::Reserve(uint64_t length)
    {

    }

    uint64_t File::GetSize()
    {
        return std::filesystem::file_size(m_index.GetPath());
    }

    ref_of<IFile>::type File::ReOpen()
    {
        ref_of<IFile>::type newfile;
        return newfile;
    }

    std::filesystem::file_status File::GetStatus()
    {
        std::filesystem::file_status status = std::filesystem::status(m_index.GetPath());
        return status;
    }

    void File::SetStatus(int)
    {
        
    }

    int64_t File::Read(byte* buffer, size_t byteCount, int64_t offset)
    {
        return 0;
    }

    int64_t File::Write(byte* buffer, size_t byteCount, int64_t offset)
    {
        return 0;
    }

}}//qor::platform
