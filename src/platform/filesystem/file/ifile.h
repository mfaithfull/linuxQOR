// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PLATFORM_FILESYSTEM_FILE_INTERFACE
#define QOR_PP_H_PLATFORM_FILESYSTEM_FILE_INTERFACE

#include <vector>
#include "src/qor/injection/typeidentity.h"
#include "src/qor/factory/factory.h"
#include "src/qor/factory/externalfactory.h"
#include "src/qor/error/error.h"
#include "src/qor/reference/newref.h"

//All libraries providing an implementation of IFile also need to export this function so that the linker can find them
namespace qor{ bool qor_pp_import ImplementsIFile();}

namespace qor{ namespace platform{

    class qor_pp_module_interface(QOR_FILESYSTEM) FileIndex;

    class qor_pp_module_interface(QOR_FILESYSTEM) IFile
	{
	public:

        enum Type
        {
            Unknown
        };

        IFile(){}
        IFile(const FileIndex& index, int openFor, int withFlags){}
        virtual bool SupportsPosition(){ return false; }
        virtual uint64_t GetPosition(){ return 0; }
        virtual uint64_t SetPosition(uint64_t newPosition){return 0;}
        virtual uint64_t SetPositionRelative(int64_t offset){return 0;}
        virtual void Truncate(uint64_t length){}
        virtual void Reserve(uint64_t length){}
        virtual uint64_t GetSize(){return 0;}
        virtual void Flush(){}
        virtual Type GetType(){return Unknown;}
        virtual ref_of<IFile>::type ReOpen(){ ref_of<IFile>::type result; return result;}
        virtual std::filesystem::file_status GetStatus(){return std::filesystem::file_status();}
        virtual void SetStatus(int){}
        virtual int64_t Read(byte* buffer, size_t byteCount, int64_t offset = -1){return 0;}
        virtual int64_t Write(byte* buffer, size_t byteCount, int64_t offset = -1){return 0;}
        //virtual std::vector<ref_of<Property>::type> GetInformation();
        //virtual void SetInformation(std::vector<ref_of<Property>::type>& properties);
    };

    }//platform

    qor_pp_declare_factory_of(platform::IFile, ExternalFactory);    
    constexpr GUID IFileGUID = {0xee642d7a, 0x621f, 0x40d0, {0xb1, 0xf3, 0x40, 0xbb, 0xde, 0x20, 0x49, 0x05}};
    qor_pp_declare_guid_of(platform::IFile,IFileGUID);

}//qor

#endif//QOR_PP_H_PLATFORM_FILESYSTEM_FILE_INTERFACE
