// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "src/qor/injection/typeidentity.h"
#include "src/qor/objectcontext/anyobject.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/reference/newref.h"
#include "filesystem.h"
#include "file.h"
#include "folder.h"

#include <unistd.h>
#include <fcntl.h>

namespace qor{
    bool qor_pp_module_interface(QOR_LINUXFILESYSTEM) ImplementsIFileSystem() //Implement this trivial function so the linker will pull in this library to fulfil the ImplementsIFileSystem requirement. 
    {
        return true;
    }
}//qor

namespace qor{ namespace nslinux{ 

    void FileSystem::Setup()
    {
    }

    void FileSystem::Shutdown()
    {
        SyncToSystem();
    }

    void FileSystem::SyncToSystem() const
    {
        sync();
    }

    ref_of<system::File>::type FileSystem::Create(const system::FileIndex& index, int withFlags) const
    {
        int flags = withFlags |= WithFlags::CreateNew | WithFlags::Truncate;
        auto ref = Open(index, OpenFor::WriteOnly, flags);
        ref->ChangeMode(Owner_Read | Owner_Write);
        return ref;
    }

    ref_of<system::File>::type FileSystem::Open(const system::FileIndex& index, int openFor, int withFlags) const
    {        
        return new_ref<File>(index, openFor, withFlags).template AsRef<system::File>();
    }

    bool FileSystem::Move(const system::FileIndex& srcIndex, const system::FileIndex& destIndex) const
    {
        if(destIndex.IsDirectory())
        {
            //MoveToFolder(srcIndex, destIndex);
        }
        else if( !srcIndex.IsDirectory())
        {
            if(srcIndex.GetPath().IsSamePath(destIndex.GetPath()))
            {
                return rename(srcIndex.ToString().c_str(), destIndex.ToString().c_str()) == 0 ? true : false;
            }
            else
            {
                //MoveFileToFile(srcIndex, destIndex);
                //remove(destIndex.ToString().c_str());
            }
        }
        
        //Can't move a folder to a file
        return false;
    }

    bool FileSystem::Rename(const system::FileIndex& srcIndex, const system::FileIndex& destIndex) const
    {
        return rename(srcIndex.ToString().c_str(), destIndex.ToString().c_str()) == 0 ? true : false;
    }

    ////int openat(int fd, index.ToString().c_str(), int oflag, ...);
}}//qor::nslinux