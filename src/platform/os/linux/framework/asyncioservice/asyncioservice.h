// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_OS_LINUX_FRAMEWORK_ASYNCIOSERVICE
#define QOR_PP_H_OS_LINUX_FRAMEWORK_ASYNCIOSERVICE

#include <vector>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <poll.h>
#include <coroutine>
#include "src/framework/asyncioservice/asyncioservice.h"
#include "iouringservice/iouringservice.h"
#include "iouringservice/readop.h"

qor_pp_module_will_provide(QOR_LINUXASYNCIOSERVICE, AsyncIOService)

namespace qor{ namespace nslinux{ namespace framework{

    class qor_pp_module_interface(QOR_LINUXASYNCIOSERVICE) AsyncIOService : public qor::framework::AsyncIOService
    {
    public:
        
        AsyncIOService() = default;
        virtual ~AsyncIOService() noexcept = default;

        virtual qor::framework::IOTask Read(int fd, byte* buffer, size_t len)
        {
            int status = co_await ReadOperation(m_IOUringService.Ring(), fd, buffer, len);
            qor::framework::AsyncIOResult result{.status_code = status, .file = ""};
            co_return result;
        }

    protected:

        IOUringService m_IOUringService;

        virtual bool TryProcessOneEvent(bool waitForEvent);

    private:
        
    };

}}}//qor::nslinux::framework

#endif//QOR_PP_H_OS_LINUX_FRAMEWORK_ASYNCIOSERVICE
