// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "iouringservice.h"
#include "src/platform/os/linux/framework/asyncioservice/asyncioservice.h"
#include "src/qor/error/error.h"

namespace qor{ namespace nslinux{ namespace framework{

int IOUringService::ConsumeCQEntries() 
{
    int processed{0};
    io_uring_cqe *cqe;
    unsigned head;
    io_uring_for_each_cqe(uring.get(), head, cqe) 
    {
        auto *request_data = static_cast<qor::framework::AsyncIORequest*>(io_uring_cqe_get_data(cqe));
        request_data->statusCode = cqe->res;
        request_data->handle.resume();
        ++processed;
    }
    io_uring_cq_advance(uring.get(), processed);
    return processed;
}

int IOUringService::TryProcessEvents(unsigned short scale)
{
    //TODO: Maybe use IORING_SETUP_SINGLE_ISSUER|IORING_SETUP_DEFER_TASKRUN when setting up the ring 
    io_uring_cqe *temp;
    __kernel_timespec ts{ .tv_sec = 0, .tv_nsec = 1000000 / (1 << scale) };
    sigset_t sigmask;
    memset(&sigmask, sizeof(sigset_t), 0);
    int result = io_uring_submit_and_wait_timeout(uring.get(), &temp, (1 << scale), &ts, &sigmask);
    
    if(result > 0) 
    {
        return uring.ConsumeCQEntries(temp, result);        
    }
    else
    {
        if(result == 0 || result == -ETIME || result == -EINTR)
        {
            return 0;
        }
        serious("IOUring error");
    }
    return result;
}

}}}//qor::nslinux::framework