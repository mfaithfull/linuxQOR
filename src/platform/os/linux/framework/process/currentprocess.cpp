// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <pthread.h>
#include <sched.h>
#include <sys/resource.h>
#include <unistd.h>
#include <sys/syscall.h>
#include <sys/sysinfo.h>
#include <errno.h>
#include <optional>
#include <vector>
#include <format>
#include "src/qor/error/error.h"
#include "currentprocess.h"

namespace qor {
    bool qor_pp_module_interface(QOR_LINUXPROCESS) ImplementsICurrentProcess() //Implement this trivial function so the linker will pull in this library to fulfil the ImplementsIFileSystem requirement. 
    {
        return true;
    }
}

namespace qor{ namespace nslinux{ namespace framework{

    std::optional<std::vector<bool>> CurrentProcess::GetAffinity()
    {
        cpu_set_t cpu_set;
        CPU_ZERO(&cpu_set);
        if (sched_getaffinity(getpid(), sizeof(cpu_set_t), &cpu_set) != 0)
        {
            return std::nullopt;
        }
        const int num_cpus = get_nprocs();
        if (num_cpus < 1)
        {
            return std::nullopt;
        }
        std::vector<bool> affinity(static_cast<std::size_t>(num_cpus));
        for (std::size_t i = 0; i < affinity.size(); ++i)
        {
            affinity[i] = CPU_ISSET(i, &cpu_set);
        }
        return affinity;
    }

    bool CurrentProcess::SetAffinity(const std::vector<bool>& affinity)
    {
        cpu_set_t cpu_set;
        CPU_ZERO(&cpu_set);
        for (std::size_t i = 0; i < std::min<std::size_t>(affinity.size(), CPU_SETSIZE); ++i)
        {
            if (affinity[i])
            {
                CPU_SET(i, &cpu_set);
            }
        }
        return sched_setaffinity(getpid(), sizeof(cpu_set_t), &cpu_set) == 0;
    }

    std::optional<qor::framework::ICurrentProcess::Priority> CurrentProcess::GetPriority()
    {
        const int nice_val = getpriority(PRIO_PROCESS, static_cast<id_t>(getpid()));
        switch (nice_val)
        {
        case static_cast<int>(PRIO_MAX - 2):
            return qor::framework::ICurrentProcess::Priority::idle;
        case static_cast<int>(PRIO_MAX / 2):
            return qor::framework::ICurrentProcess::Priority::below_normal;
        case 0:
            return qor::framework::ICurrentProcess::Priority::normal;
        case static_cast<int>(PRIO_MIN / 3):
            return qor::framework::ICurrentProcess::Priority::above_normal;
        case static_cast<int>(PRIO_MIN * 2 / 3):
            return qor::framework::ICurrentProcess::Priority::high;
        case static_cast<int>(PRIO_MIN):
            return qor::framework::ICurrentProcess::Priority::realtime;
        default:
            return std::nullopt;
        }
    }

    bool CurrentProcess::SetPriority(const qor::framework::ICurrentProcess::Priority priority)
    {
        int ipriority = 0;
        switch(priority)
        {
            case qor::framework::ICurrentProcess::Priority::idle:
            ipriority = static_cast<int>(PRIO_MAX - 2);
            break;
            case qor::framework::ICurrentProcess::Priority::below_normal:
            ipriority = static_cast<int>(PRIO_MAX / 2);
            break;
            case qor::framework::ICurrentProcess::Priority::normal:
            ipriority = 0;
            break;
            case qor::framework::ICurrentProcess::Priority::above_normal:
            ipriority = static_cast<int>(PRIO_MIN / 3);
            break;
            case qor::framework::ICurrentProcess::Priority::high:
            ipriority = static_cast<int>(PRIO_MIN * 2 / 3 );
            break;
            case qor::framework::ICurrentProcess::Priority::realtime:
            ipriority = static_cast<int>(PRIO_MIN);
            break;
        }
        bool bResult = setpriority(PRIO_PROCESS, static_cast<id_t>(getpid()), static_cast<int>(ipriority)) == 0;
        if(!bResult)
        {
            int e = errno;
            continuable(std::format("Failed to set process priority for process {} to {}\n", getpid(), ipriority));
        }
        return bResult;
    }

}}}//qor::nslinux::framework
