// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_OS_LINUX_SYSTEM_FILESYSTEM_IOURING
#define QOR_PP_H_OS_LINUX_SYSTEM_FILESYSTEM_IOURING

#include "src/platform/compiler/compiler.h"
#include <liburing.h>
#include <functional>

namespace qor{ namespace nslinux{ 

    class qor_pp_module_interface(QOR_LINUXFILESYSTEM) IOUring
    {
    public:

        class CQEIterator;

        class CQE
        {
            friend class CQEIterator;
            friend class IOUring;

        public:
            
            CQE() : m_(nullptr) {}
            
            CQE(io_uring_cqe* _) : m_(_) {}

            void* GetData();

            signed int GetResult()
            {
                return m_->res;
            }

        private:
            io_uring_cqe* m_;
        };

        class CQEIterator
        {
        public:

            CQEIterator(io_uring_cqe_iter _) : m_(_) {}
            bool Next(CQE& cqe);
            
        private:

            io_uring_cqe_iter m_;
        };

        class SQE
        {
        public:

            SQE(io_uring_sqe* _) : m_(_) {}

            void PrepareRead(int fd, byte* buffer, size_t byteCount, off_t offset);
            void PrepareReadV(int fd,const iovec* iovecs, unsigned int nr_vecs, off_t offset);
            void PrepareWrite(int fd, const byte* buffer, size_t byteCount, off_t offset);
            void PrepareWriteV(int fd, const iovec* iovecs, unsigned int nr_vecs, off_t offset);
            void SetData(void* data);

        private:
            io_uring_sqe* m_;
        };

        explicit IOUring(size_t queue_size);
        IOUring(const IOUring &) = delete;
        IOUring &operator=(const IOUring &) = delete;
        IOUring(IOUring &&) = delete;
        IOUring &operator=(IOUring &&) = delete;
        ~IOUring();
                
        void Submit();
        SQE GetSQE();
        CQEIterator CQEIteratorInit();
        void CQAdvance(unsigned int nr);
        int Peek(IOUring::CQE& temp);
        unsigned int ForEachCQE( std::function<void(IOUring::CQE&)> f);
        int ConsumeCQEntries();
        int ConsumeCQEntriesNonBlocking();

    private:

        struct io_uring m_ring;
    };

}}//qor::nslinux

#endif//QOR_PP_H_OS_LINUX_SYSTEM_FILESYSTEM_IOURING
