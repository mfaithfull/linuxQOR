// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <sys/stat.h>
#include "filestat.h"

namespace qor{
    bool qor_pp_module_interface(QOR_LINUXFILESYSTEM) ImplementsIFileStat() //Implement this trivial function so the linker will pull in this library to fulfil the ImplementsIFileStat requirement. 
    {
        return true;
    }
}//qor

namespace qor{ namespace nslinux{ 
    
    FileStat::FileStat() : IFileStat(), m_IsValid(false)
    {
    }

    FileStat::FileStat(platform::FileIndex& fileindex) : IFileStat(fileindex)
    {
        m_IsValid = false;
        int statresult = ::stat(fileindex.GetPath().ToString().c_str(), &m_st);
        if(statresult != -1)
        {
            m_IsValid = true;
        }
    }

    bool FileStat::IsValid()
    {
        return m_IsValid;
    }

    bool FileStat::IsFile()
    {
        return IsValid() && S_ISREG(m_st.st_mode);
    }
    
    bool FileStat::IsDir()
    {
        return IsValid() && S_ISDIR(m_st.st_mode);
    }

    bool FileStat::IsCharacter()
    {
        return IsValid() && S_ISCHR(m_st.st_mode);
    }

    bool FileStat::IsBlock()
    {
        return IsValid()  && S_ISBLK(m_st.st_mode);
    }


}}//qor::nslinux