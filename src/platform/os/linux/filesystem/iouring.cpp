// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <stdexcept>

#include "iouring.h"
#include "iouringasyncrequest.h"

namespace qor{ namespace nslinux{ 

    IOUring::IOUring(size_t queue_size) 
    {
        if (auto s = io_uring_queue_init(queue_size, &m_ring, 0); s < 0) 
        {
            throw std::runtime_error("error: " + std::to_string(s));
        }
    }

    IOUring::SQE IOUring::GetSQE()
    {
        IOUring::SQE sqe( io_uring_get_sqe(&m_ring));
        return sqe;
    }

    IOUring::CQEIterator IOUring::CQEIteratorInit()
    {
        IOUring::CQEIterator cqe_it(io_uring_cqe_iter_init(&m_ring));
        return cqe_it;
    }

    void IOUring::CQAdvance(unsigned int nr)
    {
        io_uring_cq_advance(&m_ring, nr);
    }

    int IOUring::Peek(IOUring::CQE& temp)
    {
        return io_uring_peek_cqe(&m_ring, &temp.m_);
    }

    unsigned int IOUring::ForEachCQE( std::function<void(IOUring::CQE&)> f)
    {
        unsigned int processed{0};
        CQE cqe;
        auto it = CQEIteratorInit();
        while(it.Next(cqe))
        {
            f(cqe);
            ++processed;
        };
        CQAdvance(processed);
        return processed;
    }
    
    void IOUring::Submit()
    {
        io_uring_submit(&m_ring);
    }

    IOUring::~IOUring() 
    { 
        io_uring_queue_exit(&m_ring); 
    }


    void IOUring::SQE::PrepareRead(int fd, byte* buffer, size_t byteCount, off_t offset)
    {
        io_uring_prep_read(m_, fd, buffer, byteCount, offset);
    }

    void IOUring::SQE::PrepareReadV(int fd,const iovec* iovecs, unsigned int nr_vecs, off_t offset )
    {
        io_uring_prep_readv(m_, fd, iovecs, nr_vecs, offset);
    }

    void IOUring::SQE::PrepareWrite(int fd, const byte* buffer, size_t byteCount, off_t offset)
    {
        io_uring_prep_write(m_, fd, buffer, byteCount, offset);
    }

    void IOUring::SQE::PrepareWriteV(int fd, const iovec* iovecs, unsigned int nr_vecs, off_t offset)
    {
        io_uring_prep_writev(m_, fd, iovecs, nr_vecs, offset);
    }

    void IOUring::SQE::SetData(void* data)
    {
        io_uring_sqe_set_data(m_, data);
    }

    bool IOUring::CQEIterator::Next(CQE& cqe)
    {
        return io_uring_cqe_iter_next(&m_, &cqe.m_);
    }

    void* IOUring::CQE::GetData()
    {
        return io_uring_cqe_get_data(m_);
    }

    int IOUring::ConsumeCQEntries()
    {
        return ForEachCQE( [](IOUring::CQE& cqe){
            auto *request_data = static_cast<IOUringAsyncRequest*>(cqe.GetData());
            request_data->statusCode = cqe.GetResult();
            request_data->handle.resume();
        });
    }
    
    int IOUring::ConsumeCQEntriesNonBlocking()
    {
        IOUring::CQE temp;
        if (Peek(temp) == 0) {
          return ConsumeCQEntries();
        }
        return 0;
    }    

}}//qor::nslinux

