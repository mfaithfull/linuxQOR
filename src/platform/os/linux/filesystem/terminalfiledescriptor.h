// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_OS_LINUX_SYSTEM_FILESYSTEM_TERMFILEDESCRIPTOR
#define QOR_PP_H_OS_LINUX_SYSTEM_FILESYSTEM_TERMFILEDESCRIPTOR

namespace qor{ namespace nslinux{ 

    class qor_pp_module_interface(QOR_LINUXFILESYSTEM) TerminalFileDescriptor : public FileDescriptor
    {
    public:

        TerminalFileDescriptor(int fd) : FileDescriptor(fd)
        {
        }

        TerminalFileDescriptor(const FileDescriptor& src) : FileDescriptor(src)
        {
        }

        ~TerminalFileDescriptor() = default;

        int TerminalControlSendBreak(int duration)
        {
            return ::tcsendbreak (m_fd, duration);
        }

        int TerminalControlDrain()
        {
            return ::tcdrain(m_fd);
        }

        int TerminalControlFlush(int queue)
        {
            return ::tcflush(m_fd, queue);
        }

        int TerminalControlFlow(int action)
        {
            return ::tcflow(m_fd, action);
        }

        int TerminalControlGetAttribute(struct termios *termiosp)
        {
            return ::tcgetattr(m_fd, termiosp);
        }

        int TerminalControlSetAttribute(int when, const struct termios *termiosp)
        {
            return ::tcsetattr(m_fd, when, termiosp);
        }

        char* PTSName()
        {
            return ::ptsname(m_fd);
        }

        int PTSName_R(char *buf, size_t len)
        {
            return ::ptsname_r(m_fd, buf, len);
        }

        pid_t TerminalControlGetGroup()
        {
            return ::tcgetpgrp(m_fd);
        }

        int TerminalControlSetGroup(pid_t pgid)
        {
            return ::tcsetpgrp(m_fd, pgid);
        }

        pid_t TerminalControlGetSid()
        {
            return ::tcgetsid(m_fd);
        }

        char* TTYName()
        {
            return ::ttyname(m_fd);
        }

        int TTYName_R(char *buf, size_t len)
        {
            return :: ttyname_r(m_fd, buf, len);
        }

        int LoginTTY()
        {
            return ::login_tty(m_fd);
        }

        int GrantPT()
        {
            return ::grantpt(m_fd);
        }

        int UnlockPT()
        {
            return ::unlockpt(m_fd);
        }
    };
}}

#endif//QOR_PP_H_OS_LINUX_SYSTEM_FILESYSTEM_TERMFILEDESCRIPTOR
