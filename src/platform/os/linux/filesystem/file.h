// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_OS_LINUX_SYSTEM_FILESYSTEM_FILE
#define QOR_PP_H_OS_LINUX_SYSTEM_FILESYSTEM_FILE

#include "src/platform/filesystem/file/file.h"
#include "src/platform/filesystem/fileindex.h"
#include "src/platform/filesystem/path.h"

//Declaration must match the one in src/system/filesystem/ifile.h
namespace qor{ bool qor_pp_module_interface(QOR_LINUXFILESYSTEM) ImplementsIFile(); }

//All types on this interface must be portable
namespace qor{ namespace nslinux{ 

    class qor_pp_module_interface(QOR_LINUXFILESYSTEM) File : public platform::File
    {
    public:
        //anything we do with an fd that takes effect within the context of the file rather than the owning filesystem

        File();
        File(const File& src);
        File(const platform::Path& path, const std::string& fileName, int openFor, int withFlags) : File(platform::FileIndex(path,fileName),openFor,withFlags) {}
        File(const platform::FileIndex& direntry, int openFor, int withFlags);
        File(int fd);
        ~File();

        virtual int ChangeMode(unsigned int mode);
        int ChangeAccess(unsigned int mode);
        int AdviseOnUsage(off_t offset, off_t length, int advise);
        ref_of<platform::IFile>::type Duplicate();
        int GetDescriptor() const;
        int GetDescriptorMode();
        int ChangeDescriptorMode(int flags);
        int GetOperatingMode();
        int ChangeOperatingMode(int flags);
        int ReserveSpace(off_t offset, off_t length);
        int Truncate(off_t length);
        int SyncToSystem();
        uint64_t GetPosition();
        off_t SetPosition(off_t offset, int whence);
        int AsyncRead(byte* buffer, size_t byteCount, off_t offset);
        int AsyncWrite(byte* buffer, size_t byteCount, off_t offset);
        virtual int64_t Read(byte* buffer, size_t byteCount, int64_t offset = -1);
        virtual int64_t Write(byte* buffer, size_t byteCount, int64_t offset = -1);
        
    private:
        
        static int64_t Validate_write_Result(int64_t result);
        static int64_t Validate_read_Result(int64_t result);
        static off_t Validate_lseek_Result(off_t result);
        static uint64_t Validate_lseek64_Result(uint64_t result);
        static int Validate_ftruncate_Result(int result);
        static int Validate_posix_fallocate_Result(int result);
        static int Validate_fcntl_Result(int result);
        static int Validate_posix_fadvise_Result(int result);
        static int Validate_fchmod_Result(int result);
        static int Validate_fsync_Result(int result);
        static void Check_fsync_Result(int result);
        static void Check_close_Result(int result);
        static void ErrorOnOpen(int err);

        int m_fd;
    };
}}//qor::nslinux

#endif//QOR_PP_H_OS_LINUX_SYSTEM_FILESYSTEM_FILE

/*
        int ChangeOwner()
        {
            //int fchown(int fildes, uid_t owner, gid_t group);
        }

        GetSIGURG process target for sockets only F_GETOWN F_GETOWN_EX
        SetSIGURG process target for sockets only F_SETOWN F_SETOWN_EX

        GetLock F_GETLK F_OFD_GETLK
        SetLock F_SETLK F_SETLKW F_OFD_SETLK F_OFD_SETLKW

        SetAccessTime 
        SetModificationTime
        //int futimens(int fd, const struct timespec times[2]);
        //int utimensat(int fd, const char *path, const struct timespec times[2],int flag);
        
        void GetFileSystemInformation()
        {
            //int fstatvfs(int fildes, struct statvfs *buf);
        }

        void GetPathConf()
        {
            //long fpathconf(int fildes, int name);
        }

        ref_of<system:::Folder>::type OpenFolder()
        {
            //DIR *fdopendir(int fd);
        }

        void Access()
        {
            //int faccessat(int fd, const char *path, int amode, int flag);
        }
        */