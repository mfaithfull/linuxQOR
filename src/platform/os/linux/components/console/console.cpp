// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <iostream>
#include <termios.h>
#include <unistd.h>

#include "console.h"
#include "src/qor/error/error.h"

namespace qor {
	bool qor_pp_module_interface(QOR_LINCONSOLE) ImplementsIConsole() //Implement this trivial function so the linker will pull in this library to fulfil the ImplementsIConsole requirement. 
	{
		return true;
	}
}//qor

namespace qor { namespace nsLinux {

	Console::Console()
	{		
		int tcgresult = tcgetattr(STDIN_FILENO, &m_termiosBackup);
		CheckCLibResult(tcgresult);
		m_termiosBackup.c_lflag &= (~ICANON);
		int tcsresult = tcsetattr(STDIN_FILENO, TCSAFLUSH, &m_termiosBackup);		
		CheckCLibResult(tcsresult);
	}

	Console::~Console()
	{
		//restore cooked/raw mode
		int tcsresult = tcsetattr(STDIN_FILENO, TCSANOW, &m_termiosBackup);
		CheckCLibResult(tcsresult);
	}

	string_t Console::ReadLine()
	{
        string_t result;
        char_t c = 0;
        do
        {
            std::cin.read(&c, 1);
			if (!std::cin.good()) 
			{
				serious("std::cin bad status.");
				break;
			}
			else
			{
	            result.push_back(c);
			}
        } while (c != 0x0A);
                
		if (!result.empty() && result.back() == 0x0A) 
		{
			result.resize(result.size() - 1);
		}
		return result;
	}

	char_t Console::ReadChar()
	{
        char_t c = 0;
        std::cin.get(c);
		if (!std::cin.good())
		{
			serious("std::cin status bad.");
		}
		return c;
	}

	void Console::WriteChar(char_t c)
	{
        std::cout.write(&c, 1);
		if(!std::cout.good())
		{
			serious("std::cout status bad.");
		}
	}

	void Console::WriteLine(string_t& output)
	{
        std::cout.write(output.data(), output.size());
		if (!std::cout.good()) 
		{
			serious("std::cout status bad.");
		}
        std::cout.write("\n", 1);
		if (!std::cout.good()) 
		{
			serious("std::cout status bad.");
		}
		else
		{
			std::cout.flush();
		}
	}

}}//qor::nsLinux
