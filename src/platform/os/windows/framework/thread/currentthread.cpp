// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <optional>

#include "src/qor/injection/typeidentity.h"
#include "src/qor/objectcontext/anyobject.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/reference/newref.h"
#include "currentthread.h"

namespace qor{ 
    bool qor_pp_module_interface(QOR_WINDOWSTHREAD) ImplementsICurrentThread() //Implement this trivial function so the linker will pull in this library to fulfil the ImplementsICurrentThread requirement. 
    {
        return true;
    }
}

namespace qor{ namespace nsWindows{ namespace framework{

    bool CurrentThread::SetPriority(ICurrentThread::Priority priority)
    {
        return false;
    }

    std::optional< qor::framework::ICurrentThread::Priority > CurrentThread::GetPriority() const
    {
        return std::nullopt;
    }

    bool CurrentThread::SetName(const std::string& name)
    {
        return false;
    }

    std::optional<std::string> CurrentThread::GetName()
    {
        return std::nullopt;
    }

    bool CurrentThread::SetAffinity(const std::vector<bool>& affinity)
    {
        return false;
    }

    std::optional<std::vector<bool>> CurrentThread::GetAffinity()
    {
        return std::nullopt;
    }

}}}//qor::nsWindows::framework
