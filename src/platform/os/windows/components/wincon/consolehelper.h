// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_OS_WINDOWS_COMPONENTS_CONSOLEHELPER
#define QOR_PP_H_OS_WINDOWS_COMPONENTS_CONSOLEHELPER

#include <string>

#include "src/platform/os/windows/common/handles/handle.h"

//#include "src/components/console/iconsole.h"

//This is edge of the nsWindows namespace. No Windows specific types are allowed here.
namespace qor { namespace nsWindows {

	struct Coord
	{
		short x;
		short y;
	};

	struct SmallRect
	{
		short left;
		short top;
		short right;
		short bottom;
	};

	struct ConsoleSelectionInfo
	{
		unsigned long flags;
		Coord selectionAnchor;
		SmallRect srSelection;
	};

	struct ConsoleHistoryInfo
	{
		unsigned int size;
		unsigned int historyBufferSize;
		unsigned int numberOfHistoryBuffers;
		unsigned long flags;
	};

	typedef int (qor_pp_compiler_stdcallconvention* CtrlHandlerCallback)(unsigned long ctrlType);

	class qor_pp_module_interface(QOR_WINCONSOLE) ConsoleHelper
	{
	public:

		enum StdHandles
		{
			hStdIn = 0,
			hStdOut,
			hStdErr
		};

		ConsoleHelper();
		~ConsoleHelper();

		bool AddAlias(std::string& source, std::string& target, std::string& exeName);
		bool Alloc(void);
		bool Attach(unsigned long processId);
		bool Free(void);
		bool GenerateCtrlEvent(unsigned long ctrlEvent, unsigned long processGroupId);
		unsigned long GetAlias(std::string& source, std::string& target, std::string& exeName);
		unsigned long GetAliases(std::string& aliases, std::string& exeName);
		unsigned long GetAliasesLength(std::string& exeName);
		unsigned long GetAliasExes(std::string& nameBuffer);
		unsigned long GetAliasExesLength();
		//CCodePage GetCP(void);
		bool GetDisplayMode(unsigned long& modeFlags);
		bool GetHistoryInfo(ConsoleHistoryInfo& consoleHistoryInfo);
		unsigned long GetOriginalTitle(std::string& consoleTitle);
		//CCodePage GetOutputCP(void);
		//unsigned long GetProcessList(std::vector< unsigned long >& processList);
		//bool GetSelectionInfo(ConsoleSelectionInfo& consoleSelectionInfo);
		unsigned long GetTitle(std::string& consoleTitle);
		//COSWindow::ref_type GetWindow();
		unsigned long GetNumberOfMouseButtons();
		Handle GetStdHandle(StdHandles stdHandle);
		//bool SetCP(const CCodePage& codePage);
		bool SetCtrlHandler(CtrlHandlerCallback handlerRoutine, bool add);
		//bool SetHistoryInfo(const ConsoleHistoryInfo& consoleHistoryInfo);
		//bool SetOutputCP(const CCodePage& codePage);
		bool SetTitle(std::string& consoleTitle);
		bool SetStdHandle(StdHandles stdHandle, Handle & hHandle);

	};

}}//qor::nsWindows

#endif//QOR_PP_H_OS_WINDOWS_COMPONENTS_CONSOLEHELPER
