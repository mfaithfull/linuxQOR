// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_OS_WINDOWS_COMPONENTS_CONSOLE
#define QOR_PP_H_OS_WINDOWS_COMPONENTS_CONSOLE

#include "src/components/framework/console/iconsole.h"
#include "consolehelper.h"
#include "src/platform/os/windows/system/filesystem/file.h"

namespace qor
{
	bool qor_pp_module_interface(QOR_WINCONSOLE) ImplementsIConsole();
}

namespace qor { namespace nsWindows {

	class qor_pp_module_interface(QOR_WINCONSOLE) Console : public components::IConsole
	{
	public:

		Console();

		~Console()
		{
			if (m_allocated)
			{
				m_helper.Free();
			}
		}

		void SetOut(int fileHandle)
		{
			if (m_outFile != nullptr)
			{
				fclose(reinterpret_cast<FILE*>(m_outFile));
				m_outFile = nullptr;
			}
			m_outFile = _fdopen(fileHandle, "r+");
		}

		void SetIn(int fileHandle)
		{
			if (m_inFile != nullptr)
			{
				fclose(reinterpret_cast<FILE*>(m_inFile));
			}
			m_inFile = _fdopen(fileHandle, "r+");
			m_redirected = true;
		}

		void SetErr(int fileHandle)
		{
			if (m_errFile != nullptr)
			{
				fclose(reinterpret_cast<FILE*>(m_errFile));
			}
			m_errFile = _fdopen(fileHandle, "r+");
		}

		void ResetOut()
		{
			//close any existing output stream
			if (m_outFile != nullptr)
			{
				fclose(reinterpret_cast<FILE*>(m_outFile));
				m_outFile = nullptr;
			}
			//open default windows stdout handle
			m_outFile = _fsopen("CONOUT$", "r+", _SH_DENYNO);
		}

		void ResetIn()
		{
			//close any existing input stream
			if (m_inFile != nullptr)
			{
				fclose(reinterpret_cast<FILE*>(m_inFile));
				m_inFile = nullptr;
			}
			//open default windows stdin handle
			m_inFile = _fsopen("CONIN$", "r+", _SH_DENYNO);
		}

		void ResetErr()
		{
			//close any existing error stream
			if (m_errFile != nullptr)
			{
				fclose(reinterpret_cast<FILE*>(m_errFile));
				m_errFile = nullptr;
			}
			m_errFile = _fsopen("CONOUT$", "r+", _SH_DENYNO);
		}

		virtual void WriteLine(string_t& output);
		virtual string_t ReadLine();
		virtual char_t ReadChar();
		virtual void WriteChar(char_t c);

	private:

		bool m_redirected;
		bool m_allocated;
		ConsoleHelper m_helper;
		void* m_outFile;
		void* m_inFile;
		void* m_errFile;
		
		/*WriteLine(String, Object, Object)	
Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.

WriteLine(String)	
Writes the specified string value, followed by the current line terminator, to the standard output stream.

WriteLine(Char[], Int32, Int32)	
Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.

WriteLine(String, ReadOnlySpan<Object>)	
Writes the text representation of the specified span of objects, followed by the current line terminator, to the standard output stream using the specified format information.

WriteLine(String, Object[])	
Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.

WriteLine(String, Object)	
Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.

WriteLine(UInt64)	
Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.

WriteLine(UInt32)	
Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.

WriteLine(Single)	
Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.

WriteLine(Double)	
Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.

WriteLine(Object)	
Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.

WriteLine(Int64)	
Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.

WriteLine(Int32)	
Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.

WriteLine(Decimal)	
Writes the text representation of the specified Decimal value, followed by the current line terminator, to the standard output stream.

WriteLine(Char[])	
Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.

WriteLine(Char)	
Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.

WriteLine(Boolean)	
Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.

WriteLine()	
Writes the current line terminator to the standard output stream.

WriteLine(String, Object, Object, Object)	
Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.*/
	};
}}//qor::nsWindows

#endif//QOR_PP_H_OS_WINDOWS_COMPONENTS_CONSOLE
