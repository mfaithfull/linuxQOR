// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "src/qor/module/module.h"
#include "src/qor/interception/functioncontext.h"
#include "src/qor/error/error.h"

//Windows specific headers must be last to prevent contaminating generic headers with Windows specific types and definitions
#include "kernel32.h" //kernel32.h must be the first windows header as it's the primary inclusion point for windows.h
#include "../common/wqreturncheck.h"
#include "../common/wqlibrary.h"

namespace qor { namespace winapi {

		BOOL Kernel32::Beep(DWORD dwFreq, DWORD dwDuration)
		{
			qor_pp_fcontext;
			CheckReturn< BOOL, BoolCheck >::TType bResult = ::Beep(dwFreq, dwDuration);
			return bResult;
		}

		USHORT Kernel32::RtlCaptureStackBackTrace(ULONG FramesToSkip, ULONG FramesToCapture, void** BackTrace, PULONG BackTraceHash)
		{
			qor_pp_fcontext;
			USHORT usResult = 0;
#ifdef	__MINGW32__
			continuable(_TXT("Windows API error:"));//<error::CAPINotImplementedInMinGW>("RtlCaptureStackBackTrace");
#else
#	if ( _WIN32_WINNT > 0x0501 )
			usResult = ::CaptureStackBackTrace(FramesToSkip, FramesToCapture, BackTrace, BackTraceHash);
#	else
			QOR_PP_UNREF4(BackTraceHash, BackTrace, FramesToCapture, FramesToSkip);
			continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>("RtlCaptureStackBackTrace", "Windows XP");
#	endif
#endif
			return usResult;
		}

		void Kernel32::FatalAppExit(UINT uAction, LPCTSTR lpMessageText)
		{
			qor_pp_fcontext;
			::FatalAppExit(uAction, lpMessageText);
		}

		DWORD Kernel32::FormatMessage(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPTSTR lpBuffer, DWORD nSize, va_list* Arguments)
		{
			qor_pp_fcontext;
			CheckReturn< DWORD, CheckNonZero< DWORD> >::TType dwResult = ::FormatMessage(dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, Arguments);
			return dwResult;
		}

		UINT Kernel32::GetErrorMode(void)
		{
			qor_pp_fcontext;
#ifdef	__MINGW32__
			continuable(_TXT("Windows API error:"));//<error::CAPINotImplementedInMinGW>("GetErrorMode");
			return 0;
#else
#	if ( _WIN32_WINNT >= 0x0600 )
			return ::GetErrorMode();
#	else
			continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>("GetErrorMode", "Windows Vista");
			return 0;
#	endif
#endif
		}

		DWORD Kernel32::GetLastError(void)
		{
			return ::GetLastError();
		}

		//Client Requires Windows XP 64-Bit Edition Version 2003.
		//Server Requires 64-bit edition of Windows Server 2003.
		void* Kernel32::RtlLookupFunctionEntry(ULONGLONG ControlPC, PULONGLONG ImageBase, PUNWIND_HISTORY_TABLE TargetGp)
		{
			qor_pp_fcontext;
			void* pResult = 0;
#	if ( _WIN32_WINNT >= 0x0501 && defined( _WIN64 ) )
			pResult = ::RtlLookupFunctionEntry(ControlPC, ImageBase, TargetGp);
#	else
			QOR_PP_UNREF3(TargetGp, ImageBase, ControlPC);
			continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>("RtlLookupFunctionEntry", "Windows XP 64 bit edition");
#	endif
			return pResult;
		}

		//Client Requires Windows XP 64-Bit Edition Version 2003.
		//Server Requires 64-bit edition of Windows Server 2003.
		void* Kernel32::RtlPcToFileHeader(void* PcValue, void** BaseOfImage)
		{
			qor_pp_fcontext;
			void* pResult = 0;
#	if ( _WIN32_WINNT >= 0x0502 && defined( _WIN64 ) )
			pResult = ::RtlPcToFileHeader(PcValue, BaseOfImage);
#	else
			QOR_PP_UNREF2(BaseOfImage, PcValue);
			continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>("RtlPcToFileHeader", "Windows Server 2003 64-Bit edition ");
#	endif
			return pResult;
		}

		void Kernel32::RtlUnwind(void* TargetFrame, void* TargetIp, ::PEXCEPTION_RECORD ExceptionRecord, void* ReturnValue)
		{
#ifndef	__MINGW32__ //No exception stuff with MinGW yet
			qor_pp_useswinapi(kernel32,RtlUnwind);
			Library::Call< void*, void*, void*, ::PEXCEPTION_RECORD, void* >(pFunc, TargetFrame, TargetIp, ExceptionRecord, ReturnValue);
#endif
		}

		UINT Kernel32::SetErrorMode(UINT uMode)
		{
			qor_pp_fcontext;
			return ::SetErrorMode(uMode);
		}

		void Kernel32::SetLastError(DWORD dwErrCode)
		{
			qor_pp_fcontext;
			::SetLastError(dwErrCode);
		}

		HRESULT Kernel32::WerGetFlags(HANDLE hProcess, PDWORD pdwFlags)
		{
			qor_pp_fcontext;
			CheckReturn< HRESULT, LongSuccessCheck >::TType hr;
#ifdef	__MINGW32__
			continuable(_TXT("Windows API error:"));//<error::CAPINotImplementedInMinGW>("WerGetFlags");
#else
#	if ( _WIN32_WINNT >= 0x0600 && NTDDI_VERSION >= NTDDI_VISTASP1 )
			hr = ::WerGetFlags(hProcess, pdwFlags);
#	else
			QOR_PP_UNREF2(pdwFlags, hProcess);
			continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>("WerGetFlags", "Windows Vista Service Pack 1");
#	endif
#endif
			return hr;
		}

		HRESULT Kernel32::WerRegisterFile(PCWSTR pwzFile, ::WER_REGISTER_FILE_TYPE regFileType, DWORD dwFlags)
		{
			qor_pp_fcontext;
			CheckReturn< HRESULT, LongSuccessCheck >::TType hr;
#ifdef	__MINGW32__
			continuable(_TXT("Windows API error:"));//<error::CAPINotImplementedInMinGW>("WerRegisterFile");
#else
#	if ( _WIN32_WINNT >= 0x0600 && NTDDI_VERSION >= NTDDI_VISTASP1 )
			hr = ::WerRegisterFile(pwzFile, regFileType, dwFlags);
#	else
			QOR_PP_UNREF3(dwFlags, regFileType, pwzFile);
			continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>("WerRegisterFile", "Windows Vista Service Pack 1");
#	endif
#endif
			return hr;
		}

		HRESULT Kernel32::WerRegisterMemoryBlock(void* pvAddress, DWORD dwSize)
		{
			qor_pp_fcontext;
			CheckReturn< HRESULT, LongSuccessCheck >::TType hr;
#ifdef	__MINGW32__
			continuable(_TXT("Windows API error:"));//<error::CAPINotImplementedInMinGW>("WerRegisterMemoryBlock");
#else
#	if ( _WIN32_WINNT >= 0x0600 && NTDDI_VERSION >= NTDDI_VISTASP1 )
			hr = ::WerRegisterMemoryBlock(pvAddress, dwSize);
#	else
			QOR_PP_UNREF2(dwSize, pvAddress);
			continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>("WerRegisterMemoryBlock", "Windows Vista Service Pack 1");
#	endif
#endif
			return hr;
		}

		HRESULT Kernel32::WerSetFlags(DWORD dwFlags)
		{
			qor_pp_fcontext;
			CheckReturn< HRESULT, LongSuccessCheck >::TType hr;
#ifdef	__MINGW32__
			continuable(_TXT("Windows API error:"));//<error::CAPINotImplementedInMinGW>("WerSetFlags");
#else
#	if ( _WIN32_WINNT >= 0x0600 && NTDDI_VERSION >= NTDDI_VISTASP1 )
			hr = ::WerSetFlags(dwFlags);
#	else
			QOR_PP_UNREF(dwFlags);
			continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>("WerSetFlags", "Windows Vista Service Pack 1");
#	endif
#endif
			return hr;
		}

		HRESULT Kernel32::WerUnregisterFile(PCWSTR pwzFilePath)
		{
			qor_pp_fcontext;
			CheckReturn< HRESULT, LongSuccessCheck >::TType hr;
#ifdef	__MINGW32__
			continuable(_TXT("Windows API error:"));//<error::CAPINotImplementedInMinGW>("WerUnregisterFile");
#else
#	if ( _WIN32_WINNT >= 0x0600 && NTDDI_VERSION >= NTDDI_VISTASP1 )
			hr = ::WerUnregisterFile(pwzFilePath);
#	else
			QOR_PP_UNREF(pwzFilePath);
			continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>("WerUnregisterFile", "Windows Vista Service Pack 1");
#	endif
#endif
			return hr;
		}

		HRESULT Kernel32::WerUnregisterMemoryBlock(void* pvAddress)
		{
			qor_pp_fcontext;
			CheckReturn< HRESULT, LongSuccessCheck >::TType hr;
#ifdef	__MINGW32__
			continuable(_TXT("Windows API error:"));//<error::CAPINotImplementedInMinGW>("WerUnregisterMemoryBlock");
#else
#	if ( _WIN32_WINNT >= 0x0600 && NTDDI_VERSION >= NTDDI_VISTASP1 )
			hr = ::WerUnregisterMemoryBlock(pvAddress);
#	else
			QOR_PP_UNREF(pvAddress);
			continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>("WerUnregisterMemoryBlock", "Windows Vista Service Pack 1");
#	endif
#endif
			return hr;
		}

}}//qor::winqapi
