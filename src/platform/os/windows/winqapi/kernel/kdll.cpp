// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "src/qor/module/module.h"
#include "src/qor/interception/functioncontext.h"
#include "src/qor/error/error.h"

//Windows specific headers must be last to prevent contaminating generic headers with Windows specific types and definitions
#include "kernel32.h" //kernel32.h must be the first windows header as it's the primary inclusion point for windows.h
#include "../common/wqreturncheck.h"
#include "../common/wqlibrary.h"

namespace qor { namespace winapi {
		
	
		BOOL Kernel32::DisableThreadLibraryCalls(HMODULE hModule)
		{
			qor_pp_fcontext;
			CheckReturn< BOOL, BoolCheck >::TType bResult = ::DisableThreadLibraryCalls(hModule);
			return bResult;
		}

		BOOL Kernel32::FreeLibrary(HMODULE hModule)
		{
			CheckReturn< BOOL, BoolCheck >::TType bResult = ::FreeLibrary(hModule);
			return bResult;
		}

		VOID Kernel32::FreeLibraryAndExitThread(HMODULE hModule, DWORD dwExitCode)
		{
			::FreeLibraryAndExitThread(hModule, dwExitCode);
		}

		DWORD Kernel32::GetModuleFileName(HMODULE hModule, LPTSTR lpFilename, DWORD nSize)
		{
			qor_pp_fcontext;
			DWORD dwResult = ::GetModuleFileName(hModule, lpFilename, nSize);
			if (dwResult == 0)
			{
				continuable(_TXT("Windows API error"));
			}
			else if (dwResult == nSize)
			{
				continuable(_TXT("Buffer not big enough"));
			}
			return dwResult;
		}

		HMODULE Kernel32::GetModuleHandle(LPCTSTR lpModuleName)
		{
			CheckReturn< HMODULE, CheckNonZero< HMODULE> >::TType h = ::GetModuleHandle(lpModuleName);
			return h;
		}

		FARPROC Kernel32::GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		{
			FARPROC pResult = ::GetProcAddress(hModule, lpProcName);
			return pResult;
		}

		HMODULE Kernel32::LoadLibrary(LPCTSTR lpFileName)
		{
			CheckReturn< HMODULE, CheckNonZero< HMODULE> >::TType h = ::LoadLibrary(lpFileName);
			return h;
		}

		HMODULE Kernel32::LoadLibraryEx(LPCTSTR lpFileName, HANDLE hFile, DWORD dwFlags)
		{
			qor_pp_fcontext;
			CheckReturn< HMODULE, CheckNonZero< HMODULE> >::TType h = ::LoadLibraryEx(lpFileName, hFile, dwFlags);
			return h;
		}

		BOOL Kernel32::GetModuleHandleEx(DWORD dwFlags, LPCTSTR lpModuleName, HMODULE* phModule)
		{
			qor_pp_fcontext;
			CheckReturn< BOOL, BoolCheck >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0501 )
			bResult = ::GetModuleHandleEx(dwFlags, lpModuleName, phModule);
#	else
			qor_pp_unref3(dwFlags, lpModuleName, phModule);
			continuable(_TXT("Windows API error:"));
#	endif
			return bResult;
		}

		DWORD Kernel32::GetDllDirectory(DWORD nBufferLength, LPTSTR lpBuffer)
		{
			qor_pp_fcontext;
			CheckReturn< DWORD, CheckNonZero< DWORD> >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0502 )
			dwResult = ::GetDllDirectory(nBufferLength, lpBuffer);
#	else
			qor_pp_unref2(nBufferLength, lpBuffer);
			continuable(_TXT("Windows API error:"));
#	endif
			return dwResult;
		}

		BOOL Kernel32::SetDllDirectory(LPCTSTR lpPathName)
		{
			qor_pp_fcontext;
			CheckReturn< BOOL, BoolCheck >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0502 )
			bResult = ::SetDllDirectory(lpPathName);
#	else
			qor_pp_unref(lpPathName);
			continuable(_TXT("Windows API error:"));
#	endif
			return bResult;
		}

}}//qor::winqapi
