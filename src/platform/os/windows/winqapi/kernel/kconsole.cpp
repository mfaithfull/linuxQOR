// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "src/qor/module/module.h"
#include "src/qor/interception/functioncontext.h"
#include "src/qor/error/error.h"

//Windows specific headers must be last to prevent contaminating generic headers with Windows specific types and definitions
#include "kernel32.h" //kernel32.h must be the first windows header as it's the primary inclusion point for windows.h
#include "../common/wqreturncheck.h"
#include "../common/wqlibrary.h"

namespace qor { namespace winapi {

	BOOL Kernel32::AddConsoleAlias(LPTSTR Source, LPTSTR Target, LPTSTR ExeName)
	{
		qor_pp_fcontext;		
		CheckReturn< BOOL, BoolCheck >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		qor_pp_useswinapi( kernel32,AddConsoleAlias);
		//static const Library::DefProc pFunc = reinterpret_cast<Library::DefProc>(Kernel32::GetProcAddress(reinterpret_cast<::HMODULE>(Kernel32::GetModuleHandleA("kernel32")), AddConsoleAliasA));
		bResult = Library::Library::Call< BOOL, LPTSTR, LPTSTR, LPTSTR >(pFunc, Source, Target, ExeName);
#	else
		qor_pp_unref(ExeName);
		qor_pp_unref(Target);
		qor_pp_unref(Source);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "AddConsoleAlias", "Windows XP" );
#	endif
		return bResult;
	}

	BOOL Kernel32::AllocConsole(void)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::AllocConsole();
		return bResult;
	}

	BOOL Kernel32::AttachConsole(DWORD dwProcessId)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		bResult = ::AttachConsole(dwProcessId);
#	else
		qor_pp_unref(dwProcessId);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "AttachConsole", "Windows XP" );
#	endif
		return bResult;
	}

	HANDLE Kernel32::CreateConsoleScreenBuffer(DWORD dwDesiredAccess, DWORD dwShareMode, const ::SECURITY_ATTRIBUTES* lpSecurityAttributes, DWORD dwFlags, void* lpScreenBufferData)
	{
		qor_pp_fcontext;
		CheckReturn< HANDLE, HandleCheck >::TType h = ::CreateConsoleScreenBuffer(dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwFlags, lpScreenBufferData);
		return h;
	}

	BOOL Kernel32::FillConsoleOutputAttribute(HANDLE hConsoleOutput, WORD wAttribute, DWORD nLength, ::COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::FillConsoleOutputAttribute(hConsoleOutput, wAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten);
		return bResult;
	}

	BOOL Kernel32::FillConsoleOutputCharacter(HANDLE hConsoleOutput, TCHAR cCharacter, DWORD nLength, ::COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::FillConsoleOutputCharacter(hConsoleOutput, cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
		return bResult;
	}

	BOOL Kernel32::FlushConsoleInputBuffer(HANDLE hConsoleInput)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::FlushConsoleInputBuffer(hConsoleInput);
		return bResult;
	}

	BOOL Kernel32::FreeConsole(void)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::FreeConsole();
		return bResult;
	}

	BOOL Kernel32::GenerateConsoleCtrlEvent(DWORD dwCtrlEvent, DWORD dwProcessGroupId)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::GenerateConsoleCtrlEvent(dwCtrlEvent, dwProcessGroupId);
		return bResult;
	}

	DWORD Kernel32::GetConsoleAlias(LPTSTR lpSource, LPTSTR lpTargetBuffer, DWORD TargetBufferLength, LPTSTR lpExeName)
	{
		qor_pp_fcontext;
		CheckReturn< DWORD, CheckNonZero< DWORD> >::TType dwResult;
#	if( _WIN32_WINNT >= 0x0501 )
		qor_pp_useswinapi( kernel32,GetConsoleAlias);
		dwResult = Library::Call< DWORD, LPTSTR, LPTSTR, DWORD, LPTSTR >(pFunc, lpSource, lpTargetBuffer, TargetBufferLength, lpExeName);

		//dwResult = ::GetConsoleAlias( lpSource, lpTargetBuffer, TargetBufferLength, lpExeName );
#	else
		qor_pp_unref(lpExeName);
		qor_pp_unref(TargetBufferLength);
		qor_pp_unref(lpTargetBuffer);
		qor_pp_unref(lpSource);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "GetConsoleAlias", "Windows XP" );
#	endif
		return dwResult;
	}

	DWORD Kernel32::GetConsoleAliases(LPTSTR lpAliasBuffer, DWORD AliasBufferLength, LPTSTR lpExeName)
	{
		qor_pp_fcontext;
		CheckReturn< DWORD, CheckNonZero< DWORD> >::TType dwResult;
#	if( _WIN32_WINNT >= 0x0501 )
		qor_pp_useswinapi( kernel32,GetConsoleAliases);
		dwResult = Library::Call< DWORD, LPTSTR, DWORD, LPTSTR >(pFunc, lpAliasBuffer, AliasBufferLength, lpExeName);
#	else
		qor_pp_unref(lpExeName);
		qor_pp_unref(AliasBufferLength);
		qor_pp_unref(lpAliasBuffer);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "GetConsoleAliases", "Windows XP" );
#	endif
		return dwResult;
	}

	DWORD Kernel32::GetConsoleAliasesLength(LPTSTR lpExeName)
	{
		qor_pp_fcontext;
		DWORD dwResult = 0;
#	if( _WIN32_WINNT >= 0x0501 )
		qor_pp_useswinapi( kernel32,GetConsoleAliasesLength);
		dwResult = Library::Call< DWORD, LPTSTR >(pFunc, lpExeName);
		//dwResult = ::GetConsoleAliasesLength( lpExeName );
#	else
		qor_pp_unref(lpExeName);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "GetConsoleAliasesLength", "Windows XP" );
#	endif
		return dwResult;
	}

	DWORD Kernel32::GetConsoleAliasExes(LPTSTR lpExeNameBuffer, DWORD ExeNameBufferLength)
	{
		qor_pp_fcontext;
		CheckReturn< DWORD, CheckNonZero< DWORD> >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		qor_pp_useswinapi( kernel32,GetConsoleAliasExes);
		dwResult = Library::Call< DWORD, LPTSTR, DWORD >(pFunc, lpExeNameBuffer, ExeNameBufferLength);
#	else
		qor_pp_unref(ExeNameBufferLength);
		qor_pp_unref(lpExeNameBuffer);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "GetConsoleAliasExes", "Windows XP" );
#	endif
		return dwResult;
	}

	DWORD Kernel32::GetConsoleAliasExesLength(VOID)
	{
		qor_pp_fcontext;
		DWORD dwResult = 0;
#	if ( _WIN32_WINNT >= 0x0501 )
		qor_pp_useswinapi( kernel32,GetConsoleAliasExesLength);
		dwResult = Library::Call< DWORD >(pFunc);
#	else
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "GetConsoleAliasExesLength", "Windows XP" );
#	endif
		return dwResult;
	}

	UINT Kernel32::GetConsoleCP(void)
	{
		qor_pp_fcontext;
		return ::GetConsoleCP();
	}

	BOOL Kernel32::GetConsoleCursorInfo(HANDLE hConsoleOutput, ::PCONSOLE_CURSOR_INFO lpConsoleCursorInfo)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::GetConsoleCursorInfo(hConsoleOutput, lpConsoleCursorInfo);
		return bResult;
	}

	BOOL Kernel32::GetConsoleDisplayMode(LPDWORD lpModeFlags)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		bResult = ::GetConsoleDisplayMode(lpModeFlags);
#	else
		qor_pp_unref(lpModeFlags);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "GetConsoleDisplayMode", "Windows XP" );
#	endif
		return bResult;
	}

	::COORD Kernel32::GetConsoleFontSize(HANDLE hConsoleOutput, DWORD nFont)
	{
		qor_pp_fcontext;
		::COORD Result = { 0 };
#	if ( _WIN32_WINNT >= 0x0501 )
		qor_pp_useswinapi( kernel32,GetConsoleFontSize);
		Result = Library::Call< COORD, HANDLE, DWORD >(pFunc, hConsoleOutput, nFont);
		if (Result.X == 0 && Result.Y == 0)
		{
			continuable(_TXT("Windows API error: No data returned"));
		}
#	else
		qor_pp_unref(nFont);
		qor_pp_unref(hConsoleOutput);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "GetConsoleFontSize", "Windows XP" );
#	endif
		return Result;
	}

	BOOL Kernel32::GetConsoleHistoryInfo(::PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		qor_pp_useswinapi( kernel32,GetConsoleHistoryInfo);
		bResult = Library::Call< BOOL, ::PCONSOLE_HISTORY_INFO >(pFunc, lpConsoleHistoryInfo);
#	else
		qor_pp_unref(lpConsoleHistoryInfo);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>("GetConsoleHistoryInfo", "Windows Vista" );
#	endif
		return bResult;
	}

	BOOL Kernel32::GetConsoleMode(HANDLE hConsoleHandle, LPDWORD lpMode)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult;
		bResult = ::GetConsoleMode(hConsoleHandle, lpMode);
		return bResult;
	}

	DWORD Kernel32::GetConsoleOriginalTitle(LPTSTR lpConsoleTitle, DWORD nSize)
	{
		qor_pp_fcontext;
		DWORD dwResult = 0;
#	if ( _WIN32_WINNT >= 0x0600 )
		qor_pp_useswinapi( kernel32,GetConsoleOriginalTitle);
		dwResult = Library::Call< DWORD, LPTSTR, DWORD >(pFunc, lpConsoleTitle, nSize);
		if (dwResult == 0)
		{
			DWORD dwError = Kernel32::GetLastError();
			if (dwError == ERROR_SUCCESS)
			{
				continuable(_TXT("Windows API Buffer not big enough"));
			}
			else
			{
				continuable(_TXT("Windows API error"));
			}
		}
#	else
		qor_pp_unref(nSize);
		qor_pp_unref(lpConsoleTitle);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( APIName.c_str(), _T("Windows Vista"), 0));
#	endif
		return dwResult;
	}

	UINT Kernel32::GetConsoleOutputCP(void)
	{
		qor_pp_fcontext;
		return ::GetConsoleOutputCP();
	}

	DWORD Kernel32::GetConsoleProcessList(LPDWORD lpdwProcessList, DWORD dwProcessCount)
	{
		qor_pp_fcontext;
		CheckReturn< DWORD, CheckNonZero< DWORD> >::TType dwResult;
#	if ( _WIN32_WINNT >= 0x0501 )
		dwResult = ::GetConsoleProcessList(lpdwProcessList, dwProcessCount);
#	else
		qor_pp_unref(dwProcessCount);
		qor_pp_unref(lpdwProcessList);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "GetConsoleProcessList", "Windows XP");
#	endif
		return dwResult;
	}

	BOOL Kernel32::GetConsoleScreenBufferInfo(HANDLE hConsoleOutput, ::PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::GetConsoleScreenBufferInfo(hConsoleOutput, lpConsoleScreenBufferInfo);
		return bResult;
	}

	BOOL Kernel32::GetConsoleScreenBufferInfoEx(HANDLE hConsoleOutput, ::PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult;
		qor_pp_useswinapi( kernel32,GetConsoleScreenBufferInfoEx);
		bResult = Library::Call< BOOL, HANDLE, ::PCONSOLE_SCREEN_BUFFER_INFOEX >(pFunc, hConsoleOutput, lpConsoleScreenBufferInfoEx);
		return bResult;
	}

	BOOL Kernel32::GetConsoleSelectionInfo(::PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		qor_pp_useswinapi( kernel32,GetConsoleSelectionInfo);
		bResult = Library::Call< BOOL, ::PCONSOLE_SELECTION_INFO >(pFunc, lpConsoleSelectionInfo);
#	else
		qor_pp_unref(lpConsoleSelectionInfo);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>("GetConsoleSelectionInfo", "Windows 2000");
#	endif
		return bResult;
	}

	DWORD Kernel32::GetConsoleTitle(LPTSTR lpConsoleTitle, DWORD nSize)
	{
		qor_pp_fcontext;
		DWORD dwResult = ::GetConsoleTitle(lpConsoleTitle, nSize);
		if (dwResult == 0)
		{
			DWORD dwError = Kernel32::GetLastError();
			if (dwError == ERROR_SUCCESS)
			{
				continuable(_TXT("Windows API Buffer not big enough"));
			}
			else
			{
				continuable(_TXT("Windows API error"));
			}
		}
		return dwResult;
	}

	HWND Kernel32::GetConsoleWindow(void)
	{
		qor_pp_fcontext;
		CheckReturn< HWND, CheckNonZero< HWND> >::TType hWnd;
#	if ( _WIN32_WINNT >= 0x0500 )
		hWnd = ::GetConsoleWindow();
#	else
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "GetConsoleWindow", "Windows 2000");
#	endif
		return hWnd;
	}

	BOOL Kernel32::GetCurrentConsoleFont(HANDLE hConsoleOutput, BOOL bMaximumWindow, ::PCONSOLE_FONT_INFO lpConsoleCurrentFont)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		qor_pp_useswinapi( kernel32,GetCurrentConsoleFont);
		bResult = Library::Call< BOOL, HANDLE, BOOL, ::PCONSOLE_FONT_INFO >(pFunc, hConsoleOutput, bMaximumWindow, lpConsoleCurrentFont);
#	else
		qor_pp_unref(lpConsoleCurrentFont);
		qor_pp_unref(bMaximumWindow);
		qor_pp_unref(hConsoleOutput);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "GetCurrentConsoleFont", "Windows 2000");
#	endif
		return bResult;
	}

	BOOL Kernel32::GetCurrentConsoleFontEx(HANDLE hConsoleOutput, BOOL bMaximumWindow, ::PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		qor_pp_useswinapi( kernel32,GetCurrentConsoleFontEx);
		bResult = Library::Call< BOOL, HANDLE, BOOL, ::PCONSOLE_FONT_INFOEX >(pFunc, hConsoleOutput, bMaximumWindow, lpConsoleCurrentFontEx);
#	else
		qor_pp_unref(lpConsoleCurrentFontEx);
		qor_pp_unref(bMaximumWindow);
		qor_pp_unref(hConsoleOutput);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "GetCurrentConsoleFontEx", "Windows Vista");
#	endif
		return bResult;
	}

	::COORD Kernel32::GetLargestConsoleWindowSize(HANDLE hConsoleOutput)
	{
		qor_pp_fcontext;
		::COORD Result = { 0 };
		Result = ::GetLargestConsoleWindowSize(hConsoleOutput);
		if (Result.X == 0 && Result.Y == 0)
		{
			continuable(_TXT("Windows API error: No data returned"));
		}
		return Result;
	}

	BOOL Kernel32::GetNumberOfConsoleInputEvents(HANDLE hConsoleInput, LPDWORD lpcNumberOfEvents)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::GetNumberOfConsoleInputEvents(hConsoleInput, lpcNumberOfEvents);
		return bResult;
	}

	BOOL Kernel32::GetNumberOfConsoleMouseButtons(LPDWORD lpNumberOfMouseButtons)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::GetNumberOfConsoleMouseButtons(lpNumberOfMouseButtons);
		return bResult;
	}

	HANDLE Kernel32::GetStdHandle(DWORD nStdHandle)
	{
		qor_pp_fcontext;
		HANDLE h = ::GetStdHandle(nStdHandle);
		if (h == INVALID_HANDLE_VALUE)
		{
			continuable(_TXT("Windows API error: No data returned"));
		}
#ifndef _WINDOWS	//It's normal for this to fail if there is no Console
		else if (h == 0 && (nStdHandle != (unsigned long)-11))
		{
			continuable(_TXT("Windows API error: No data returned"));
		}
#endif
		return h;
	}

	BOOL Kernel32::PeekConsoleInput(HANDLE hConsoleInput, ::PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::PeekConsoleInput(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
		return bResult;
	}

	BOOL Kernel32::ReadConsole(HANDLE hConsoleInput, void* lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, ::PCONSOLE_READCONSOLE_CONTROL pReadcontrol)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::ReadConsole(hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, pReadcontrol);
		return bResult;
	}

	BOOL Kernel32::ReadConsoleInput(HANDLE hConsoleInput, ::PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::ReadConsoleInput(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
		return bResult;
	}

	BOOL Kernel32::ReadConsoleOutput(HANDLE hConsoleOutput, ::PCHAR_INFO lpBuffer, ::COORD dwBufferSize, ::COORD dwBufferCoord, ::PSMALL_RECT lpReadRegion)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::ReadConsoleOutput(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpReadRegion);
		return bResult;
	}

	BOOL Kernel32::ReadConsoleOutputAttribute(HANDLE hConsoleOutput, LPWORD lpAttribute, DWORD nLength, ::COORD dwReadCoord, LPDWORD lpNumberOfAttrsRead)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::ReadConsoleOutputAttribute(hConsoleOutput, lpAttribute, nLength, dwReadCoord, lpNumberOfAttrsRead);
		return bResult;
	}

	BOOL Kernel32::ReadConsoleOutputCharacter(HANDLE hConsoleOutput, LPTSTR lpCharacter, DWORD nLength, ::COORD dwReadCoord, LPDWORD lpNumberOfCharsRead)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::ReadConsoleOutputCharacter(hConsoleOutput, lpCharacter, nLength, dwReadCoord, lpNumberOfCharsRead);
		return bResult;
	}

	BOOL Kernel32::ScrollConsoleScreenBuffer(HANDLE hConsoleOutput, const ::SMALL_RECT* lpScrollRectangle, const ::SMALL_RECT* lpClipRectangle, ::COORD dwDestinationOrigin, const ::CHAR_INFO* lpFill)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::ScrollConsoleScreenBuffer(hConsoleOutput, lpScrollRectangle, lpClipRectangle, dwDestinationOrigin, lpFill);
		return bResult;
	}

	BOOL Kernel32::SetConsoleActiveScreenBuffer(HANDLE hConsoleOutput)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::SetConsoleActiveScreenBuffer(hConsoleOutput);
		return bResult;
	}

	BOOL Kernel32::SetConsoleCP(UINT wCodePageID)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::SetConsoleCP(wCodePageID);
		return bResult;
	}

	BOOL Kernel32::SetConsoleCtrlHandler(PHANDLER_ROUTINE HandlerRoutine, BOOL Add)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::SetConsoleCtrlHandler(HandlerRoutine, Add);
		return bResult;
	}

	BOOL Kernel32::SetConsoleCursorInfo(HANDLE hConsoleOutput, const ::CONSOLE_CURSOR_INFO* lpConsoleCursorInfo)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::SetConsoleCursorInfo(hConsoleOutput, lpConsoleCursorInfo);
		return bResult;
	}

	BOOL Kernel32::SetConsoleCursorPosition(HANDLE hConsoleOutput, ::COORD dwCursorPosition)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::SetConsoleCursorPosition(hConsoleOutput, dwCursorPosition);
		return bResult;
	}

	BOOL Kernel32::SetConsoleMode(HANDLE hConsoleHandle, DWORD dwMode)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::SetConsoleMode(hConsoleHandle, dwMode);
		return bResult;
	}

	BOOL Kernel32::SetConsoleDisplayMode(HANDLE hConsoleOutput, DWORD dwFlags, ::PCOORD lpNewScreenBufferDimensions)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult;
#	if( _WIN32_WINNT >= 0x0502 )
		bResult = ::SetConsoleDisplayMode(hConsoleOutput, dwFlags, lpNewScreenBufferDimensions);
#	else
		qor_pp_unref(lpNewScreenBufferDimensions);
		qor_pp_unref(dwFlags);
		qor_pp_unref(hConsoleOutput);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "SetConsoleDisplayMode", "Windows XP");
#	endif
		return bResult;
	}

	BOOL Kernel32::SetConsoleHistoryInfo(::PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		qor_pp_useswinapi( kernel32,SetConsoleHistoryInfo);
		bResult = Library::Call< BOOL, ::PCONSOLE_HISTORY_INFO >(pFunc, lpConsoleHistoryInfo);
#	else
		qor_pp_unref(lpConsoleHistoryInfo);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "SetConsoleHistoryInfo", "Windows Vista");
#	endif
		return bResult;
	}

	BOOL Kernel32::SetConsoleOutputCP(UINT wCodePageID)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::SetConsoleOutputCP(wCodePageID);
		return bResult;
	}

	BOOL Kernel32::SetConsoleScreenBufferInfoEx(HANDLE hConsoleOutput, ::PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		qor_pp_useswinapi( kernel32,SetConsoleScreenBufferInfoEx);
		bResult = Library::Call< BOOL, HANDLE, ::PCONSOLE_SCREEN_BUFFER_INFOEX >(pFunc, hConsoleOutput, lpConsoleScreenBufferInfoEx);
#	else
		qor_pp_unref(lpConsoleScreenBufferInfoEx);
		qor_pp_unref(hConsoleOutput);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>( "SetConsoleScreenBufferInfoEx", "Windows Vista");
#	endif
		return bResult;
	}

	BOOL Kernel32::SetConsoleScreenBufferSize(HANDLE hConsoleOutput, ::COORD dwSize)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::SetConsoleScreenBufferSize(hConsoleOutput, dwSize);
		return bResult;
	}

	BOOL Kernel32::SetConsoleTextAttribute(HANDLE hConsoleOutput, WORD wAttributes)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::SetConsoleTextAttribute(hConsoleOutput, wAttributes);
		return bResult;
	}

	BOOL Kernel32::SetConsoleTitle(LPCTSTR lpConsoleTitle)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::SetConsoleTitle(lpConsoleTitle);
		return bResult;
	}

	BOOL Kernel32::SetConsoleWindowInfo(HANDLE hConsoleOutput, BOOL bAbsolute, const ::SMALL_RECT* lpConsoleWindow)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::SetConsoleWindowInfo(hConsoleOutput, bAbsolute, lpConsoleWindow);
		return bResult;
	}

	BOOL Kernel32::SetCurrentConsoleFontEx(HANDLE hConsoleOutput, BOOL bMaximumWindow, ::PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		qor_pp_useswinapi( kernel32,SetCurrentConsoleFontEx);
		bResult = Library::Call< BOOL, HANDLE, BOOL, ::PCONSOLE_FONT_INFOEX >(pFunc, hConsoleOutput, bMaximumWindow, lpConsoleCurrentFontEx);
#	else
		qor_pp_unref(lpConsoleCurrentFontEx);
		qor_pp_unref(bMaximumWindow);
		qor_pp_unref(hConsoleOutput);
		continuable(_TXT("Windows API error:"));//<error::CWindowsAPIRequiresVersion>("SetCurrentConsoleFontEx", "Windows Vista");
#	endif
		return bResult;
	}

	BOOL Kernel32::SetStdHandle(DWORD nStdHandle, HANDLE hHandle)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::SetStdHandle(nStdHandle, hHandle);
		return bResult;
	}

	BOOL Kernel32::WriteConsoleA(HANDLE hConsoleOutput, const VOID* lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, void* lpReserved)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::WriteConsoleA(hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved);
		return bResult;
	}

	BOOL Kernel32::WriteConsoleW(HANDLE hConsoleOutput, const VOID* lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, void* lpReserved)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::WriteConsoleW(hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved);
		return bResult;
	}

	BOOL Kernel32::WriteConsoleInput(HANDLE hConsoleInput, const ::INPUT_RECORD* lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::WriteConsoleInput(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsWritten);
		return bResult;
	}

	BOOL Kernel32::WriteConsoleOutput(HANDLE hConsoleOutput, const ::CHAR_INFO* lpBuffer, ::COORD dwBufferSize, ::COORD dwBufferCoord, ::PSMALL_RECT lpWriteRegion)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::WriteConsoleOutput(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpWriteRegion);
		return bResult;
	}

	BOOL Kernel32::WriteConsoleOutputAttribute(HANDLE hConsoleOutput, const WORD* lpAttribute, DWORD nLength, ::COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::WriteConsoleOutputAttribute(hConsoleOutput, lpAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten);
		return bResult;
	}

	BOOL Kernel32::WriteConsoleOutputCharacter(HANDLE hConsoleOutput, LPCTSTR lpCharacter, DWORD nLength, ::COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten)
	{
		qor_pp_fcontext;
		CheckReturn< BOOL, BoolCheck >::TType bResult = ::WriteConsoleOutputCharacter(hConsoleOutput, lpCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
		return bResult;
	}

	DWORD Kernel32::CtrlRoutine(LPVOID lpParameter)
	{
		qor_pp_fcontext;
		DWORD dwResult = 0;
#if ( _WIN32_WINNT >= 0x0600 )
		qor_pp_unref(lpParameter);
		dwResult = 0;//::CtrlRoutine( lpParameter );
#	else
		qor_pp_unref(lpParameter);
#	endif
		return dwResult;
	}

}}//qor::winqapi
