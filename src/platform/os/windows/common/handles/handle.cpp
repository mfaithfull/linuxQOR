// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "handle.h"
#include "src/qor/error/error.h"

#include "src/platform/os/windows/common/constants.h"
#include "src/platform/os/windows/winqapi/kernel/kernel32.h"

using namespace qor::winapi;

namespace qor { namespace nsWindows {

	Handle::Handle() : m_h(Invalid_Handle_Value), m_needsClose(false) {}
	
	Handle::Handle(void* h) : m_h(h)
	{
		m_needsClose = !GetProtectFromClose();
	}

	Handle::Handle(int h) : m_h((void*)(static_cast<size_t>(h))), m_needsClose(false) {}

	Handle::~Handle()
	{
		Detach();
		if (m_needsClose)
		{			
			Close();
		}
	}

	Handle::Handle(const Handle& src)
	{
		*this = src;
	}

	Handle& Handle::operator = (const Handle& src)
	{
		if (&src != this)
		{
			m_h = src.m_h;
			m_needsClose = false;
		}
		return *this;
	}

	Handle& Handle::operator = (Handle&& src)
	{
		if (&src != this)
		{
			m_h = src.m_h;
			src.m_h = nullptr;
			m_needsClose = src.m_needsClose;
			src.m_needsClose = false;
		}
		return *this;
	}

	Handle Handle::Clone(void* sourceProcessHandle, void* targetProcessHandle, unsigned long desiredAccess, bool inheritHandle, unsigned long options)
	{
		void* newHandle = nullptr;
		Kernel32::DuplicateHandle(sourceProcessHandle, m_h, targetProcessHandle, &newHandle, desiredAccess, inheritHandle ? TRUE : FALSE, options);
		Handle h(newHandle);
		h.m_needsClose = m_needsClose;
		return h;
	}

	bool Handle::Duplicate(void* sourceProcessHandle, void* targetProcessHandle, void** targetHandle, unsigned long desiredAccess, bool inheritHandle, unsigned long options)
	{
		bool result = Kernel32::DuplicateHandle(sourceProcessHandle, m_h, targetProcessHandle, targetHandle, desiredAccess, inheritHandle ? TRUE : FALSE, options) ? true : false;
		return result;
	}

	bool Handle::GetHeritable()
	{
		DWORD flags = 0;
		bool result = Kernel32::GetHandleInformation(m_h, &flags);
		if (result)
		{
			result = (flags & HANDLE_FLAG_INHERIT) != 0;
			return result;
		}
		else
		{
			continuable("Call to Kernel32::GetHandleInformaiton failed");
		}
		return false;
	}

	bool Handle::GetProtectFromClose()
	{
		DWORD flags = 0;
		bool result = Kernel32::GetHandleInformation(m_h, &flags);
		if (result)
		{
			result = (flags & HANDLE_FLAG_PROTECT_FROM_CLOSE) != 0;
			return result;
		}
		else
		{
			continuable("Call to Kernel32::GetHandleInformation failed");
		}
		return false;
	}

	bool Handle::GetInformation(unsigned long* flags)
	{
		return Kernel32::GetHandleInformation(m_h, flags) ? true : false;
	}

	bool Handle::SetHeritable(bool inherit)
	{
		return Kernel32::SetHandleInformation(m_h, HANDLE_FLAG_INHERIT, inherit ? HANDLE_FLAG_INHERIT : 0) ? true : false;
	}

	bool Handle::SetProtectFromClose(bool close)
	{
		m_needsClose = !close;
		return Kernel32::SetHandleInformation(m_h, HANDLE_FLAG_PROTECT_FROM_CLOSE, close ? HANDLE_FLAG_PROTECT_FROM_CLOSE : 0) ? true : false;
	}

	bool Handle::SetInformation(unsigned long mask, unsigned long flags)
	{
		return Kernel32::SetHandleInformation(m_h, mask, flags) ? true : false;
	}

	void Handle::Close()
	{
		Detach();
		if (m_h && m_h != Invalid_Handle_Value && m_needsClose)
		{
			Kernel32::CloseHandle(m_h);
			m_h = nullptr;
		}
	}

	bool Handle::IsNull() const
	{
		return m_h == nullptr;
	}

	bool Handle::IsInvalid() const
	{
		return m_h == Invalid_Handle_Value;
	}

	void Handle::Drop()
	{
		Detach();
		m_h = Invalid_Handle_Value;
	}

	void* Handle::Use() const
	{
		return m_h;
	}

	void Handle::Attach(void* pObj)
	{
		continuable("Empty base implementation called.");
	}

	void* Handle::Detach()
	{
		return nullptr;
	}

}}//qor::nsWindows
