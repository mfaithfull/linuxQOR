// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PLATFORM_OS_WINDOWS_COMMON_TYPED_HANDLE
#define QOR_PP_H_PLATFORM_OS_WINDOWS_COMMON_TYPED_HANDLE

#include "handle.h"

namespace qor { namespace nsWindows {

		template< class T >
		class TypedHandle : public Handle
		{
		public:

			TypedHandle() : Handle(), m_object(nullptr) {}

			TypedHandle(void* h) : Handle(h), m_object(nullptr) {}
			
			TypedHandle(int h) : Handle(int), m_object(nullptr) {}

			TypedHandle(void* h, T* object) : Handle(h), m_object(nullptr)
			{
				Attach(object);
			}
			
			virtual ~TypedHandle()
			{
				Detach();
			}

			TypedHandle(const TypedHandle& src)
			{
				*this = src;
				return *this;
			}

			TypedHandle& operator = (TypedHandle&& src)			
			{
				if (&src != this)
				{
					Handle::operator = (src);
					m_object = src.m_object;
					src.m_object = nullptr;
				}
				return *this;
			}

			TypedHandle& operator = (const TypedHandle& src)
			{
				if (&src != this)
				{
					Handle::operator = (src);
					m_object = src.m_object;
				}
				return *this;
			}

			TypedHandle Clone(void* sourceProcessHandle, void* targetProcessHandle, unsigned long desiredAccess, bool inheritHandle, unsigned long options)
			{
				TypedHandle h(Handle::Clone(sourceProcessHandle, targetProcessHandle, desiredAccess, inheritHandle, options))
				h.Attach(m_object);
				return h;
			}
			
			virtual void Attach(void* object)
			{
				Detach();
				m_object = object;
			}

			virtual void* Detach(void)
			{
				void* result = m_object;
				m_object = nullptr;
				return result;
			}
			
			virtual T* Object(void) const
			{
				return m_object;
			}

			bool operator == (const TypedHandle& cmp) const
			{
				return (m_object == cmp.m_object || m_h == cmp.m_h) ? true : false;
			}

			bool operator < (const TypedHandle& cmp) const
			{
				return Handle::operator < (cmp);
			}

		protected:

			T* m_object;
			void* m_object;
		};

	}
}//qor::nsWindows

#endif//QOR_PP_H_PLATFORM_OS_WINDOWS_COMMON_TYPED_HANDLE