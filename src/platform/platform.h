// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PLATFORM_PLATFORM
#define QOR_PP_H_PLATFORM_PLATFORM

#include "src/qor/injection/typeidentity.h"
#include "src/qor/reference/reference.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/objectcontext/anyobject.h"
#include "src/qor/reference/newref.h"
#include "isubsystem.h"

/*The Platform class represents the OS at runtime, it's capabilities services, 
features, configuration and settings including the devices it presents.
This works very much like qor::framework::role but for OS subsystems rather than
application features*/

namespace qor{ namespace platform{

    class qor_pp_module_interface(QOR_PLATFORM) Platform
    {
    public:

        Platform();     
        ~Platform() = default;
        void Setup();
        void Shutdown();
        
        template< class T >
        void AddSubsystem()
        {
            AddSubsystem(guid_of<T>::guid(), new_ref<T>().template AsRef<ISubsystem>());
        }

        void AddSubsystem( const GUID* id, ref_of<ISubsystem>::type subsystem);

        template< class T >
        ref_of<ISubsystem>::type GetSubsystem()
        {
            return GetSubsystem(guid_of<T>::guid());
        }

        ref_of<ISubsystem>::type GetSubsystem(const GUID* id);

    private:

        std::map<GUID, ref_of<ISubsystem>::type > m_mapSubsystems;
        bool setupCompleted;
    };

    }//qor::platform

    qor_pp_declare_instancer_of(platform::Platform, SingletonInstancer);
    qor_pp_declare_sync_of(platform::Platform, RecursiveMutex);

    qor_pp_module_interface(QOR_PLATFORM) ref_of<platform::Platform>::type ThePlatform();
}//qor

#endif//QOR_PP_H_PLATFORM_PLATFORM
