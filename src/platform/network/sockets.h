// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PLATFORM_NETWORK_SOCKETS
#define QOR_PP_H_PLATFORM_NETWORK_SOCKETS

#include <vector>
#include "src/platform/isubsystem.h"
#include "socket.h"
#include "addressinfo.h"

//All libraries providing an implementation of Sockets also need to export this function so that the linker can find them
namespace qor{ bool qor_pp_import ImplementsSockets();}

namespace qor{ namespace network{

    class qor_pp_module_interface(QOR_SOCKETS) Sockets : public platform::ISubsystem   
    {
    public:

        Sockets() = default;
        virtual ~Sockets() = default;

        virtual void Setup();
        virtual void Shutdown();

        virtual ref_of<Socket>::type CreateSocket(const sockets::eAddressFamily AF, const sockets::eType Type, const sockets::eProtocol Protocol);
        virtual int GetAddressInfo(const std::string& node, const std::string& service, const AddressInfo& hints, std::vector<AddressInfo>& results);

    private:

        Sockets(const Sockets&) = delete;
        Sockets& operator = (const Sockets&) = delete;
    };

    }//network

    qor_pp_declare_factory_of(network::Sockets, ExternalFactory);
    constexpr GUID SocketsGUID = {0xec0a4971, 0x76ed, 0x4afd, {0x89, 0x23, 0x45, 0x3d, 0x5a, 0x05, 0x49, 0x5e}};
    qor_pp_declare_guid_of(network::Sockets,SocketsGUID);

}//qor

#endif//QOR_PP_H_PLATFORM_NETWORK_SOCKETS
