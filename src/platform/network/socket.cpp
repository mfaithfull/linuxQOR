// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "src/framework/thread/thread.h"
#include "socket.h"

namespace qor{ namespace network{

    Socket::Socket(const sockets::eAddressFamily& AF, const sockets::eType& Type, const sockets::eProtocol& Protocol)
    {
    }

    int32_t Socket::Bind(const Address& Address)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    int32_t Socket::Listen(int32_t iBacklog)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    ref_of<Socket>::type Socket::Accept(Address& Address)
    {
        //Provide an override implementation specific to your platform
        ref_of<Socket>::type nullref;
        return nullref;
    }

    int32_t Socket::Connect(const Address& Address)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    int32_t Socket::GetPeerName(Address& Address)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    int32_t Socket::GetSockName(Address& Address)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    int32_t Socket::GetSockOpt(int32_t iLevel, int32_t iOptName, char* pOptVal, int32_t* pOptLen)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    int32_t Socket::SetSockOpt(int32_t iLevel, int32_t iOptName, const char* pOptVal, int32_t iOptLen)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    int32_t Socket::AsyncReceive(char* pBuffer, int32_t iLen, void* pSyncObject)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    int32_t Socket::Receive(char* buf, int32_t len, int32_t flags)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    int32_t Socket::ReceiveFrom(char* Buffer, int32_t iLen, int32_t iFlags, Address& From)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    int32_t Socket::AsyncSend(char* Buffer, int32_t iLen, void* pSyncObject)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    int32_t Socket::Send(const char* Buffer, int32_t iLen)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    int32_t Socket::SendTo(const char* Buffer, int32_t iLen, int32_t iFlags, const Address& To)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    int32_t Socket::Shutdown(sockets::eShutdown how)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    std::size_t Socket::ID(void)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    int32_t Socket::GetLastError(void)
    {
        //Provide an override implementation specific to your platform
        return -1;
    }

    bool Socket::SetNonBlocking(bool nonBlocking)
    {
        //Provide an override implementation specific to your platform
        return false;
    }

    bool Socket::IsAlive()
    {
        return false;
    }

}}//qor::network
