// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PLATFORM_NETWORK_LINUX_SOCKET
#define QOR_PP_H_PLATFORM_NETWORK_LINUX_SOCKET

#include "src/qor/injection/typeidentity.h"
#include "src/qor/reference/newref.h"
#include "src/qor/factory/factory.h"
#include "src/qor/factory/externalfactory.h"
#include "src/platform/network/socket.h"
#include "src/platform/network/sockets.h"

namespace qor{ namespace nslinux{

    class qor_pp_module_interface(QOR_SOCKETS) Socket : public network::Socket
    {
    public:

        Socket();
        Socket(int sock);
        Socket(const Socket& src);
        Socket(const network::sockets::eAddressFamily& AF, const network::sockets::eType& Type, const network::sockets::eProtocol& Protocol);
        virtual ~Socket();

        virtual int32_t Bind(const network::Address& Address);
        virtual int32_t Listen(int32_t iBacklog);
        virtual ref_of<network::Socket>::type Accept(network::Address& Address);
        virtual int32_t Connect(const network::Address& Address);
        virtual int32_t GetPeerName(network::Address& Address);
        virtual int32_t GetSockName(network::Address& Address);
        virtual int32_t GetSockOpt(int32_t iLevel, int32_t iOptName, char* pOptVal, int32_t* pOptLen);
        virtual int32_t SetSockOpt(int32_t iLevel, int32_t iOptName, const char* pOptVal, int32_t iOptLen);
        virtual qor::framework::IOTask AsyncReceive(qor::framework::AbstractIOWaiter& ioWaiter, char* pBuffer, int32_t iLen, void* pSyncObject);
        virtual int32_t Receive(char* buf, int32_t len, int32_t flags);
        virtual int32_t ReceiveFrom(char* Buffer, int32_t iLen, int32_t iFlags, network::Address& From);
        virtual int32_t AsyncSend(char* Buffer, int32_t iLen, void* pSyncObject);
        virtual int32_t Send(const char* Buffer, int32_t iLen);
        virtual int32_t SendTo(const char* Buffer, int32_t iLen, int32_t iFlags, const network::Address& To);
        virtual int32_t Shutdown(network::sockets::eShutdown how);
        virtual std::size_t ID(void);
        virtual int32_t GetLastError(void);
        virtual bool SetNonBlocking(bool nonBlocking);
        virtual bool IsAlive();

        virtual int32_t Peek(char* buf, int32_t len);
        virtual bool SetRecvTimeout(time_t readTimeoutSec, time_t readTimeoutuSec);
        virtual bool SetSendTimeout(time_t readTimeoutSec, time_t readTimeoutuSec);
        virtual bool SetTCPNoDelay(bool nodelay);
        virtual bool SetIPv6Only(bool ipv6only);

        static int AddressFamilyToLinux(const network::sockets::eAddressFamily& AF);
        static network::sockets::eAddressFamily AddressFamilyFromLinux(int domain);
        static int TypeToLinux(const network::sockets::eType& Type, bool closeOnExec);
        static network::sockets::eType TypeFromLinux(int type);
        static int ProtocolToLinux(const network::sockets::eProtocol& Protocol);
        static network::sockets::eProtocol ProtocolFromLinux(int protocol);

    protected:
        int m_sock;

    private:

        template <typename T> inline ssize_t handle_EINTR(T fn) 
        {
            ssize_t res = 0;
            while (true) 
            {
                res = fn();
                if (res < 0 && errno == EINTR) 
                {
                    std::this_thread::sleep_for(std::chrono::microseconds{1});
                    continue;
                }
                break;
            }
            return res;
        }

        ssize_t PollWaitForInput(time_t sec, time_t usec);
        ssize_t PollWaitForOutput(time_t sec, time_t usec);
    };
    
    }//qor::nslinux
        
}//qor

#endif//QOR_PP_H_PLATFORM_NETWORK_LINUX_SOCKET
