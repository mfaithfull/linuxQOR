// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <resolv.h>

#include "src/configuration/configuration.h"
#include "src/qor/injection/typeidentity.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/reference/newref.h"
#include "src/platform/network/linux/sockets.h"
#include "src/platform/network/linux/socket.h"

qor_pp_module_provide(LINQOR_SOCKETS,Sockets)

namespace qor{ namespace nslinux{

    void AddressInfoFlagsToLinux(const network::addrinfo_flags& flags, int& out)
    {
        out = 0;
        out |= flags.SocketAddressIsIntentedForBind() ? AI_PASSIVE : 0;
        out |= flags.RequestForCanonicalName() ? AI_CANONNAME : 0;
        out |= flags.DontUseHostNameResolution() ? AI_NUMERICHOST: 0;
        out |= flags.IPV4MappedAddressesAreAcceptable() ? AI_V4MAPPED : 0;
        out |= flags.ReturnIP46and6() ? AI_ALL : 0;
        out |= flags.UseConfigurationOfHost() ? AI_ADDRCONFIG : 0;
        out |= flags.IDNEncodeInputFromCurrentLocale() ? AI_IDN : 0;
        out |= flags.TranslateCanonicalNameFromIDN() ? AI_CANONIDN : 0;
        out |= flags.DontUseServiceNameResolution() ? AI_NUMERICSERV : 0;
    }

    void AddressInfoToLinux(const network::AddressInfo& addressinfo, addrinfo& info)
    {
        memset(&info, 0, sizeof(struct addrinfo));
        AddressInfoFlagsToLinux( addressinfo.flags, info.ai_flags);
        info.ai_family = Socket::AddressFamilyToLinux(addressinfo.family);
        info.ai_socktype = Socket::TypeToLinux(addressinfo.socktype, false);
        info.ai_protocol = Socket::ProtocolToLinux(addressinfo.protocol);
    }

    void AddressInfoFromLinux(const addrinfo& info, network::AddressInfo& addressinfo)
    {
        addressinfo.flags = info.ai_flags;
        addressinfo.socktype = Socket::TypeFromLinux(info.ai_socktype);
        addressinfo.protocol = Socket::ProtocolFromLinux(info.ai_protocol);
        addressinfo.family = Socket::AddressFamilyFromLinux(info.ai_family);
        addressinfo.canonname = info.ai_canonname == nullptr ? "" : std::string(info.ai_canonname);
        addressinfo.address.sa_family = addressinfo.family;
        memcpy(addressinfo.address.sa.sa_data, info.ai_addr->sa_data, info.ai_addrlen);
    }

    ref_of<network::Socket>::type Sockets::CreateSocket(const network::sockets::eAddressFamily AF, const network::sockets::eType Type, const network::sockets::eProtocol Protocol)
    {
        ref_of<network::Socket>::type socket = new_ref<network::Socket>(AF, Type, Protocol);
        return socket;
    }

    int Sockets::GetAddressInfo(const std::string& node, const std::string& service, const network::AddressInfo& hints, std::vector<network::AddressInfo>& results)
    {
        struct addrinfo hintinfo;
        AddressInfoToLinux(hints, hintinfo);

        struct addrinfo *res = nullptr;

        auto result = ::getaddrinfo(node.empty() ? nullptr : node.c_str(), service.empty() ? nullptr : service.c_str(), &hintinfo, &res);
        
        if(result != 0)
        {
            res_init();            
            return -1;
        }

        for (auto rp = res; rp; rp = rp->ai_next)
        {
            auto socket = CreateSocket(
                Socket::AddressFamilyFromLinux(rp->ai_family), 
                Socket::TypeFromLinux(rp->ai_socktype),
                Socket::ProtocolFromLinux(rp->ai_protocol));
            if(socket.IsNull())
            {
                continue;
            }
         
            network::AddressInfo resultAddressInfo;

            AddressInfoFromLinux(*rp, resultAddressInfo);
            
            results.emplace_back(resultAddressInfo);
        }

        ::freeaddrinfo(res);
        return results.size();
    }
}}//qor::nslinux
