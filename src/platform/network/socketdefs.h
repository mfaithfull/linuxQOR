// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PLATFORM_NETWORK_SOCKETDEFS
#define QOR_PP_H_PLATFORM_NETWORK_SOCKETDEFS

namespace qor{ namespace network{ namespace sockets {

    enum eType
    {
        Sock_Stream = 1,
        Sock_DGram,
        Sock_Raw,
        Sock_ReliablyDeliveredMessage,
        Sock_SeqPacket,
    };

    enum eAddressFamily
    {
        AF_Unspecified = 0,			// unspecified
        AF_Unix = 1,				// local to host (pipes, portals)
        AF_INet = 2,				// internetwork: UDP, TCP, etc.
        AF_ImpLink = 3,             // arpanet imp addresses
        AF_Pup = 4,					// pup protocols: e.g. BSP
        AF_Chaos = 5,               // mit CHAOS protocols
        AF_Ns = 6,					// XEROX NS protocols
        AF_Ipx = AF_Ns,				// IPX protocols: IPX, SPX, etc.
        AF_Iso = 7,					// ISO protocols
        AF_Osi = AF_Iso,			// OSI is ISO
        AF_Ecma = 8,				// European computer manufacturers
        AF_DataKit = 9,             // datakit protocols
        AF_Ccitt = 10,              // CCITT protocols, X.25 etc
        AF_Sna = 11,				// IBM SNA
        AF_DecNet = 12,             // DECnet
        AF_Dli = 13,				// Direct data link interface
        AF_Lat = 14,				// LAT
        AF_HYLink = 15,             // NSC Hyperchannel
        AF_AppleTalk = 16,          // AppleTalk
        AF_NetBIOS = 17,            // NetBios-style addresses
        AF_VoiceView = 18,          // VoiceView
        AF_FireFox = 19,            // Protocols from Firefox
        AF_Unknown1 = 20,           // Somebody is using this!
        AF_Ban = 21,				// Banyan
        AF_Atm = 22,				// Native ATM Services
        AF_INet6 = 23,              // Internetwork Version 6
        AF_Cluster = 24,            // Microsoft Wolfpack
        AF_1284_4 = 25,              // IEEE 1284.4 WG AF
        AF_Irda = 26,				// IrDA
        AF_NetDes = 28,             // Network Designers OSI & gateway
        AF_TcnProcess = 29,
        AF_TcnMessage = 30,
        AF_IclFxbm = 31,
        AF_Bth = 32,				// Bluetooth RFCOMM/L2CAP protocols
        AF_Link = 33,
        AF_Max = 34,
    };

    enum eProtocol
    {
        IPProto_IP = 0,					// dummy for IP 
        IPProto_ICMP = 1,				// control message protocol 
        IPProto_IGMP = 2,				// group management protocol
        IPProto_GGP = 3,				// gateway^2 (deprecated) 
        BTHProto_RFCOMM = 3,			// Bluetooth RFCOMM protocol
        IPProto_TCP = 6,				// tcp 
        IPProto_PUP = 12,				// pup 
        IPProto_UDP = 17,				// user datagram protocol 
        IPProto_IDP = 22,				// xns idp 
        IPProto_ND = 77,				// UNOFFICIAL net disk proto 
        IPProto_RAW = 255,				// raw IP packet 
        IPProto_MAX = 256,
    };

    enum eShutdown
    {
        ShutdownRead = 0x1,
        ShutdownWrite = 0x2,
        ShutdownReadWrite = 0x3,
    };
}}}//qor::network//sockets

#endif//QOR_PP_H_PLATFORM_NETWORK_SOCKETDEFS
