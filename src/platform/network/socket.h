// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PLATFORM_NETWORK_ISOCKET
#define QOR_PP_H_PLATFORM_NETWORK_ISOCKET

#include "src/framework/thread/currentthread.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/reference/newref.h"
#include "src/qor/factory/factory.h"
#include "src/qor/factory/externalfactory.h"
#include "address.h"
#include "socketdefs.h"
#include "src/framework/asyncioservice/asyncioservice.h"

namespace qor{ namespace network{

    class qor_pp_module_interface(QOR_SOCKETS) Socket
    {
    public:

        static constexpr int Invalid_Socket = -1;
        
        Socket() = default;
        virtual ~Socket() = default;
        Socket(const sockets::eAddressFamily& AF, const sockets::eType& Type, const sockets::eProtocol& Protocol);

        virtual int32_t Bind(const Address& Address);
        virtual int32_t Listen(int32_t iBacklog);
        virtual ref_of<Socket>::type Accept(Address& Address);
        virtual int32_t Connect(const Address& Address);
        virtual int32_t GetPeerName(Address& Address);
        virtual int32_t GetSockName(Address& Address);
        virtual int32_t GetSockOpt(int32_t iLevel, int32_t iOptName, char* pOptVal, int32_t* pOptLen);
        virtual int32_t SetSockOpt(int32_t iLevel, int32_t iOptName, const char* pOptVal, int32_t iOptLen);
        virtual qor::framework::IOTask AsyncReceive(framework::AbstractIOWaiter& ioWaiter, char* pBuffer, int32_t iLen, void* pSyncObject);
        virtual int32_t Receive(char* buf, int32_t len, int32_t flags);
        virtual int32_t ReceiveFrom(char* Buffer, int32_t iLen, int32_t iFlags, Address& From);
        virtual int32_t AsyncSend(char* Buffer, int32_t iLen, void* pSyncObject);
        virtual int32_t Send(const char* Buffer, int32_t iLen);
        virtual int32_t SendTo(const char* Buffer, int32_t iLen, int32_t iFlags, const Address& To);
        virtual int32_t Shutdown(sockets::eShutdown how);
        virtual std::size_t ID(void);
        virtual int32_t GetLastError(void);
        virtual bool SetNonBlocking(bool nonBlocking);
        virtual bool IsAlive();
    };
    
    }//qor::network
        
    qor_pp_declare_factory_of(network::Socket, ExternalFactory);    
    constexpr GUID SocketGUID = {0x53573d1b, 0x4f8c, 0x4620, {0xa6, 0x65, 0x5d, 0x58, 0x39, 0x03, 0xd4, 0xb8}};
    qor_pp_declare_guid_of(network::Socket,SocketGUID);

}//qor

#endif//QOR_PP_H_PLATFORM_NETWORK_ISOCKET
