// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PROPERTY
#define QOR_PP_H_PROPERTY

#include "propertyname.h"
#include "propertyvalue.h"
#include "propertygenerator.h"

namespace qor {

	class qor_pp_module_interface(QOR_PROPERTY) Property : public PropertyBase
	{
	public:

		Property(const PropertyName & name) : PropertyBase(name) {}
		Property(const PropertyName & name, PropertyValue & value) : PropertyBase(name), m_value(value) {}

		virtual void SetValue(const PropertyValue& value)
		{
			m_value = value;
		}

		virtual PropertyValue Value() const
		{
			return m_value;
		}

		template<class T>
		bool CheckValueType() const
		{
			return m_value.CheckValueType<T>();
		}

		template<class T>
		T Get() const
		{
			return m_value.Get<T>();
		}

		virtual PVT GetType() const
		{
			return m_value.GetType();
		}

		PropertyVector GetVector() const
		{
			return m_value.GetVector();
		}

		PropertyMap GetMap() const
		{
			return m_value.GetMap();
		}

		template< class T >
		void Set(const T& t)
		{
			m_value.Set<T>(t);
		}

		template< class T >
		static Property FromStruct(const T& t)
		{
			constexpr std::size_t fieldCount = qor_reflection::detail::fields_count<T>();
			Property result(PropertyName(typeid(T).name()));
			PropertyVector fields;
			qor::PropertyGenerator<0, fieldCount>::Generate(fields, qor_reflection::detail::tie_as_tuple(t), t);
			result.SetValue(PropertyValue().Set(fields));
			return result;
		}

		template< class T >
		T ToStruct()
		{
			T result;
			qor_reflection::for_each_field_with_name(result, [this](std::string_view name, auto& value, std::size_t i)
				{
					if (this->GetType() == PVT_Vector)
					{
						using VT = std::remove_reference<decltype(value)>::type;
						auto v = this->GetVector();

						auto it = std::find_if(v.cbegin(), v.cend(), [name, value](const Property& prop)->bool
							{
								return strncmp(prop.GetName().c_str(), name.data(), name.length()) == 0;
							}
						);
						if (it != v.end())
						{
							auto propval = it->Value();
							value = propval.Get<VT>();
						}
					}
				}
			);

			return result;
		}
	private:

		PropertyValue m_value;
	};

}//qor

#endif//QOR_PP_H_PROPERTY
