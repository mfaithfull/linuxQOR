// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

namespace qor {

	class ValueTagType 
	{
	public:
		ValueTagType() {}
		virtual ~ValueTagType() {}
		virtual ValueTagType* Clone() { return nullptr; }
		virtual size_t Size() const { return 0; }
	};

	template<typename T>
	class Value : public ValueTagType
	{
	public:

		typedef T type;

		Value() {}

		virtual ~Value() {}

		Value(const Value& src)
		{
			m_ = src;
		}

		Value(const T& t) : m_(t) {}

		operator T& ()
		{
			return m_;
		}

		Value& operator = (const T& t)
		{
			Set(t);
			return *this;
		}

		void Set(const T& t)
		{
			m_ = t;
		}

		T Get() const
		{
			return m_;
		}

		virtual size_t Size() const
		{
			return sizeof(T);
		}

		virtual ValueTagType* Clone() 
		{  
			return new Value<T>(m_);
		}

	private:
		T m_;
	};
}//qor