// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PROPERTY_GENERATOR
#define QOR_PP_H_PROPERTY_GENERATOR

#include "src/qor/reflection/reflection.h"

namespace qor {

    template <std::size_t I, std::size_t N>
    struct PropertyGenerator
    {
        template< class T, class R>
        static void Generate(PropertyVector& container, const T& value, const R& org_val)
        {
            auto val = qor_reflection::detail::sequence_tuple::get<I>(value);
            auto c = qor_reflection::get_name<I, R>();
            std::string name(c);
            Property prop(PropertyName(name.c_str()));
            prop.SetValue(PropertyValue().Set(val));
            container.emplace_back(prop);
            PropertyGenerator<I + 1, N>::Generate(container, value, org_val);
        }
    };

    template <std::size_t I>
    struct PropertyGenerator<I, I>
    {
        template <class T, class R> static void Generate(PropertyVector& container, const T& value, const R& org_val) noexcept {}
    };
}

#endif//QOR_PP_H_PROPERTY_GENERATOR