// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_OBSERVER_OBSERVER
#define QOR_PP_H_OBSERVER_OBSERVER

#include "proxyobserver.h"

namespace qor{ 

    template< class Observed >
    class Observable
    {
    public:

        Observable( Observed& target ) : m_Observed( target ), m_first(nullptr) {}

        Observable( const Observable& src) : m_Observed( src.m_Observed )
        {
            *this = src;
        }

        Observable& operator = (const Observable& src )
        {
            if( &src != this )
            {
                m_first = src.first;
            }
            return *this;
        }

        ~Observable() noexcept = default;

        void Update()
        {
            AbstractObserver< Observed >* it = dynamic_cast< AbstractObserver< Observed >* >( m_first );
            while( nullptr != it )
            {
                it->Update( m_Observed );
                it = dynamic_cast< AbstractObserver< Observed >* >(it->Next());
            }
        }

        void AddObserver( ChainLink* pNew )
        {
            ChainLink::AddBefore( m_first, pNew );
        }

        void RemoveObserver( ChainLink* pOld )
        {
            ChainLink::Remove( m_first, pOld );
        }

    private:

        Observed& m_Observed;
        ChainLink* m_first;
    };

}//qor

#endif//QOR_PP_H_OBSERVER_OBSERVER
