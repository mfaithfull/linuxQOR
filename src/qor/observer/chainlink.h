// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_OBSERVER_CHAINLINK
#define QOR_PP_H_OBSERVER_CHAINLINK

namespace qor{ 

    //An entirely weak reference, dynamic allocation free, doubly linked list
    //NOTE: Do not use this across threads
    class ChainLink
    {
    public:

		ChainLink() noexcept : m_prev(nullptr), m_next(nullptr) 
		{
		}

		ChainLink(const ChainLink& src) noexcept
		{
			m_prev = src.m_prev;
			m_next = src.m_next;
		}

		virtual ~ChainLink() noexcept = default;

		ChainLink& operator = (const ChainLink& src) noexcept
		{
			if (&src != this)
			{
				m_prev = src.m_prev;
				m_next = src.m_next;
			}
			return *this;
		}

		ChainLink*& Prev(void)
		{
			return m_prev;
		}

		ChainLink*& Next(void)
		{
			return m_next;
		}

		static void AddBefore(ChainLink* &pFirst, ChainLink* pNew)
		{
			if (pNew)
			{
				if (pFirst != 0)
				{
					pFirst->Prev() = pNew;
					pNew->Next() = pFirst;
				}

				pFirst = pNew;
			}
		}

		static void Remove(ChainLink* &pFirst, ChainLink* pOld)
		{
			if (pFirst == pOld)
			{
				pFirst = pOld->Next();
			}

			if (pOld)
			{
				if (pOld->Prev())
				{
					pOld->Prev()->Next() = pOld->Next();
                    pOld->Prev() = nullptr;
				}

				if (pOld->Next())
				{
					pOld->Next()->Prev() = pOld->Prev();
                    pOld->Next() = nullptr;
				}
			}
		}

		template< class TDerived >
		static void Walk(ChainLink* pFirst, void(*pFunc)(TDerived*))
		{
			while (pFirst != 0)
			{
				TDerived* pDerived = dynamic_cast<TDerived*>(pFirst);
				if (pDerived)
				{
					(pFunc)(pDerived);
				}
				pFirst = pFirst->Next();
			}
		}

    protected:

		ChainLink* m_prev;
		ChainLink* m_next;

    };
}//qor

#endif//QOR_PP_H_OBSERVER_CHAINLINK
