// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_TESTSUITE
#define QOR_PP_H_TESTSUITE

#include <string>
#include <limits>
#include "failure.h"

namespace qor{ namespace test{

    template <typename Suite, typename Case = void>
    struct Test : public virtual Suite 
    {
    };

    template <typename Expected, typename Actual>
    inline void equal(const Expected& e, const Actual& a, const char* at = "", const char* expr = "")
    {
        if (e != a)
        {
            throw failure(e, a, at, expr);
        }
    }

    inline void equal(const char* e, const char* a, const char* at = "", const char* expr = "")
    {
        if (std::string(e) != std::string(a))
        {
            throw failure(e, a, at, expr);
        }
    }

    inline void equal(double e, double a, const char* at = "", const char* expr = "")
    {
        double max = std::abs(std::max(e, a));
        max = max < 1.0 ? 1.0 : max;
        if (std::abs(e - a) > std::numeric_limits<double>::epsilon() * max)
        {
            throw failure(e, a, at, expr);
        }
    }

    inline void check(bool b, const char* at = "", const char* expr = "")
    {
        if (!b)
        {
            throw failure(at, expr);
        }
    }

    template <typename Expected, typename Actual>
    inline void unequal(const Expected& e, const Actual& a, const char* at = "", const char* expr = "")
    {
        if (e == a)
        {
            throw failure(e, a, at, expr);
        }
    }

    inline void unequal(const char* e, const char* a, const char* at = "", const char* expr = "")
    {
        if (std::string(e) == std::string(a))
        {
            throw failure(e, a, at, expr);
        }
    }

    inline void unequal(double e, double a, const char* at = "", const char* expr = "")
    {
        double max = std::abs(std::max(e, a));
        max = max < 1.0 ? 1.0 : max;
        if( std::abs(e -a) <= std::numeric_limits<double>::epsilon() * max)
        {
            throw failure(e, a, at, expr);
        }
    }

    template <typename T>
    void fail(const T& expr, const char* at = "")
    {
        std::ostringstream os;
        os << expr;
        throw failure(at,os.str().c_str());
    }
}}//qor::test

#endif//QOR_PP_H_TESTSUITE
