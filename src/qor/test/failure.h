// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_TESTFAILURE
#define QOR_PP_H_TESTFAILURE

#include "detail/hascoutsupport.h"
#include "detail/extrainformation.h"

namespace qor { namespace test {
    class failure
    {
    private:

        std::string m_failure;

    public:

        template <typename Expected, typename Actual>
        failure(const Expected& e, const Actual& a, const char* at = "", const char* expr = "")
        {
            std::ostringstream os;
            os << at << expr;
            detail::extra_information< Expected, Actual, detail::has_cout_support< std::ostream, Expected >::value >::print(os, e, a);
            m_failure = os.str();
        }

        failure(const char* at = "", const char* expr = "")
        {
            std::ostringstream os;
            os << at << expr;
            m_failure = os.str();
        }

        virtual ~failure() noexcept = default;

        virtual const char* what() const noexcept 
        { 
            return m_failure.c_str(); 
        }

    };
}}//qor::test

#endif//QOR_PP_H_TESTFAILURE