// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_TESTBASICREPORTING
#define QOR_PP_H_TESTBASICREPORTING

#include <list>
#include "reporting.h"

namespace qor { namespace test
{
    class BasicReporting : public Reporting
    {
		private:

			std::list<std::string> m_Failures;
			size_t m_fail, m_pass;
			clock_t m_start, m_end;
			
			void ReportSummary()
			{
				const size_t size = m_pass + m_fail;
				std::cout << std::endl;
				std::cout << "[TOTAL](" << size << '/' << size << ")" << std::endl;
				std::cout << "[OK](" << m_pass << '/' << size << ")" << std::endl;
				if (m_fail > 0)
				{
					std::cout << "[FAIL](" << m_fail << '/' << size << ")" << std::endl;
				}
				double duration = ((double)(m_end - m_start)) / CLOCKS_PER_SEC;
				std::cout << "[DURATION] " << duration << " seconds" << std::endl;
			}
			
			void ReportFailures()
			{
				if (m_Failures.size() > 0)
				{
					std::cout << "[ALL FAILURES]" << std::endl;
					std::list<std::string>::iterator it;
					for (it = m_Failures.begin(); it != m_Failures.end(); ++it)
					{
						std::cout << *it << std::endl;
					}
				}
			}
        
        public:

        BasicReporting() : m_fail(0), m_pass(0){}

        int FailCount()
        {
            return static_cast<int>(m_fail);
        }

        void TestRunStarting()
        {
            m_start = clock();
        }

        void TestCaseStarting(const TestCaseInfo& info)
        {
            std::cout << std::endl << info.m_At << info.m_Name << std::flush;
        }

        void TestCaseEnded(const TestCaseInfo& info)
        {
            if(info.m_Passed)
            {
                ++m_pass;
                std::cout << " [OK]";                
            }
            else
            {
                ++m_fail;
                std::cout << " [FAIL]";
            }
            std::cout << ", #" << info.m_Index << std::flush;
        }

        void TestRunEnded()
        {
            m_end = clock();
            ReportSummary();
            ReportFailures();
        }

        void LogFailure(const std::string s)
        {
            m_Failures.emplace_back(s);
        }

    };

}}//qor::test

#endif//QOR_PP_H_TESTBASICREPORTING
