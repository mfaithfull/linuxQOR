// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from HippoMocks
//Copyright (C) 2008, Bas van Tiel, Christian Rexwinkel, Mike Looijmans, Peter Bindels
//under GNU LGPL v2.1

#ifndef QOR_PP_H_TESTMOCK_COMSUPPORT
#define QOR_PP_H_TESTMOCK_COMSUPPORT

#ifdef _MSC_VER

#   include <winerror.h>
#   include <guiddef.h>
#   include <Unknwnbase.h>

namespace qor{ namespace mock{

    template <typename T>
    void AddComExpectations(MockRepository& mocks, T* m)
    {
        mocks.OnCall(m, T::AddRef)
            .Return(1);
        mocks.OnCall(m, T::Release)
            .Return(1);
        mocks.OnCallOverload(m, (long(__stdcall T::*)(const _GUID&, void**)) & T::QueryInterface)
            .With(__uuidof(T), Out((void**)m))
            .Return(S_OK);

        mocks.OnCallOverload(m, (long(__stdcall T::*)(const IID&, void**)) & T::QueryInterface)
            .With(__uuidof(IUnknown), Out((void**)m))
            .Return(S_OK);

    }

    template <typename T1, typename T2>
    void ConnectComInterfaces(MockRepository& mocks, T1* m1, T2* m2)
    {
        //from T1 to T2
        mocks.OnCallOverload(m1, (long(__stdcall T1::*)(const _GUID&, void**)) & T1::QueryInterface)
            .With(__uuidof(T2), Out((void**)m2))
            .Return(S_OK);
        //from T2 to T1
        mocks.OnCallOverload(m2, (long(__stdcall T2::*)(const _GUID&, void**)) & T2::QueryInterface)
            .With(__uuidof(T1), Out((void**)m1))
            .Return(S_OK);

        AddComExpectations(mocks, m1);
        AddComExpectations(mocks, m2);

        //no support for interface hierarchies
        //no Base IUnknown -> do it yourself if you really need that special case
    }

}}//qor::mock

#endif//_MSC_VER

#endif//QOR_PP_H_TESTMOCK_COMSUPPORT
