// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from HippoMocks
//Copyright (C) 2008, Bas van Tiel, Christian Rexwinkel, Mike Looijmans, Peter Bindels
//under GNU LGPL v2.1

#ifndef QOR_PP_H_TESTMOCK_RETURNVALUEWRAPPERCOPY
#define QOR_PP_H_TESTMOCK_RETURNVALUEWRAPPERCOPY

#include <functional>

namespace qor{ namespace mock{

    template <typename X> struct no_cref 
    { 
        typedef X type; 
    };

    
    template <typename X> 
    struct no_cref<const X&> 
    { 
        typedef X type; 
    };


    template <class Y, class RY>
    class ReturnValueWrapperCopy : public ReturnValueWrapper<Y>
    {
    public:
        typename no_cref<Y>::type rv;

        ReturnValueWrapperCopy(RY retValue) : rv(retValue) {}

        virtual Y value() 
        { 
            return rv; 
        };
    };

    template <class Y, class RY>
    class ReturnValueWrapperCopy<Y, std::reference_wrapper<RY>> : public ReturnValueWrapper<Y>
    {
    public:
        typename std::reference_wrapper<RY> rv;
        
        ReturnValueWrapperCopy(std::reference_wrapper<RY> retValue) : rv(retValue) {}

        virtual Y value() 
        { 
            return rv; 
        };
    };

}}//qor::mock

#endif//QOR_PP_H_TESTMOCK_RETURNVALUEWRAPPERCOPY
