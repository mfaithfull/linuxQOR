// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from HippoMocks
//Copyright (C) 2008, Bas van Tiel, Christian Rexwinkel, Mike Looijmans, Peter Bindels
//under GNU LGPL v2.1

#ifndef QOR_PP_H_TESTMOCK_ARGUMENTPRINTER
#define QOR_PP_H_TESTMOCK_ARGUMENTPRINTER

#include <iostream>
#include <tuple>

namespace qor{ namespace mock{

    template <int index, int limit, typename Tuple>
    struct argumentPrinter
    {

        template<typename T>
        static std::ostream& output(std::ostream& os, unsigned int& arg, const T& t)
        {
            (++arg > 1) ? (os << ",") : (os << "");
            (os << t);            
            return os;
        }

        template<>
        static std::ostream& output(std::ostream& os, unsigned int& arg, const wchar_t*const& t)
        {
            (++arg > 1) ? (os << ",") : (os << "");
            (os << (char)t[0] << (char)t[1]);            
            return os;
        }

        static void Print(std::ostream& os, const Tuple& t)
        {
            unsigned int arg = 0;
            std::apply([&os,&arg](auto&&... args) {                
                (output(os,arg,args), ...);
            }, t);
        }

        static void Print(std::wostream& os, const Tuple& t)
        {
            std::apply([&os](auto&&... args) {
                ((os << args << ","), ...);
            }, t);
        }

    };
    
    template <int limit, typename Tuple>
    struct argumentPrinter<limit, limit, Tuple>
    {
        static void Print(std::ostream&, const Tuple&)
        {
        }

        static void Print(std::wostream&, const Tuple&)
        {
        }
    };

    template <typename... Args>
    void printTuple(std::ostream& os, const std::tuple<Args...>& tuple)
    {
        os << "(";
        argumentPrinter<0, sizeof...(Args), std::tuple<Args...>>::Print(os, tuple);
        os << ")";
    }

    template <typename... Args>
    void printTupleW(std::wostream& os, const std::tuple<Args...>& tuple)
    {
        os << "(";
        argumentPrinter<0, sizeof...(Args), std::tuple<Args...>>::Print(os, tuple);
        os << ")";
    }

}}//qor::mock

#endif//QOR_PP_H_TESTMOCK_ARGUMENTPRINTER
