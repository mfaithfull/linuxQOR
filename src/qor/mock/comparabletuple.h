// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from HippoMocks
//Copyright (C) 2008, Bas van Tiel, Christian Rexwinkel, Mike Looijmans, Peter Bindels
//under GNU LGPL v2.1

#ifndef QOR_PP_H_TESTMOCK_COMPARABLETUPLE
#define QOR_PP_H_TESTMOCK_COMPARABLETUPLE

#include <tuple>

namespace qor{ namespace mock{

    template <typename... Args>
    struct ComparableTupleBase
    {
    public:
        
        virtual ~ComparableTupleBase(){}

        virtual void print(std::ostream& os) const = 0;
        virtual void print(std::wostream& os) const = 0;
        virtual bool equals(const std::tuple<Args...>& rhs) = 0;
        virtual void assignInOut(std::tuple<Args...>& rhs) = 0;
    };

    template <typename tuple, typename... Args>
    struct ComparableTuple;

    template <typename... Args, typename... CArgs>
    struct ComparableTuple<std::tuple<Args...>, CArgs...> : public std::tuple<CArgs...>, public ComparableTupleBase<Args...>
    {
    public:

        ComparableTuple(CArgs... args) : std::tuple<CArgs...>(args...){}

        virtual ~ComparableTuple(){}

        void print(std::ostream& os) const override
        {
            printTuple(os, *this);
        }

        void print(std::wostream& os) const override
        {
            printTupleW(os, *this);
        }

        bool equals(const std::tuple<Args...>& rhs) override
        {
            // this effectively makes operator== virtual
            return (*this) == rhs;
        }

        void assignInOut(std::tuple<Args...>& rhs) override
        {
            assigner<0, sizeof...(Args), std::tuple<CArgs...>, std::tuple<Args...>>::Assign(*this, rhs);
        }
    };

}}//qor::mock

#endif//QOR_PP_H_TESTMOCK_COMPARABLETUPLE
