// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from HippoMocks
//Copyright (C) 2008, Bas van Tiel, Christian Rexwinkel, Mike Looijmans, Peter Bindels
//under GNU LGPL v2.1

#ifndef QOR_PP_H_TESTMOCK_MOCKFUNCS
#define QOR_PP_H_TESTMOCK_MOCKFUNCS

namespace qor{ namespace mock{
        
    template <typename Z, typename Y>
    class mockFuncs : public mock<Z>
    {
    private:
        mockFuncs();
    public:

        template <int X, typename... Args>
        Y expectation(Args... args)
        {
            std::tuple<Args...> argT(args...);
            mock<Z>* realMock = mock<Z>::getRealThis();
            MockRepository* myRepo = realMock->repo;
            if (realMock->isZombie) 
            {
                std::stringstream argstr;
                printTuple(argstr, argT);
                MockRepoInstanceHolder<0>::reporter->FunctionCallToZombie(*myRepo, argstr.str());
            }
            return myRepo->template DoExpectation<Y>(realMock, realMock->translateX(X), argT);
        }

        template <int X, typename... Args>
        static Y static_expectation(Args... args)
        {
            std::tuple<Args...> argT(args...);
            return MockRepoInstanceHolder<0>::instance->template DoExpectation<Y>(nullptr, std::pair<int, int>(0, X), argT);
        }

#if (qor_pp_os_target == qor_pp_os_windows)
        
        template <int X, typename... Args>
        Y __stdcall stdcallexpectation(Args... args)
        {
            std::tuple<Args...> argT(args...);
            mock<Z>* realMock = mock<Z>::getRealThis();
            MockRepository* myRepo = realMock->repo;
            if (realMock->isZombie) 
            {
                std::stringstream argstr;
                printTuple(argstr, argT);
                MockRepoInstanceHolder<0>::reporter->FunctionCallToZombie(*myRepo, argstr.str());
            }
            return myRepo->template DoExpectation<Y>(realMock, realMock->translateX(X), argT);
        }

#if (qor_pp_os_target == qor_pp_os_windows) && !defined(qor_pp_os_64bit)
        
        template <int X, typename... Args>
        static Y __stdcall static_stdcallexpectation(Args... args)
        {
            std::tuple<Args...> argT(args...);
            return MockRepoInstanceHolder<0>::instance->template DoExpectation<Y>(nullptr, std::pair<int, int>(0, X), argT);
        }
#endif
#endif
    };

   
    template <typename Z>
    class mockFuncs<Z, void> : public mock<Z>
    {
    private:
        mockFuncs();
    public:
        
        template <int X, typename... Args>
        void expectation(Args... args)
        {
            std::tuple<Args...> argT(args...);
            mock<Z>* realMock = mock<Z>::getRealThis();
            MockRepository* myRepo = realMock->repo;
            if (realMock->isZombie) 
            {
                std::stringstream argstr;
                printTuple(argstr, argT);
                MockRepoInstanceHolder<0>::reporter->FunctionCallToZombie(*myRepo, argstr.str());
            }
            myRepo->DoVoidExpectation(realMock, realMock->translateX(X), argT);
        }
        
        template <int X, typename... Args>
        static void static_expectation(Args... args)
        {
            std::tuple<Args...> argT(args...);
            MockRepoInstanceHolder<0>::instance->DoVoidExpectation(nullptr, std::pair<int, int>(0, X), argT);
        }

#if (qor_pp_os_target == qor_pp_os_windows)
        
        template <int X, typename... Args>
        void __stdcall stdcallexpectation(Args... args)
        {
            std::tuple<Args...> argT(args...);
            mock<Z>* realMock = mock<Z>::getRealThis();
            MockRepository* myRepo = realMock->repo;
            if (realMock->isZombie) 
            {
                std::stringstream argstr;
                printTuple(argstr, argT);
                MockRepoInstanceHolder<0>::reporter->FunctionCallToZombie(*myRepo, argstr.str());
            }
            myRepo->DoVoidExpectation(this, mock<Z>::translateX(X), argT);
        }

#if (qor_pp_os_target == qor_pp_os_windows) && !defined(qor_pp_os_64bit)
        
        template <int X, typename... Args>
        static void __stdcall static_stdcallexpectation(Args... args)
        {
            std::tuple<Args...> argT(args...);
            return MockRepoInstanceHolder<0>::instance->DoVoidExpectation(nullptr, std::pair<int, int>(0, X), argT);
        }
#endif
#endif
    };

    }//mock
}//qor

#endif//QOR_PP_H_TESTMOCK_MOCKFUNCS
