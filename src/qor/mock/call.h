// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from HippoMocks
//Copyright (C) 2008, Bas van Tiel, Christian Rexwinkel, Mike Looijmans, Peter Bindels
//under GNU LGPL v2.1

#ifndef QOR_PP_H_TESTMOCK_CALL
#define QOR_PP_H_TESTMOCK_CALL

#include <vector>
#include <iostream>

namespace qor{ namespace mock{
    
    class Call
    {
    public:

        base_mock* mock;
        std::pair<int, int> funcIndex;
        std::vector<Call*> previousCalls;
        unsigned int called;
        RegistrationType expectation;
        int lineno;
        const char* funcName;
        const char* fileName;
                
        virtual ~Call(){}

        // This function checks if the call we've now received applies to this mock and function. If so we can use the type info.
        bool applies(base_mock* rhsMock, std::pair<int, int> rhsIndex)
        {
            return mock == rhsMock && funcIndex == rhsIndex && previousCallsSatisfied();
        }

        bool isSatisfied() const
        {
            return called >= expectation.minimum && previousCallsSatisfied();
        }

        virtual void printArgs(std::ostream& os) const = 0;

    private:

        inline bool previousCallsSatisfied() const
        {
            for (auto& c : previousCalls)
            {
                if (!c->isSatisfied()) return false;
            }
            return true;
        }

    protected:

        Call(RegistrationType expect, base_mock* baseMock, const std::pair<int, int>& index, int X, const char* func, const char* file)
            : mock(baseMock)
            , funcIndex(index)
            , called(0)
            , expectation(expect)
            , lineno(X)
            , funcName(func)
            , fileName(file)
        {}
    };

    inline std::ostream& operator<<(std::ostream& os, const Call& call)
    {
        os << call.fileName << "(" << call.lineno << ") ";
        if (call.expectation == Once)
            os << "Expectation for ";
        else
            os << "Result set for ";

        os << call.funcName;

        call.printArgs(os);

        os << " on the mock at 0x" << call.mock << " was ";

        if (!call.isSatisfied())
            os << "not ";

        if (call.expectation == Once)
            os << "satisfied." << std::endl;
        else
            os << "used." << std::endl;

        return os;
    }

}}//qor::mock

#endif//QOR_PP_H_TESTMOCK_CALL
