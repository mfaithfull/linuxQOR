// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from HippoMocks
//Copyright (C) 2008, Bas van Tiel, Christian Rexwinkel, Mike Looijmans, Peter Bindels
//under GNU LGPL v2.1

#ifndef QOR_PP_H_TESTMOCK_DETAIL_DEFAULTREPORTER
#define QOR_PP_H_TESTMOCK_DETAIL_DEFAULTREPORTER

#include <functional>
/*
#include "../exceptions/callmissingexception.h"
#include "../exceptions/expectationexception.h"
#include "../exceptions/notimplementedexception.h"
#include "../exceptions/zombiemockexception.h"
#include "../exceptions/noresultsetupexception.h"
#include "reporter.h"
*/

namespace qor{ namespace mock{ namespace detail {

    inline Reporter* GetDefaultReporter() 
    {
        
        static struct DefaultReporter : Reporter 
        {
            DefaultReporter() : latentException([] {}) 
            {
            }

            std::function<void()> latentException;

            void CallMissing(Call& call, MockRepository& repo) override 
            {
                (void)call;
                qor_pp_mock_raiseexception(CallMissingException(repo));
            }

            void ExpectationExceeded(Call& call, MockRepository& repo, const std::string& args, const char* funcName) override 
            {
                (void)call;
                qor_pp_mock_raiseexception(ExpectationException(repo, args, funcName));
            }

            void FunctionCallToZombie(MockRepository& repo, const std::string& args) override 
            {
                (void)args;
                qor_pp_mock_raiseexception(ZombieMockException(repo));
            }

            void InvalidBaseOffset(size_t baseOffset, MockRepository& repo) override 
            {
                (void)baseOffset;
                (void)repo;
                std::terminate();
            }

            void InvalidFuncIndex(size_t funcIndex, MockRepository& repo) override 
            {
                (void)funcIndex;
                (void)repo;
                std::terminate();
            }

            void NoExpectationMatches(MockRepository& repo, const std::string& args, const char* funcName) override 
            {
                qor_pp_mock_raiseexception(ExpectationException(repo, args, funcName));
            }

            void NoResultSetUp(Call& call, MockRepository& repo, const std::string& args, const char* funcName) override 
            {
                (void)call;
                qor_pp_mock_raiseexception(NoResultSetUpException(repo, args, funcName));
            }

            void UnknownFunction(MockRepository& repo) override 
            {
                qor_pp_mock_raiseexception(NotImplementedException(repo));
            }

            void TestStarted() override 
            {
                latentException = [] {};
            }

            void TestFinished() override 
            {
                if (!std::uncaught_exceptions() && latentException) 
                {
                    latentException();
                }
            }
        } defaultReporter;
        return &defaultReporter;
    }

}}}//qor::mock::detail

#endif//QOR_PP_H_TESTMOCK_DETAIL_DEFAULTREPORTER