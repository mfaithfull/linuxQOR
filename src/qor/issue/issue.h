// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_ISSUE
#define QOR_PP_H_ISSUE

#include "when.h"
#include "where.h"
#include "what.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/reference/reference.h"
#include "src/qor/reference/newref.h"

namespace qor{ 

    template< class WhatT >
    class qor_pp_module_interface(QOR_ISSUE) Issue
    {
    public:

        Issue() = default;
        virtual ~Issue() noexcept = default;

        Issue& operator = (const Issue& src)
        {
            if(&src != this)
            {
                m_what = new_ref<WhatT>(src.m_what);
                m_when = new_ref<When>(src.m_when);
                m_where = new_ref<Where>(src.m_where);
            }
            return *this;
        }

        virtual When& when(void)
        {
            return *(m_when.template As<When>());
        }

        virtual Where& where(void)
        {
            return *(m_where.template As<Where>());
        }

        virtual What& what(void)
        {
            return *(m_what.template As<WhatT>());
        }       
        virtual void Handle(void) = 0;

        virtual void Resolve(bool bHandled)
        {
            if(!bHandled)
            {
                Escalate();
            }
        }
        
        virtual void Catch()
        {
            Handle();
        }
        virtual void Escalate(void) = 0;
        
        virtual void Ignore(){}

    protected:

        ref_of<WhatT>::type m_what;
        ref_of<Where>::type m_where;
        ref_of<When>::type m_when;
    };

    template< class t_Issue, typename... _p >
    void issue(_p&&... p1)
    {
        new_ref<t_Issue>( std::forward<_p>(p1)... )->Handle();
    }

}//qor

#endif//QOR_PP_H_ISSUE
