//where.cpp

// Copyright Querysoft Limited 2008 - 2022
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <sstream>
#include "src/qor/module/module.h"
#include "where.h"

//Implements the where-it-happened class.

namespace qor{

    Where::Where()
    {
        m_line = 0;
        m_function = "Unknown";
        m_file = "Unknown";
        m_moduleContext = &(ThisModule());
        //m_processContext = HostProcess::ThisProcess();
        std::stringstream ss;
        ss << framework::CurrentThread::GetCurrent().GetID();
        m_thread = ss.str();
        m_inInstance = false;
        m_inException = false;
    }

    Where::Where(const char* szFile, const unsigned int uiLine, const char* szFunction)
    {
        m_inInstance = false;
        m_inException = false;
        m_file = szFile;
        m_line = uiLine;
        SetFunction(szFunction);
        m_moduleContext = &(ThisModule());
        //m_processContext = HostProcess::ThisProcess();
        std::stringstream ss;
        ss << framework::CurrentThread::GetCurrent().GetID();
        m_thread = ss.str();
    }

    Where::Where(const char* szFile, const unsigned int uiLine, const char* szFunction, const ObjectContextBase& ObjContext)
    {
        m_inException = false;
        m_file = szFile;
        m_line = uiLine;
        SetFunction(szFunction);
        m_moduleContext = &(ThisModule());
        SetObjectContext(ObjContext);
        //m_processContext = HostProcess::ThisProcess();
        std::stringstream ss;
        ss << framework::CurrentThread::GetCurrent().GetID();
        m_thread = ss.str();
    }

    Where::Where(const Where& src)
    {
        *this = src;
    }

    Where& Where::operator = (const Where& src)
    {
        if (&src != this)
        {
            m_line = src.m_line;
            m_function = src.m_function;
            m_file = src.m_file;
            m_thread = src.m_thread;
            m_moduleContext = src.m_moduleContext;
            //m_processContext = src.m_processContext;
            m_objContext = src.m_objContext;
            m_inInstance = src.m_inInstance;
            m_inException = src.m_inException;
        }
        return *this;
    }

    bool Where::GetInInstance(void) const
    {
        return m_inInstance;
    }

    const unsigned int Where::GetLine(void) const
    {
        return m_line;
    }

    void Where::SetLine(const unsigned int uiLine)
    {
        m_line = uiLine;
    }

    void Where::SetFunction(const char* pszFunction)
    {
        m_function = pszFunction;
    }

    const char* Where::GetFunction(void) const
    {
        return m_function;
    }

    const char* Where::GetFile(void) const
    {
        return m_file;
    }

    void Where::SetFile(const char* szFile)
    {
        m_file = szFile;
    }

    ObjectContextBase& Where::GetObjectContext(void)
    {
        return m_inInstance ? m_objContext : ObjectContextBase::NullContext();
    }

    void Where::SetObjectContext(const ObjectContextBase& ObjContext)
    {
        m_objContext = ObjContext;
        m_inInstance = true;
    }

    const std::string Where::GetThreadContext(void)
    {
        return m_thread;
    }

    void Where::SetThreadContext(const std::string threadId)
    {
        m_thread = threadId;
    }

    const Module* Where::GetModuleContext(void) const
    {
        return m_moduleContext;
    }

    void Where::SetModuleContext(const Module* pModuleContext)
    {
        m_moduleContext = pModuleContext;
    }

//    const HostProcess* Where::GetProcessContext(void) const
//    {
//        return m_processContext;
//    }

//    void Where::SetProcessContext(const HostProcess* pProcessContext)
//    {
//        m_processContext = pProcessContext;
//    }

    bool Where::GetInException(void) const
    {
        return m_inException;
    }

    void Where::SetInException(bool bInException)
    {
        m_inException = bInException;
    }

}//qor
