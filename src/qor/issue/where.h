// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_ISSUE_WHERE
#define QOR_PP_H_ISSUE_WHERE

#include <iosfwd>		// std::basic_ostream
#include <string>
#include "src/framework/thread/currentthread.h"
#include "src/qor/module/module.h"

namespace qor{ 

    class qor_pp_module_interface(QOR_ISSUE) Where
    {
    public:
        Where();
        Where(const char* szFile, const unsigned int uiLine, const char* szFunction);
        Where( const char* szFile, const unsigned int uiLine, const char* szFunction, const AnyObject& ObjContext);
        Where(const Where&);
        Where& operator = (const Where&);
        virtual ~Where() noexcept = default;

        void SetFile(const char* szFile);
        const char* GetFile(void) const;
        void SetLine(const unsigned int uiLine);
        const unsigned int GetLine(void) const;
        void SetFunction(const char* pszFunction);
        const char* GetFunction(void) const;
        AnyObject& GetObjectContext(void);
        void SetObjectContext(const AnyObject& ObjContext);
        const std::string GetThreadContext(void);
        void SetThreadContext(const std::string threadId);
        const Module* GetModuleContext(void) const;
        void SetModuleContext(const Module* pModuleContext);
        //const HostProcess* GetProcessContext(void) const;
        //void SetProcessContext(const HostProcess* pProcessContext);
        bool GetInException(void) const;
        void SetInException(bool bInExcpetion);
        bool GetInInstance(void) const;

    private:

        unsigned int m_line;
        const char* m_function;
        const char* m_file;
        AnyObject m_objContext;
        std::string m_thread;
        const Module* m_moduleContext;
        //const HostProcess* m_processContext;
        bool m_inException;
        bool m_inInstance;

        template<class _CharT, class _Traits>
	    friend std::basic_ostream<_CharT, _Traits>& operator<<(std::basic_ostream<_CharT, _Traits>& __out, Where& __id);
    };

}//qor

#endif//QOR_PP_H_ISSUE_WHERE
