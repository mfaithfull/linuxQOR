// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from assertcc
//Copyright 2021 Sean Nash
//under BSD 3 clause license

#ifndef QOR_PP_H_ASSERT_SUBJECT_BASE
#define QOR_PP_H_ASSERT_SUBJECT_BASE

namespace qor{ namespace assert{ namespace subject{

    /*Base class that holds shared information between the subject classes and the
    propositoin mixins.

    The subject class will intilize the Base superclass and the proposition
    classes will use the functions to retrive the data. Virtual inheritance is
    used to avoid the diamond issue.
    */
    class Base 
    {
        private:
    
            const char* d_file; //The source file of the assert_that statement was called in.
            const int d_line;/// The line number in the file the assert_that statement is on.
            const bool d_failOnError;/// A flag to determine whether a test stops at the error or continues.

        protected:

            const char* getFile() const 
            { 
                return d_file; 
            }

            int getLine() const 
            { 
                return d_line; 
            }

            bool getFailOnError() const 
            { 
                return d_failOnError; 
            }

        public:

            Base(const bool failOnError, const char* file, int line): d_file(file), d_line(line), d_failOnError(failOnError) {}
    };

}}}//qor::assert::subject

#endif//QOR_PP_H_ASSERT_SUBJECT_BASE