// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from assertcc
//Copyright 2021 Sean Nash
//under BSD 3 clause license
#pragma once

#include <regex>
#include <sstream>
#include <string>

#include "../proposition/haslengthpropositions.h"
#include "../proposition/hassizepropositions.h"
#include "../proposition/isemptypropositions.h"
#include "../proposition/isequaltopropositions.h"
#include "../proposition/isnullpropositions.h"
#include "base.h"

namespace qor{ namespace assert{ namespace subject{

template <typename T>
class StringSubject : public virtual Base,
                      public proposition::HasLengthPropositions<StringSubject<T>, T>,
                      public proposition::HasSizePropositions<StringSubject<T>, std::string>,
                      public proposition::IsEqualToPropositions<StringSubject<T>, T>,
                      public proposition::IsEmptyPropositions<StringSubject<T>, T> {
  const T d_value;

 protected:
  const T* getValue() const override { return &d_value; }

 public:
  StringSubject(const bool failOnError, const char* file, int line, const T& v)
      : Base(failOnError, file, line), d_value(v) {}

  StringSubject<T>& contains(const T& other) {
    if (getValue()->find(other) == std::string::npos) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("Expected the string to contain the subsequence", other)
          .fact("Got", *getValue());
    }
    return *this;
  }

  StringSubject<T>& doesNotContain(const T& other) {
    if (getValue()->find(other) != std::string::npos) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("Expected the string to contain the subsequence", other)
          .fact("Got", *getValue());
    }
    return *this;
  }

  StringSubject<T>& startsWith(const T& other) {
    std::stringstream ss;
    ss << "^" << other;
    std::regex re(ss.str());
    if (!std::regex_search(*getValue(), re)) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("Expected the string to start with", other)
          .fact("Got", *getValue());
    }
    return *this;
  }

  StringSubject<T>& endsWith(const T& other) {
    std::stringstream ss;
    ss << other << "$";
    std::regex re(ss.str());
    if (!std::regex_search(*getValue(), re)) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("The string to end with", other)
          .fact("Got", getValue());
    }
    return *this;
  }

  StringSubject<T>& containsMatch(const std::string& str) {
    std::regex re(str);
    if (!std::regex_search(*getValue(), re)) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("The string to contain the regex", str)
          .fact("Got", *getValue());
    }
    return *this;
  }

  StringSubject<T>& doesNotContainMatch(const std::string& str) {
    std::regex re(str);
    if (std::regex_search(*getValue(), re)) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("Expected the string to not contain regex", str)
          .fact("Got", *getValue());
    }
    return *this;
  }

  StringSubject<T>& matches(const std::string& str) {
    std::regex re(str);
    if (!std::regex_match(*getValue(), re)) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("The string to match", str)
          .fact("Got", *getValue());
    }
    return *this;
  }

  StringSubject<T>& doesNotMatch(const std::string& str) {
    std::regex re(str);
    if (std::regex_match(*getValue(), re)) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("Expected the string to not match ", str)
          .fact("Got", *getValue());
    }
    return *this;
  }
};

}}}//qor::assert::subject
