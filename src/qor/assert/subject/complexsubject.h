// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from assertcc
//Copyright 2021 Sean Nash
//under BSD 3 clause license
#pragma once

#include <complex>

#include "../proposition/isequaltopropositions.h"
#include "../proposition/isinpropositions.h"
#include "base.h"

namespace assertcc{ namespace subject{

    template <typename T>
    class ComplexSubject : public virtual Base,
        public proposition::IsEqualToPropositions<ComplexSubject<T>, std::complex<T>>,
        public proposition::IsInPropositions<ComplexSubject<T>, std::complex<T>> 
    {
        const std::complex<T> d_value;

    protected:

        const std::complex<T>* getValue() const override { return &d_value; }

    public:

        ComplexSubject(const bool failOnError, const char* file, int line, const std::complex<T> v) : Base(failOnError, file, line), d_value(v) {}
    };

}}//assertcc::subject