// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from assertcc
//Copyright 2021 Sean Nash
//under BSD 3 clause license
#pragma once

#include <memory>

#include "../assert.h"
#include "base.h"
#include "../util/failmessage.h"

namespace qor{ namespace assert{ namespace subject{

	template <typename T>
	class WeakPtrSubject 
	{
		const char* d_file;
		const int d_line;
		const T d_value;
		const bool d_failOnError;

		void fail(const std::string msg) 
		{
			//TODO: FAIL() << "Expected: " << msg << "\nGot: "<< "blah blah";
		}

		public:

		WeakPtrSubject(const bool failOnError, const char* file, int line, const T& v) : d_file(file), d_line(line), d_value(v), d_failOnError(failOnError) {}

		WeakPtrSubject<T>& isExpired() {
			if (!d_value.expired()) 
			{
				util::FailMessage::create()
				.failOnError(d_failOnError)
				.file(d_file)
				.line(d_line)
				.fact("Expected the weak_ptr to be expired")
				.fact("Got", d_value);
			}
			return *this;
		}

		WeakPtrSubject<T>& isNotExpired() 
		{
			if (d_value.expired()) 
			{
				util::FailMessage::create()
				.failOnError(d_failOnError)
				.file(d_file)
				.line(d_line)
				.fact("Expected the weak_ptr to not be expired")
				.fact("Got", d_value);
			}
			return *this;
		}

		auto value() 
		{
			auto sp = d_value.lock();
			return assert_that_internal(qor::assert::Adl(), d_failOnError, d_file, d_line, *sp);
		}
	};

}}}//qor::assert::subject
