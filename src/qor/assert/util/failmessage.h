// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from assertcc
//Copyright 2021 Sean Nash
//under BSD 3 clause license

#pragma once

#include <string>
#include <vector>
#include <sstream>

#include "prettyprint.h"
#include "../../test/failure.h"

namespace qor{ namespace assert { namespace util {

    class FailMessage 
    {
    private:

        std::string d_file;
        int d_line;
        std::stringstream d_buffer;
        bool d_failOnError;

        FailMessage() : d_file(""), d_line(), d_buffer(), d_failOnError(true) {}

    public:

        static FailMessage create() 
        { 
            return FailMessage(); 
        }

        FailMessage& file(std::string file) 
        {
            d_file = file;
            return *this;
        }

        FailMessage& line(int line) 
        {
            d_line = line;
            return *this;
        }

        template<typename T>
        FailMessage& fact(const std::string& key, const T& value) 
        {
            d_buffer << key << ": " << value << "\n";
            return *this;
        }

        template<typename T, typename std::enable_if<std::is_same<T, bool>::value>::type* = nullptr>
        FailMessage& fact(const std::string& key, bool value) 
        {
            d_buffer << key << ": " << (value? "true" : "false")<< "\n";
            return *this;
        }

        FailMessage& fact(const std::string& key) 
        {
            d_buffer << key << "\n";
            return *this;
        }

        FailMessage& expected(std::string msg) 
        {
            fact(msg);
            return *this;
        }

        template <typename T>
        FailMessage& fact(std::string msg, const T begin, const T end) 
        {
            d_buffer << msg << " [";
            for (auto iter = begin; iter != end; iter++) {
                d_buffer << " " << *iter;
            }
            d_buffer << " ]";
            return *this;
        }

        FailMessage& failOnError(bool failOnError) 
        {
            d_failOnError = failOnError;
            return *this;
        }

        ~FailMessage() noexcept(false)
        {
            throw qor::test::failure(d_file.c_str(), d_buffer.str().c_str());

            //GTEST_MESSAGE_AT_(d_file.c_str(), d_line, d_buffer.str().c_str(), ::testing::TestPartResult::kFatalFailure);
        }
    };
    
}}}//qor::assert::util
