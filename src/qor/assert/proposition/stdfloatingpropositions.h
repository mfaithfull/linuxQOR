// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from assertcc
//Copyright 2021 Sean Nash
//under BSD 3 clause license

#pragma once

#include <limits>
#include <memory>

#include "../subject/base.h"
#include "../util/failmessage.h"

namespace qor{ namespace assert{ namespace proposition{

template <typename T, typename U>
class FloatingPropositions : public virtual subject::Base 
{
 protected:
  virtual const U* getValue() const = 0;
  virtual const U* getTolerance() const = 0;

 public:
  T& isEqualTo(const U& other) {
    double relativeDifference = (*getValue() - other) / other;
    if (std::abs(relativeDifference) >= *getTolerance()) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("value is equal to", other)
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }

  T& isNotEqualTo(const U& other) {
    double relativeDifference = (*getValue() - other) / other;
    if (std::abs(relativeDifference) < *getTolerance()) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("value is notequal to", other)
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }

  T& isNan() {
    if (!std::isnan(*getValue())) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("value is not a number")
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }

  T& isNotNan() {
    if (std::isnan(*getValue())) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("value is not the special not a number value")
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }

  T& isFinite() {
    if (!std::isfinite(*getValue())) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("value is finite")
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }

  T& isNotFinite() {
    if (std::isfinite(*getValue())) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("value is not finite")
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }

  T& isPositiveInfinity() {
    if ((*getValue()) != std::numeric_limits<U>::infinity()) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("value is not finite")
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }

  T& isNegativeInfinity() {
    if ((*getValue()) != -std::numeric_limits<U>::infinity()) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("value is not finite")
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }

  T& isZero() {
    if ((*getValue()) != 0.0) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("value is zero")
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }

  T& isNotZero() {
    if ((*getValue()) == 0.0) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("value is not zero")
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }
};

}}}//qor::assert::proposition

