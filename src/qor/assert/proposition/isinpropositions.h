// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Derived from assertcc
//Copyright 2021 Sean Nash
//under BSD 3 clause license

#ifndef QOR_PP_H_ASSERT_ISINPROPOSITION
#define QOR_PP_H_ASSERT_ISINPROPOSITION

#include <memory.h>

#include "../subject/base.h"
#include "../util/failmessage.h"

namespace qor{ namespace assert{ namespace proposition{

template <typename T, typename U>
class IsInPropositions : public virtual subject::Base 
{
 private:
  template <typename List, typename I>
  bool checkIsInRange(List& r, const I& value) {
    for (const auto& e : r) {
      if (value == e) return true;
    }
    return false;
  }

  template <typename I>
  static bool checkIsInRange(std::initializer_list<I> r, const I& value) {
    for (const auto& e : r) {
      if (value == e) return true;
    }
    return false;
  }

 protected:
  virtual const U* getValue() const = 0;

 public:
  T& isIn(std::initializer_list<U> r) {
    if (!checkIsInRange(r, *getValue())) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("is in range", r.begin(), r.end())
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }

  T& isNotIn(std::initializer_list<U> r) {
    if (checkIsInRange(r, *getValue())) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("is not in range", r.begin(), r.end())
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }

  template <typename List>
  T& isIn(List r) {
    if (!checkIsInRange(r, *getValue())) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("is in range", r.begin(), r.end())
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }

  template< template <typename...> typename List >
  T& isIn(List<U> r) {
    if (!checkIsInRange(r, *getValue())) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("is in range", r.begin(), r.end())
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }

  template< template <typename...> typename List >
  T& isNotIn(List<U> r) {
    if (checkIsInRange(r, *getValue())) {
      util::FailMessage::create()
          .file(getFile())
          .line(getLine())
          .fact("is not in range", r.begin(), r.end())
          .fact("Got", *getValue());
    }
    return *dynamic_cast<T*>(this);
  }
};

}}}//qor::assert::proposition

#endif//QOR_PP_H_ASSERT_ISINPROPOSITION
