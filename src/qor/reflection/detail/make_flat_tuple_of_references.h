// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// Copyright (c) 2016-2024 Antony Polukhin
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef QOR_PP_H_REFLECTION_DETAIL_MAKEFLATTUPLEOFREFERENCES
#define QOR_PP_H_REFLECTION_DETAIL_MAKEFLATTUPLEOFREFERENCES

#pragma once

#include "config.h"

#ifdef qor_pp_refl_has_std_module
import std;
#else
#include <utility>      // metaprogramming stuff
#endif

#include "sequence_tuple.h"
#include "rvalue_t.h"
#include "make_integer_sequence.h"


namespace qor_reflection { namespace detail {

    template <std::size_t Index>
    using size_t_ = std::integral_constant<std::size_t, Index >;

    // Helper: Make a "getter" object corresponding to built-in tuple::get
    // For user-defined structures, the getter should be "offset_based_getter"
    struct sequence_tuple_getter 
    {
        template <std::size_t idx, typename TupleOfReferences>
        decltype(auto) get(TupleOfReferences&& t, size_t_<idx>) const noexcept 
        {
            return sequence_tuple::get<idx>(std::forward<TupleOfReferences>(t));
        }
    };

    template <class TupleOrUserType, class Getter, std::size_t Begin, std::size_t Size>
    constexpr auto make_flat_tuple_of_references(TupleOrUserType&, const Getter&, size_t_<Begin>, size_t_<Size>) noexcept;

    template <class TupleOrUserType, class Getter, std::size_t Begin>
    constexpr sequence_tuple::tuple<> make_flat_tuple_of_references(TupleOrUserType&, const Getter&, size_t_<Begin>, size_t_<0>) noexcept;

    template <class TupleOrUserType, class Getter, std::size_t Begin>
    constexpr auto make_flat_tuple_of_references(TupleOrUserType&, const Getter&, size_t_<Begin>, size_t_<1>) noexcept;

    template <class... T>
    constexpr auto tie_as_tuple_with_references(T&... args) noexcept 
    {
        return sequence_tuple::tuple<T&...>{ args... };
    }

    template <class... T>
    constexpr decltype(auto) tie_as_tuple_with_references(detail::sequence_tuple::tuple<T...>& t) noexcept 
    {
        return detail::make_flat_tuple_of_references(t, sequence_tuple_getter{}, size_t_<0>{}, size_t_<sequence_tuple::tuple<T...>::size_v>{});
    }

    template <class... T>
    constexpr decltype(auto) tie_as_tuple_with_references(const detail::sequence_tuple::tuple<T...>& t) noexcept 
    {
        return detail::make_flat_tuple_of_references(t, sequence_tuple_getter{}, size_t_<0>{}, size_t_<sequence_tuple::tuple<T...>::size_v>{});
    }

    template <class Tuple1, std::size_t... I1, class Tuple2, std::size_t... I2>
    constexpr auto my_tuple_cat_impl(const Tuple1& t1, std::index_sequence<I1...>, const Tuple2& t2, std::index_sequence<I2...>) noexcept 
    {
        return detail::tie_as_tuple_with_references(
            sequence_tuple::get<I1>(t1)...,
            sequence_tuple::get<I2>(t2)...
        );
    }

    template <class Tuple1, class Tuple2>
    constexpr auto my_tuple_cat(const Tuple1& t1, const Tuple2& t2) noexcept 
    {
        return detail::my_tuple_cat_impl(
            t1, detail::make_index_sequence< Tuple1::size_v >{},
            t2, detail::make_index_sequence< Tuple2::size_v >{}
        );
    }

    template <class TupleOrUserType, class Getter, std::size_t Begin, std::size_t Size>
    constexpr auto make_flat_tuple_of_references(TupleOrUserType& t, const Getter& g, size_t_<Begin>, size_t_<Size>) noexcept 
    {
        constexpr std::size_t next_size = Size / 2;
        return detail::my_tuple_cat(
            detail::make_flat_tuple_of_references(t, g, size_t_<Begin>{}, size_t_<next_size>{}),
            detail::make_flat_tuple_of_references(t, g, size_t_<Begin + Size / 2>{}, size_t_<Size - next_size>{})
        );
    }

    template <class TupleOrUserType, class Getter, std::size_t Begin>
    constexpr sequence_tuple::tuple<> make_flat_tuple_of_references(TupleOrUserType&, const Getter&, size_t_<Begin>, size_t_<0>) noexcept 
    {
        return {};
    }

    template <class TupleOrUserType, class Getter, std::size_t Begin>
    constexpr auto make_flat_tuple_of_references(TupleOrUserType& t, const Getter& g, size_t_<Begin>, size_t_<1>) noexcept 
    {
        return detail::tie_as_tuple_with_references(
            g.get(t, size_t_<Begin>{})
        );
    }

}}//qor_reflection::detail

#endif//QOR_PP_H_REFLECTION_DETAIL_MAKEFLATTUPLEOFREFERENCES
