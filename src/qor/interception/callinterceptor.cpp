// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "callinterceptor.h"
#include "flystrap.h"

namespace qor {

	CallInterceptor::CallInterceptor() : Flyer< CallInterceptor, FlyStrapBase >()
	{
		Push();
		if( m_pPrevious )
		{
			FlyStrapBase* pFlyStrapBase = dynamic_cast< FlyStrapBase* >( m_pPrevious );
			if( pFlyStrapBase )
			{
				pFlyStrapBase->OnDeactivate();
			}
		}
		OnActivate();
	}

	CallInterceptor::~CallInterceptor()
	{
		FlyStrap* pNext = Next( (FlyStrap*)(nullptr) );

		if( pNext )
		{
			pNext->UnStrap();
		}

		if( m_pPrevious )
		{
			FlyStrapBase* pFlyStrapBase = dynamic_cast< FlyStrapBase* >( m_pPrevious );
			if( pFlyStrapBase )
			{
				pFlyStrapBase->OnReactivate();
			}
		}
		Pop();
	}

	void CallInterceptor::CallMade( CallContext* pCall, IFunctionContext* pFunction)
	{
		FlyStrap* pNext = Next( (FlyStrap*)(nullptr) );
		if( pNext )
		{
			pNext->CallPre( pCall, pFunction );
		}
	}

	void CallInterceptor::OnReturnAssignment( CallContext* pCall )
	{
		FlyStrap* pNext = Next( (FlyStrap*)(nullptr) );
		if( pNext )
		{
			pNext->CallOnReturnAssignment( pCall );
		}
	}

	void CallInterceptor::OnReturn(CallContext* pCall)
	{
		FlyStrap* pNext = Next((FlyStrap*)(nullptr));
		if (pNext)
		{
			pNext->OnReturn(pCall);
		}
	}

	void CallInterceptor::CallCompleted( CallContext* pCall )
	{
		FlyStrap* pNext = Next( (FlyStrap*)(nullptr) );
		if( pNext )
		{
			pNext->CallPost( pCall );
		}
	}

}//qor
