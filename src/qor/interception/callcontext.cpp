// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../../configuration/configuration.h"
#include "callcontext.h"
#include "callinterceptor.h"
#include "src/qor/reference/newref.h"

namespace qor{

	ParameterBase::ParameterBase(const ParameterBase& src)
	{
		*this = src;
	}

	ParameterBase& ParameterBase::operator = (const ParameterBase& src)
	{
		m_p = src.m_p;
		return *this;
	}

	void ParameterBase::Clear(void)
	{
		m_p = nullptr;
	}

	CallContext::CallContext()
	{
		m_ucParamCount = 0;
	}

	CallContext::~CallContext()
	{
		//Cleanup();
	}

	void CallContext::CallMade(IFunctionContext* pCalledContext)
	{
		//Execution has reached the context of the callee
		typename ref_of< CallInterceptor >::type ptrInterceptor = new_ref< CallInterceptor >();
		if (!ptrInterceptor.IsNull())
		{
			ptrInterceptor->CallMade(this, pCalledContext);
		}
	}

	void CallContext::OnReturnAssignment()
	{
		typename ref_of< CallInterceptor >::type ptrInterceptor = new_ref< CallInterceptor >();
		if (!ptrInterceptor.IsNull())
		{
			ptrInterceptor->OnReturnAssignment(this);
		}
	}

	void CallContext::OnReturn()
	{
		typename ref_of< CallInterceptor >::type ptrInterceptor = new_ref< CallInterceptor >();
		if (!ptrInterceptor.IsNull())
		{
			ptrInterceptor->OnReturn(this);
		}
	}

	void CallContext::CallCompleted()
	{
		//Execution of the callee is winding up in preparation for returning
		typename ref_of< CallInterceptor >::type ptrInterceptor = new_ref< CallInterceptor >();
		if (!ptrInterceptor.IsNull())
		{
			ptrInterceptor->CallCompleted(this);
		}
	}

	ParameterBase* CallContext::Parameters(void)
	{
		return m_aParameters;	//Access to the list of registered parameters
	}

	ParameterBase* CallContext::ReturnValue(void)
	{
		return &m_ReturnValue;
	}


	void CallContext::OutOfLineRegistration(ParameterBase& Param)
	{
		if (m_ucParamCount < 9)
		{
			m_aParameters[m_ucParamCount++] = Param;
		}
	}

}//qor
