// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FUNCTIONCONTEXT
#define QOR_PP_H_FUNCTIONCONTEXT

#include "src/qor/objectcontext/objectcontextbase.h"
#include "src/qor/profiling/profiling.h"
#include "src/qor/profiling/profilereceiver.h"
#include "src/qor/interception/ifunctioncontext.h"
#include "src/qor/interception/callcontext.h"

//A class for tracking function context 
//Usage: Only ever create these on the stack at the beginning of a function

//Use this in free functions
#define qor_pp_fcontext qor::FunctionContext _FContext_(qpr_pp_funcsig, __FILE__, __LINE__, ThisModule().Name(), qor_pp_profile_enabled, qor_pp_coverage_enabled)

//Use this in member functions
#define qor_pp_ofcontext qor::FunctionContext _FContext_(qpr_pp_funcsig, __FILE__, __LINE__, ThisModule().Name(), qor_pp_profile_enabled, qor_pp_coverage_enabled, qor::ObjectContextBase(this))

//--------------------------------------------------------------------------------
namespace qor
{
	//--------------------------------------------------------------------------------
	class qor_pp_module_interface(QOR_INTERCEPTION) FunctionContext : public ProfileReceiver, IFunctionContext
	{

	public:

		FunctionContext();
		FunctionContext(const char* szFuncName, const char* szFile, unsigned int uiLine, const char* szModule, bool bProfile, bool bCoverage, ObjectContextBase ObjContext = ObjectContextBase::NullContext());
		virtual ~FunctionContext();
		bool Locked() const;
		virtual unsigned int Lock();
		virtual unsigned int Unlock();
		bool Trace(bool bNewTrace);
		virtual ICallContext* GetCallContext(void);
		const char* File(void) const;
		const char* Name(void) const;
		unsigned int Line(void) const;
		virtual IFunctionContext* GetParent() const;
		virtual void SetParent(IFunctionContext* pParent);
		virtual unsigned int TraceDepth();
		ObjectContextBase ObjectContext(void) const;
		virtual const char* Module(void) const;
        virtual void Profile(const std::chrono::duration<int64_t, std::milli>);

	protected:

		bool m_bTraceCalls;
		unsigned int m_uiLocked;
		unsigned int m_TraceDepth;
		const char* m_szFuncName;
		const char* m_szFile;
		const char* m_szModule;
		IFunctionContext* m_pParent;
		ObjectContextBase m_ObjContext;
		unsigned int m_uiLine;
		//IThread* m_pThread;
		CallContext m_CallContext;
		qor_pp_profiling_object m_Profiler;

		virtual void Init();

	private:
		
		//void operator delete(void*, void*) noexcept = delete;
		void* operator new(size_t, void*) noexcept = delete;
	};

}//qor

#endif//QOR_PP_H_FUNCTIONCONTEXT
