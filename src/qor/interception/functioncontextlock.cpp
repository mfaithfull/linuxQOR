// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "functioncontextlock.h"
#include "src/framework/thread/currentthread.h"

namespace qor {

    FunctionContextLock::FunctionContextLock() : m_pFunctionContext(nullptr), m_pParentCallContext(nullptr), m_pCallContext(nullptr), m_ulLevel((unsigned long)-1)
    {
        m_pFunctionContext = framework::CurrentThread::GetCurrent().Context().FunctionContext();
        if (m_pFunctionContext)
        {
            m_ulLevel = m_pFunctionContext->Lock();
            m_pCallContext = dynamic_cast<CallContext*>(m_pFunctionContext->GetCallContext());
            if (m_pFunctionContext->GetParent())
            {
                m_pParentCallContext = dynamic_cast<CallContext*>(m_pFunctionContext->GetParent()->GetCallContext());
            }
        }
    }
    
    CallContext* FunctionContextLock::CallContextPtr(void)
    {
        return m_pCallContext;
    }

    CallContext* FunctionContextLock::ParentCallContextPtr(void)
    {
        return m_pParentCallContext;
    }
    
    unsigned long FunctionContextLock::Level(void)
    {
        return m_ulLevel;
    }
    
    FunctionContextLock::~FunctionContextLock()
    {
        if (m_pFunctionContext != nullptr)
        {
            m_pFunctionContext->Unlock();
        }
    }

}//qor
