// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_CALLCONTEXT
#define QOR_PP_H_CALLCONTEXT

#include "icallcontext.h"

namespace qor {

    class qor_pp_module_interface(QOR_INTERCEPTION) ParameterBase
	{
	public:

		inline ParameterBase() { m_p = nullptr; }
		ParameterBase(const ParameterBase& src);
		ParameterBase& operator = (const ParameterBase& src);
		virtual ~ParameterBase() {};

		inline void Clear(void);

	protected:

		void* m_p;
	};

    class qor_pp_module_interface(QOR_INTERCEPTION) CallContext : public ICallContext
    {
    public:

        template< class T >
        class ParameterPass : public ParameterBase
        {

        };

        template< typename T > void qor_pp_forceinline Register(T& _t)
        {
            ParameterPass< T > paramt(_t);
            OutOflineRegistration(paramt);
        }

        template< typename T > void qor_pp_forceinline RegisterReturn(T& _t)
        {
            ParameterPass< T > ReturnValue( _t );
            m_ReturnValue = ReturnValue;
        }

        CallContext(/*const IThread* pThreadContext*/);
        virtual ~CallContext();

    protected:

        virtual void CallMade(IFunctionContext*);
        virtual void CallCompleted(void);
        virtual void OnReturnAssignment(void);
        virtual void OnReturn(void);
		ParameterBase* Parameters(void);						//Access to the array of registered parameters
		ParameterBase* ReturnValue(void);						//Access to the return value

		void qor_pp_noinline OutOfLineRegistration(ParameterBase& Param);
		ParameterBase m_aParameters[10];
		ParameterBase m_ReturnValue;							//Return value
		unsigned char m_ucParamCount;
		//const IThread* m_threadContext;

    };
}//qor

#endif//QOR_PP_H_CALLCONTEXT
