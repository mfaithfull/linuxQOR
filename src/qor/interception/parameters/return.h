// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_INTERCEPTION_PARAMETERS_RETURN
#define QOR_PP_H_INTERCEPTION_PARAMETERS_RETURN

#include "src/qor/interception/functioncontextlock.h"
#include "src/qor/interception/parameters/checks/returncheck.h"

namespace qor {

    template< typename TValue > class NoReturnCheck;

    struct qor_pp_module_interface(QOR_INTERCEPTION) ReturnRegister
    {
    public:
        
        template< typename T >ReturnRegister(T* pReturn)
        {
            FunctionContextLock fcl;
            fcl.ParentCallContextPtr()->RegisterReturn(*pReturn);
        }

        void OnAssignment();
        void OnReturn();
    };

    template< class T, class Check = NoReturnCheck< T > >
    class qor_pp_module_interface(QOR_INTERCEPTION) CheckedReturn : public ReturnRegister
    {
    public:

        typedef CheckedReturn< T, Check > type;

        CheckedReturn() : ReturnRegister(&m_Param), m_bInitialised(false)
        {
            Check AutoCheck;
            Check::Init(m_Param, &AutoCheck);
        }

        CheckedReturn(T param) : ReturnRegister(&m_Param), m_Param(param), m_bInitialised(true)
        {
            Check AutoCheck;
            Check::Check(m_Param, &AutoCheck);
            OnAssignment();
        }
        
        CheckedReturn& operator = (T& value)
        {
            m_Param = value;
            m_bInitialised = true;
            Check AutoCheck;
            Check::Test(m_Param, &AutoCheck);
            OnAssignment();
            return *this;
        }

        operator T()
        {
            if (!m_bInitialised)
            {
                 //TODO: maybe raise an issue
                //error::Error<CUninitialisedReturnWarning>("");
            }
            OnReturn();
            return m_Param;
        }

    protected:

        T m_Param;			//Instance of parameter type

    private:

        bool m_bInitialised;

    };

}//qor

#endif//QOR_PP_H_INTERCEPTION_PARAMETERS_RETURN
