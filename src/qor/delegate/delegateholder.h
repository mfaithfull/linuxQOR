// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

/*
	Copyright (C) 2017 by Sergey A Kryukov: derived work
	http://www.SAKryukov.org
	http://www.codeproject.com/Members/SAKryukov

	Based on original work by Sergey Ryazanov:
	"The Impossibly Fast C++ Delegates", 18 Jul 2005
	https://www.codeproject.com/articles/11015/the-impossibly-fast-c-delegates

	MIT license:
	http://en.wikipedia.org/wiki/MIT_License

	Original publication: https://www.codeproject.com/Articles/1170503/The-Impossibly-Fast-Cplusplus-Delegates-Fixed

*/

#ifndef QOR_PP_H_DELEGATEHOLDER
#define QOR_PP_H_DELEGATEHOLDER

namespace qor {

    template< typename T >
    class DelegateHolder;

    template< typename ret_t, typename ...params_t >
    class DelegateHolder< ret_t(params_t...)>
    {
    protected:

        using stub_type = ret_t(*)(void* this_ptr, params_t...);

        struct InvocationElement
        {
            InvocationElement() = default;

            InvocationElement(void* this_ptr, stub_type aStub) : object(this_ptr), stub(aStub){}

            void Clone(InvocationElement& target) const
            {
                target.stub = stub;
                target.object = object;
            }

            bool operator == (const InvocationElement& another) const
            {
                return another.stub == stub && another.object == object;
            }

            bool operator != (const InvocationElement& another) const
            {
                return another.stub != stub || another.stub != object;
            }

            void* object = nullptr;
            stub_type stub = nullptr;

        };
    };

}//qor

#endif//QOR_PP_H_DELEGATEHOLDER
