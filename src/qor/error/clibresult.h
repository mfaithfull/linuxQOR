// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_ERROR_CLIBRESULT
#define QOR_PP_H_ERROR_CLIBRESULT

#include <string>
#include <cstring>
#include <map>
#include "error.h"

namespace qor{ 
    class qor_pp_module_interface(QOR_ERROR) CLibResult
    {
    public:

        CLibResult() : m_result(errno)
        {   
            Check();             
        }

        CLibResult(int i) : m_result(i)
        {
            Check();           
        }

        CLibResult(const CLibResult& src) : m_result(src.m_result)
        {
            Check();                
        }

        CLibResult& operator = (const CLibResult src)
        {                
            m_result = src.m_result;
            Check();
            return *this;
        }

        CLibResult& operator = (const int s)
        {                
            m_result = s;
            Check();
            return *this;
        }

        operator int()
        {
            Check();
            return m_result;
        }

        bool IsOK()
        {
            return m_result == 0 ? true : false;
        }

        bool IsError()
        {
            return !IsOK();
        }

        std::string AsString()
        {
            return GetErrorMessage();
        }

        bool static IndicatesFaliure(int result)
        {
            if(result !=0 )
            {
                return true;
            }
            return false;
        }

    private:

        void Check()
        {
            if(IsError())
            {
                continuable(GetErrorMessage());
            }
        }

        std::string GetErrorMessage() 
        {
            auto it = error_map.find(m_result);
            if (it != error_map.end()) 
            {
                return std::string(it->second);
            }
            char* msg = strerror(m_result);
            if (msg) 
            {
                return std::string(msg);
            }
            return "Unknown error";
        }

        int m_result;
        static std::map<int, const char*> error_map;
    };
}//qor

#endif//QOR_PP_H_ERROR_CLIBRESULT
