// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_ERROR_FATAL
#define QOR_PP_H_ERROR_FATAL

#include "severityissue.h"

namespace qor{ 

    class qor_pp_module_interface(QOR_ERROR) Fatal : public SeverityTemplateIssue<Severity::Fatal_Error>
    {
    public:
        Fatal(const std::string& message);
        virtual ~Fatal() noexcept = default;
        Fatal& operator = (const Fatal& src);
        virtual void Handle();
        virtual void Escalate();
        virtual void Ignore();
    };

    qor_pp_module_interface(QOR_ERROR) void fatal(const std::string& message);

    class qor_pp_module_interface(QOR_ERROR) Serious : public SeverityTemplateIssue<Severity::Serious_Error>
    {
    public:
        Serious(const std::string& message);
        virtual ~Serious() noexcept = default;
        Serious& operator = (const Serious& src);
        virtual void Handle();
        virtual void Escalate();
        virtual void Ignore();
    };

    qor_pp_module_interface(QOR_ERROR) void serious(const std::string& message);

    class qor_pp_module_interface(QOR_ERROR) Continuable : public SeverityTemplateIssue<Severity::Continuable_Error>
    {
    public:
        Continuable(const std::string& message);
        virtual ~Continuable() noexcept = default;
        Continuable& operator = (const Continuable& src);
        virtual void Escalate();
    };

    qor_pp_module_interface(QOR_ERROR) void continuable(const std::string& message);

    class qor_pp_module_interface(QOR_ERROR) Warning : public SeverityTemplateIssue<Severity::Warning>
    {
    public:
        Warning(const std::string& message);
        virtual ~Warning() noexcept = default;
        Warning& operator = (const Warning& src);
        virtual void Escalate();
    };

    qor_pp_module_interface(QOR_ERROR) void warning(const std::string& message);

    class qor_pp_module_interface(QOR_ERROR) Note : public SeverityTemplateIssue<Severity::Note>
    {
    public:
        Note(const std::string& message);
        virtual ~Note() noexcept = default;
        Note& operator = (const Note& src);
        virtual void Escalate() {}
    };

    qor_pp_module_interface(QOR_ERROR) void note(const std::string& message);

}//qor

#endif//QOR_PP_H_ERROR_FATAL
