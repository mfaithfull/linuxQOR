// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_FLYERREF
#define QOR_PP_H_FLYERREF

#include <atomic>
#include "src/qor/sync/sync.h"
#include "src/qor/instance/instance.h"
#include "src/qor/memory/memory.h"

namespace qor{

    //A weak reference to an object that must already exist down the stack from this reference
	//FlyerRef is inherently single threaded. It always referes to an object local to the same 
    //thread where it is created. do not pass across threads or share.
	template< class T > 
	class FlyerRef final
	{
	public:

        FlyerRef() : m_p(nullptr)
		{
		}

        FlyerRef(const T* pt) : m_p(const_cast<T*>(pt))
		{
		}

        FlyerRef(const FlyerRef< T >& src)
		{
            m_p = src.m_p;
		}

		FlyerRef(FlyerRef< T >&& Src) noexcept
		{
			m_p = Src.m_p;
		}

        ~FlyerRef() = default;

		FlyerRef& operator = (const FlyerRef< T >& src)
		{
			if (this != &src)
			{
				m_p = src.m_p;
			}
			return *this;
		}

        FlyerRef& operator = (FlyerRef< T >&& src)
		{
			if (this != &src)
			{
				m_p = src.m_p;
			}
			return *this;
		}

		//Two references are equal if they refer to the same object
		bool operator == (const FlyerRef< T >& cmp) const
		{
			return (m_p == cmp.m_p);
		}

		operator T* (void) const
		{
			return const_cast<T*>(m_p);
		}

		T& operator() (void) const
		{
			if (m_p == nullptr)
			{
				throw new std::logic_error("Null reference exception: A reference must refer to an object in order to be used.");
			}
			return const_cast<T&>(*m_p);
		}

		T* operator -> () const
		{
			if (m_p == nullptr)
			{
				throw new std::logic_error("Null reference exception: A reference must refer to an object in order to be used.");
			}
			return const_cast<T*>(m_p);
		}

		void Dispose(void)
		{
		}

		template< class TDerived >
		TDerived* As(void)
		{
			return dynamic_cast<TDerived*>(m_p);
		}

		template< class TDerived >
		FlyerRef< TDerived > AsRef(void)
		{
			if (dynamic_cast<TDerived*>(m_p) != nullptr)
			{
				return FlyerRef< TDerived >(reinterpret_cast<TDerived*>(m_p));
			}
			return FlyerRef< TDerived >(nullptr);
		}

		bool IsNull(void) const
		{
			return m_p == nullptr;
		}

		bool IsNotNull(void) const
		{
			return m_p != nullptr;
		}

		bool IsOwner(void) const
		{
			return false;
		}

		template< class TDerived >
		bool Configure()
		{
			return false;
		}

		template< class TDerived, typename... _p >
		bool Configure(_p... p1)
		{
			return false;
		}

		void Lock() const
		{
		}

		void Unlock() const
		{
		}

	protected:

        const T* m_p;
	};

}//qor

#endif//QOR_PP_H_FLYERREF
