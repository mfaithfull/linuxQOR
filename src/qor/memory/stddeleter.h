// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_STDDELETER
#define QOR_PP_H_STDDELETER

#include <memory>
//#include <xmemory>
#include "memory.h"

namespace qor{

	template <class _Ty>
	struct qor_std_deleter
	{
		constexpr qor_std_deleter() noexcept = default;

		template <class _Ty2, std::enable_if_t<std::is_convertible_v<_Ty2*, _Ty*>, int> = 0>
		qor_std_deleter(const qor_std_deleter<_Ty2>&) noexcept {}

		void operator()(const _Ty* _Ptr) const noexcept /* strengthened */ 
		{
			static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");
			source_of<_Ty>::type::Free( reinterpret_cast<byte*>(const_cast<std::remove_cv<_Ty>::type*>(_Ptr)), sizeof(_Ty) );
		}
	};

	template <class _Ty>
	struct qor_std_deleter<_Ty[]> { // default deleter for unique_ptr to array of unknown size
		constexpr qor_std_deleter() noexcept = default;

		template <class _Uty, std::enable_if_t<std::is_convertible_v<_Uty(*)[], _Ty(*)[]>, int> = 0>
		qor_std_deleter(const qor_std_deleter<_Uty[]>&) noexcept {}

		template <class _Uty, std::enable_if_t<std::is_convertible_v<_Uty(*)[], _Ty(*)[]>, int> = 0>
		void operator()(_Uty* _Ptr) const noexcept /* strengthened */ 
		{
			static_assert(0 < sizeof(_Uty), "can't delete an incomplete type");
			source_of<_Uty>::type::Free(reinterpret_cast<byte*>(_Ptr), sizeof(_Uty));
		}
	};

}//qor

#endif//QOR_PP_H_STDDELETER
