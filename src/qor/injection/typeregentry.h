// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_TYPEREGENTRY
#define QOR_PP_H_TYPEREGENTRY

#include "typeregistry.h"
#include "src/qor/reference/reference.h"

namespace qor {

    template<class I>
    class IndirectFactory   //This is what gets registered in the TypeRegistry but the real type may be one of the derived types below
    {
    public:
        virtual ref_of<I>::type Construct(size_t count = 1) const
        {
            return InternalFactory<I>::Construct(count);
        }

        virtual void Destruct( I* pt, size_t count = 1) const
        {
            InternalFactory<I>::Destruct(pt, count);
        }
    };

    template<class I, typename... _p>
    class IndirectFactorywithParams : public IndirectFactory<I>
    {
    public:
        virtual ref_of<I>::type Construct(size_t count, _p... p1) const
        {
            return InternalFactory<I>::template Construct<_p...>(count, p1...);
        }
    };


    template<class T, class I = T, typename... _p>
    class TypeRegEntryWithParams : public IndirectFactorywithParams<I, _p...>
    {
    public:

        inline TypeRegEntryWithParams()
        {
            TheTypeRegistry()->Register( *(guid_of<I>::guid()), TypedAny< IndirectFactory<I> >(dynamic_cast< IndirectFactory<I>* >(this)));
        }

        ~TypeRegEntryWithParams()
        {
            TheTypeRegistry()->Unregister( *(guid_of<I>::guid()));
        }

        virtual ref_of<I>::type Construct(size_t count, _p... p1) const
        {
            return InternalFactory<T>::template Construct<_p...>(count, p1...).template AsRef<I>();
        }

        virtual ref_of<I>::type Construct(size_t count = 1) const
        {
            return InternalFactory<T>::Construct(count).template AsRef<I>();
        }

        virtual void Destruct( I* pt, size_t count = 1) const
        {
            InternalFactory<T>::Destruct(dynamic_cast<T*>(pt), count);
        }
    };

    template<class T, class I = T>
    class TypeRegEntry : public IndirectFactory<I>
    {
    public:

        inline TypeRegEntry()
        {
            TheTypeRegistry()->Register( *(guid_of<I>::guid()), TypedAny< IndirectFactory<I> >(dynamic_cast< IndirectFactory<I>* >(this)));
        }

        ~TypeRegEntry()
        {
            TheTypeRegistry()->Unregister( *(guid_of<I>::guid()));
        }

        virtual ref_of<I>::type Construct(size_t count = 1) const
        {
            return InternalFactory<T>::Construct(count).template AsRef<I>();
        }

        virtual void Destruct( I* pt, size_t count = 1) const
        {
            InternalFactory<T>::Destruct(dynamic_cast<T*>(pt), count);
        }
    };


}//qor

#endif//QOR_PP_H_TYPEREGENTRY
