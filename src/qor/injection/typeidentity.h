// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_TYPEIDENTITY
#define QOR_PP_H_TYPEIDENTITY

#include <typeinfo>
#include <typeindex>

#include "src/platform/compiler/compiler.h"
#include "src/qor/datastructures/guid.h"

namespace qor{

    template<typename T>
    struct id_of
    {
        constexpr index = std::type_index(typeid(T));
    };

    template<typename T>
    struct name_of
    {
        std::string name()
        {
            return compiler::demangle<T>();
        }
    };

    template<typename T>
    struct guid_of
    {
        GUID guid()
        {
            return null_guid;
        }
    };

//Preprocessor macro shorthand for declaring a guid_of template specialisation
#   define qor_pp_declare_guid_of(_CLASS,_GUID)\
    template<> struct guid_of< _CLASS >\
    {\
        GUID guid()\
        {\
            return _GUID;\
        }\
    };

//Example: qor_pp_declare_guid_of(IFeature, {0x00000000, 0x0000, 0x0000, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0}});

}//qor

#endif//QOR_PP_H_TYPEIDENTITY
