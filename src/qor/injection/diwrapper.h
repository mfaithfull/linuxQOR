// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_INJECTION_DIWRAPPER
#define QOR_PP_H_INJECTION_DIWRAPPER

#define qor_pp_did(INTERFACE, PARAM) DIWrapper<INTERFACE> PARAM = DIWrapper<INTERFACE>()
#define qor_pp_dii(INTERFACE, PARAM) DIWrapper<INTERFACE> PARAM

namespace qor{

	template<typename Interface>
	class DIWrapper final
	{
	private:

		typename ref_of<Interface>::type m_instance;

	public:

		template< typename... _p >
		DIWrapper(_p&&... p1)
		{
			m_instance = new_ref<Interface>(std::forward<_p&&>(p1)...);
		}

		DIWrapper(typename ref_of<Interface>::type p1)
		{
			m_instance = p1;
		}

		~DIWrapper() = default;

		operator typename ref_of<Interface>::type() const
		{
			return m_instance;
		}

		typename ref_of<Interface>::type operator() (void) const
		{
			return m_instance;
		}
	};

}//qor

#endif//QOR_PP_H_INJECTION_DIWRAPPER
