// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_UNSAFEANYPROPERTY
#define QOR_PP_H_UNSAFEANYPROPERTY

#include <string.h>
#include <typeinfo>

#include "src/platform/compiler/compiler.h"

namespace qor {

    //Wraps a void pointer as an object and provides an unsafe cast to any type
    //Don't use it unless you know 100% what the real type is
    class qor_pp_module_interface(QOR_OBJECTCONTEXT) UnsafeAnyProperty
    {
    public:

        UnsafeAnyProperty() : m_internalCopy(nullptr) {}

        UnsafeAnyProperty(size_t size)
        {
            m_internalCopy = new byte[size];
            memset(m_internalCopy, 0, size);
        }

        UnsafeAnyProperty(size_t size, void* data)
        {
            m_internalCopy = new byte[size];
            if (data)
            {
                memcpy(m_internalCopy, data, size);
            }
            else
            {
                memset(m_internalCopy, 0, size);
            }
        }

        UnsafeAnyProperty(size_t size, const UnsafeAnyProperty & src) : m_internalCopy(new byte[size])
        {
            memcpy(m_internalCopy, src.m_internalCopy, size);
        }

        UnsafeAnyProperty& operator = (const UnsafeAnyProperty& src)
        {
            if (&src != this)
            {
                delete m_internalCopy;
                m_internalCopy = new byte[Size()];
                memcpy(m_internalCopy, src.m_internalCopy, Size());
            }
            return *this;
        }

        virtual ~UnsafeAnyProperty()
        {
            delete m_internalCopy;
        }

        bool IsNull() const
        {
            return m_internalCopy == nullptr ? true : false;
        }

        void* Ptr() const
        {
            return m_internalCopy;
        }

        virtual size_t Size() const
        {
            return 0;
        }

        virtual UnsafeAnyProperty* Clone() const
        {
            return nullptr;
        }

        virtual const char* TypeId() const
        {
            return typeid(void).name();
        }

        template<class T>
        T* GetAs() const
        {
            if (sizeof(T) == Size() && typeid(T).name() == TypeId())
            {
                return reinterpret_cast<T*> (m_internalCopy);
            }
            return nullptr;
        }

    protected:

        void Set(void* p)
        {
            memcpy(m_internalCopy, p, Size());
        }

        byte* m_internalCopy;
        
    };
}//qor

#endif//QOR_PP_H_UNSAFEANYPOINTER
