// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <string.h>
#include "anyobject.h"


namespace qor {

    AnyObject AnyObject::nullObject;

    AnyObject& AnyObject::NullObject()
	{
		return AnyObject::nullObject;
	}

	AnyObject::AnyObject()
	{
		m_p = nullptr;
		Clear();
	}

    AnyObject::AnyObject(const AnyObject& src)
	{
		*this = src;
	}

    AnyObject& AnyObject::operator = (const AnyObject& src)
	{
		if (src.m_p != nullptr)
		{
			Local_memcpy(m_backing, src.m_backing, (sizeof(ObjectContextBasePointer) + sizeof(double)));
			m_p = reinterpret_cast<UnsafeAnyPointer*>(m_backing + (reinterpret_cast<byte*>(src.m_p) - src.m_backing));
		}
		else
		{
			m_p = nullptr;
			Clear();
		}
		return *this;
	}

    AnyObject::~AnyObject()
	{
		if (m_p)
		{
			m_p->~UnsafeAnyPointer();
		}
	}

	byte* AnyObject::Local_memcpy(byte* s1, const byte* s2, size_t n)
	{
		byte* p1 = s1;
		byte* p2 = const_cast<byte*>(s2);

		while (n > 0)
		{
			*p1 = *p2;
			p1++;
			p2++;
			n--;
		}

		return s1;
	}
	
	void AnyObject::Clear(void)
	{
		memset(m_backing, 0, sizeof(ObjectContextBasePointer) + sizeof(double));
	}

}//qor
