// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_ANYOBJECT
#define QOR_PP_H_ANYOBJECT

#include "src/qor/objectcontext/typedanypointer.h"
#include "src/platform/compiler/compiler.h"

namespace qor{

    //A type erased container for a typed pointer to anything
    class qor_pp_module_interface(QOR_OBJECTCONTEXT) AnyObject
    {
    public:

        template< typename T > AnyObject(const T* pt)
        {
            m_p = new (m_backing)TypedAnyPointer< T >(pt);
        }

		AnyObject();
		AnyObject(const AnyObject& src);
		AnyObject& operator = (const AnyObject& src);
		virtual ~AnyObject();

		inline bool IsNull() const
		{
			return (m_p == nullptr || m_p->IsNull());
		}

        template< typename T>
        operator T* () const
		{
			TypedAnyPointer< T >* op = dynamic_cast< TypedAnyPointer< T >* >(m_p);
			return op ? op->operator T *() : nullptr;
		}

		static AnyObject& NullObject(void);
		static AnyObject nullObject;

		UnsafeAnyPointer* Ptr()
		{
			return m_p;
		}

    protected:

		UnsafeAnyPointer* m_p;

	private:

		typedef TypedAnyPointer< AnyObject > ObjectContextBasePointer;
		byte m_backing[sizeof(ObjectContextBasePointer) + sizeof(double)];

		byte* Local_memcpy(byte* s1, const byte* s2, size_t n);
		void Clear(void);
    };

}//qor

#endif//QOR_PP_H_ANYOBJECT
