// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_TYPEDANY
#define QOR_PP_H_TYPEDANY

#include "src/qor/objectcontext/anyobject.h"

namespace qor{

    //a type aware container for a pointer to anything
    template< class T >
    class TypedAny : public AnyObject
    {
    public:

        TypedAny(const T* pt) : AnyObject(pt){}

        virtual ~TypedAny() = default;

        template< typename U > constexpr bool IsTypeTarget(const U*) const
        {
            return false;
        }

        constexpr bool IsTypeTarget(const T*) const
        {
            return true;
        }

        operator T* () const
		{
            return (dynamic_cast< TypedAnyPointer< T >* >(m_p))->operator->();
		}

    };

}//qor

#endif//QOR_PP_H_TYPEDANY
