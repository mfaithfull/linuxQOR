// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_SYNC_SPINMUTEX
#define QOR_PP_H_SYNC_SPINMUTEX

#include <atomic>

namespace qor
{
	class spin_mutex
	{
	public:

		/// Initialise the mutex to the unlocked state.
		spin_mutex() noexcept;

		/// Attempt to lock the mutex without blocking
		///
		/// \return
		/// true if the lock was acquired, false if the lock was already held
		/// and could not be immediately acquired.
		bool try_lock() noexcept;

		/// Block the current thread until the lock is acquired.
		///
		/// This will busy-wait until it acquires the lock.
		///
		/// This has 'acquire' memory semantics and synchronises
		/// with prior calls to unlock().
		void lock() noexcept;

		/// Release the lock.
		///
		/// This has 'release' memory semantics and synchronises with
		/// lock() and try_lock().
		void unlock() noexcept;

	private:

		std::atomic<bool> m_isLocked;

	};
}

#endif//QOR_PP_H_SYNC_SPINMUTEX