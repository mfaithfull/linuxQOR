// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"


#include "lightweightmanualresetevent.h"

//prefer a platform specific variant over this not so lightweight platfrom generic version

namespace qor{ namespace detail{

    #include <system_error>

    lightweight_manual_reset_event::lightweight_manual_reset_event(bool initiallySet)
        : m_isSet(initiallySet)
    {
    }
    
    lightweight_manual_reset_event::~lightweight_manual_reset_event()
    {
    }
    
    void lightweight_manual_reset_event::set() noexcept
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_isSet = true;
        m_cv.notify_all();
    }
    
    void lightweight_manual_reset_event::reset() noexcept
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_isSet = false;
    }
    
    void lightweight_manual_reset_event::wait() noexcept
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        m_cv.wait(lock, [this] { return m_isSet; });
    }
    
}}//qor::detail
