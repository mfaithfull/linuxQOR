// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <thread>

#include "spinwait.h"

namespace{ namespace local {
        constexpr std::uint32_t yield_threshold = 10;
}}//::local
    
namespace qor{

    spin_wait::spin_wait() noexcept
    {
        reset();
    }

    bool spin_wait::next_spin_will_yield() const noexcept
    {
        return m_count >= local::yield_threshold;
    }

    void spin_wait::reset() noexcept
    {
        static const std::uint32_t initialCount = std::thread::hardware_concurrency() > 1 ? 0 : local::yield_threshold;
        m_count = initialCount;
    }

    void spin_wait::spin_one() noexcept
    {
        if (next_spin_will_yield())
        {
            std::this_thread::yield();
        }

        ++m_count;
        if (m_count == 0)
        {
            // Don't wrap around to zero as this would go back to
            // busy-waiting.
            m_count = local::yield_threshold;
        }
    }

}//qor
