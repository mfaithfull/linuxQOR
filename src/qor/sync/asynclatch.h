// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_SYNC_ASYNCLATCH
#define QOR_PP_H_SYNC_ASYNCLATCH

#include <atomic>
#include <cstdint>
#include <coroutine>

#include "asyncmanualresetevent.h"

namespace qor
{
	class AsyncLatch
	{
	public:

		/// Construct the latch with the specified initial count.
		///
		/// \param initialCount
		/// The initial count of the latch. The latch will become signalled once
		/// \c this->count_down() has been called \p initialCount times.
		/// The latch will be immediately signalled on construction if this
		/// parameter is zero or negative.
		AsyncLatch(std::ptrdiff_t initialCount) noexcept
			: m_count(initialCount)
			, m_event(initialCount <= 0) {}

		/// Query if the latch has become signalled.
		///
		/// The latch is marked as signalled once the count reaches zero.
		bool is_ready() const noexcept { return m_event.is_set(); }

		/// Decrement the count by n.
		///
		/// Any coroutines awaiting this latch will be resumed once the count
		/// reaches zero. ie. when this method has been called at least 'initialCount'
		/// times.
		///
		/// Any awaiting coroutines that are currently suspended waiting for the
		/// latch to become signalled will be resumed inside the last call to this
		/// method (ie. the call that decrements the count to zero).
		///
		/// \param n
		/// The amount to decrement the count by.
		void count_down(std::ptrdiff_t n = 1) noexcept
		{
			if (m_count.fetch_sub(n, std::memory_order_acq_rel) <= n)
			{
				m_event.set();
			}
		}

		/// Allows the latch to be awaited within a coroutine.
		///
		/// If the latch is already signalled (ie. the count has been decremented
		/// to zero) then the awaiting coroutine will continue without suspending.
		/// Otherwise, the coroutine will suspend and will later be resumed inside
		/// a call to `count_down()`.
		auto operator co_await() const noexcept
		{
			return m_event.operator co_await();
		}

	private:

		std::atomic<std::ptrdiff_t> m_count;
		AsyncManualResetEvent m_event;

	};
}

#endif//QOR_PP_H_SYNC_ASYNCLATCH
