// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include <cassert>

#include "asyncmanualresetevent.h"

namespace qor{

    AsyncManualResetEvent::AsyncManualResetEvent(bool initiallySet) noexcept
        : m_state(initiallySet ? static_cast<void*>(this) : nullptr) {}

    AsyncManualResetEvent::~AsyncManualResetEvent()
    {
        // There should be no coroutines still awaiting the event.
        assert(
            m_state.load(std::memory_order_relaxed) == nullptr ||
            m_state.load(std::memory_order_relaxed) == static_cast<void*>(this));
    }

    bool AsyncManualResetEvent::is_set() const noexcept
    {
        return m_state.load(std::memory_order_acquire) == static_cast<const void*>(this);
    }

    AsyncManualResetEventOperation AsyncManualResetEvent::operator co_await() const noexcept
    {
        return AsyncManualResetEventOperation{ *this };
    }

    void AsyncManualResetEvent::set() noexcept
    {
        void* const setState = static_cast<void*>(this);

        // Needs 'release' semantics so that prior writes are visible to event awaiters
        // that synchronise either via 'is_set()' or 'operator co_await()'.
        // Needs 'acquire' semantics in case there are any waiters so that we see
        // prior writes to the waiting coroutine's state and to the contents of
        // the queued AsyncManualResetEventOperation objects.
        void* oldState = m_state.exchange(setState, std::memory_order_acq_rel);
        if (oldState != setState)
        {
            auto* current = static_cast<AsyncManualResetEventOperation*>(oldState);
            while (current != nullptr)
            {
                auto* next = current->m_next;
                current->m_awaiter.resume();
                current = next;
            }
        }
    }

    void AsyncManualResetEvent::reset() noexcept
    {
        void* oldState = static_cast<void*>(this);
        m_state.compare_exchange_strong(oldState, nullptr, std::memory_order_relaxed);
    }

    AsyncManualResetEventOperation::AsyncManualResetEventOperation(
        const AsyncManualResetEvent& event) noexcept
        : m_event(event) {}

    bool AsyncManualResetEventOperation::await_ready() const noexcept
    {
        return m_event.is_set();
    }

    bool AsyncManualResetEventOperation::await_suspend( std::coroutine_handle<> awaiter) noexcept
    {
        m_awaiter = awaiter;

        const void* const setState = static_cast<const void*>(&m_event);

        void* oldState = m_event.m_state.load(std::memory_order_acquire);
        do
        {
            if (oldState == setState)
            {
                // State is now 'set' no need to suspend.
                return false;
            }

            m_next = static_cast<AsyncManualResetEventOperation*>(oldState);
        } while (!m_event.m_state.compare_exchange_weak(
            oldState,
            static_cast<void*>(this),
            std::memory_order_release,
            std::memory_order_acquire));

        // Successfully queued this waiter to the list.
        return true;
    }

}//qor
