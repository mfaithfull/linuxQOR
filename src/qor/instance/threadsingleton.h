// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_INSTANCE_THREADSINGLETON
#define QOR_PP_H_INSTANCE_THREADSINGLETON

#include <stddef.h>

#include "src/qor/reference/reference.h"
#include "src/qor/factory/factory.h"
#include "src/qor/sync/recursive_mutex.h"
#include "src/qor/sync/lock.h"

//The thread singleton instancer gives out the per thread instance each time unless it it destroyed by there being no more references to it. Then it gives a new one

namespace qor{

    namespace detail {

        template <class T>    
        class ThreadInstanceHolder final
        {
        public:
            constexpr ThreadInstanceHolder() {}

            ~ThreadInstanceHolder()
            {
                if(bInitialised)
                {
                    theRef.Dispose();
                    bInitialised = false;
                }
            }

            typename ref_of<T>::type Instance(size_t count)
            {
                if( !bInitialised )
                {                
                    theRef = factory_of<T>::type::Construct(count);
                    bInitialised = true;
                }
                return theRef;
            }

            template<typename... _p >
            typename ref_of<T>::type Instance(size_t count, _p&&... p1)
            {
                if( !bInitialised )
                {                
                    theRef = factory_of<T>::type::Construct(count, p1...);
                    bInitialised = true;
                }
                return theRef;
            }

            void Release()
            {
                if(bInitialised)
                {
                    factory_of<T>::type::Destruct(theRef);
                }
            }

        public:
            static qor_pp_thread_local ref_of<T>::type theRef;
            static qor_pp_thread_local bool bInitialised;
        };
        
    }//detail
    
	class ThreadSingletonInstancer final
	{
	public:

		template< class T >
		static inline void Release(T* pt, size_t count = 1)
		{
			Holder<T>().Release();
		}

		template< class T >
		static inline auto Instance(size_t count = 1)
		{
            return Holder<T>().Instance(count);
		}

        template< class T, typename... _p >
		static inline auto Instance(size_t uiCount, _p&&... p1)
		{
			return Holder<T>().Instance(uiCount, std::forward<_p>(p1)...);
		}
		
	private:

        template< class T>
        static detail::ThreadInstanceHolder<T>& Holder()
        {
            static detail::ThreadInstanceHolder<T> holder;
            return holder;
        }

        ThreadSingletonInstancer() = delete;
		~ThreadSingletonInstancer() = delete;
	};

}//qor

#define qor_pp_implement_thread_singleton(_CLASS)\
template<> qor_pp_thread_local bool qor::detail::ThreadInstanceHolder<_CLASS>::bInitialised = false;\
template<> qor_pp_thread_local ref_of<_CLASS>::type qor::detail::ThreadInstanceHolder<_CLASS>::theRef;\

#endif//QOR_PP_H_INSTANCE_SINGLETON
