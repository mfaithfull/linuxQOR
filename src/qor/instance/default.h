// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_INSTANCE_DEFAULT
#define QOR_PP_H_INSTANCE_DEFAULT

#include <stddef.h>

#include "src/qor/reference/reference.h"
#include "src/qor/factory/factory.h"

//The purpose of an instancer is to determine whether to give out an existing instance
//a new instance or perhaps a recycled instance or to refuse the request.

namespace qor{

    template<typename T> struct factory_of;
    
    //The default instancer gives out unconstrained freshly constructed instance references from the per type factory
	class DefaultInstancer final
	{
	public:

		template< class T >
		static inline void Release(T* pt, size_t uiCount = 1)
		{
			factory_of<T>::type::Destruct(pt, uiCount);
		}

		template< class T >
		static inline void TearDown(T* pt, size_t uiCount = 1)
		{
			factory_of<T>::type::TearDown(pt, uiCount);
		}
		        
		template< class T >
		static inline auto Instance(size_t uiCount = 1)
		{
			return factory_of<T>::type::Construct(uiCount);
		}
		
		template< class T, typename... _p >
		static inline auto Instance(size_t uiCount, _p&&... p1)
		{
			return factory_of<T>::type::Build(uiCount, p1...);
		}

	private:

		DefaultInstancer() = delete;
		~DefaultInstancer() = delete;
	};

}//qor

#include "src/qor/factory/internalfactory.h"
#include "src/qor/factory/externalfactory.h"

#endif//QOR_PP_H_INSTANCE_DEFAULT
