// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_PREPROCESSOR_CONFIG_CONFIG
#define QOR_PP_H_PREPROCESSOR_CONFIG_CONFIG

// qor_pp_config_flags
#
# define qor_pp_config_strict() 0x0001
# define qor_pp_config_ideal() 0x0002
#
# define qor_pp_config_msvc() 0x0004
# define qor_pp_config_mwcc() 0x0008
# define qor_pp_config_bcc() 0x0010
# define qor_pp_config_edg() 0x0020
# define qor_pp_config_dmc() 0x0040

# ifndef qor_pp_config_flags
#    if defined(__GCCXML__) || defined(__WAVE__) || defined(__MWERKS__) && __MWERKS__ >= 0x3200
#        define qor_pp_config_flags() (qor_pp_config_strict())
#    elif defined(__EDG__) || defined(__EDG_VERSION__)
#        if defined(_MSC_VER) && !defined(__clang__) && (defined(__INTELLISENSE__) || __EDG_VERSION__ >= 308)
#            define qor_pp_config_flags() (qor_pp_config_msvc())
#        else
#            define qor_pp_config_flags() (qor_pp_config_edg() | qor_pp_config_strict())
#        endif
#    elif defined(_MSC_VER) && defined(__clang__)
#        define qor_pp_config_flags() (qor_pp_config_strict())
#    elif defined(__MWERKS__)
#        define qor_pp_config_flags() (qor_pp_config_mwcc())
#    elif defined(__DMC__)
#        define qor_pp_config_flags() (qor_pp_config_dmc())
#    elif defined(__BORLANDC__) && __BORLANDC__ >= 0x581
#        define qor_pp_config_flags() (qor_pp_config_strict())
#    elif defined(__BORLANDC__) || defined(__IBMC__) || defined(__IBMCPP__) || defined(__SUNPRO_CC)
#        define qor_pp_config_flags() (qor_pp_config_bcc())
#    elif defined(_MSC_VER)
#        define qor_pp_config_flags() (qor_pp_config_msvc())
#    else
#        define qor_pp_config_flags() (qor_pp_config_strict())
#    endif
# endif
#
# //qor_pp_config_extended_line_info
#
# ifndef qor_pp_config_extended_line_info
#    define qor_pp_config_extended_line_info 0
# endif
#
# //qor_pp_config_errors
#
# ifndef qor_pp_config_errors
#    ifdef NDEBUG
#        define qor_pp_config_errors 0
#    else
#        define qor_pp_config_errors 1
#    endif
# endif
#
# //qor_pp_variadics
#
# define qor_pp_variadics_msvc 0
# if !defined qor_pp_variadics
#    /* variadic support explicitly disabled for all untested compilers */
#    if defined __GCCXML__ || defined __PATHSCALE__ || defined __DMC__ || defined __CODEGEARC__ || defined __BORLANDC__ || defined __MWERKS__ || ( defined __SUNPRO_CC && __SUNPRO_CC < 0x5120 ) || defined __HP_aCC && !defined __EDG__ || defined __MRC__ || defined __SC__ || defined __PGI
#        define qor_pp_variadics 0
#    elif defined(__CUDACC__)
#        define qor_pp_variadics 1
#    elif defined(_MSC_VER) && defined(__clang__)
#        define qor_pp_variadics 1
#    /* VC++ (C/C++) and Intel C++ Compiler >= 17.0 with MSVC */
#    elif defined _MSC_VER && _MSC_VER >= 1400 && (!defined __EDG__ || defined(__INTELLISENSE__) || defined(__INTEL_COMPILER) && __INTEL_COMPILER >= 1700)
#        define qor_pp_variadics 1
#        undef qor_pp_variadics_msvc
#        define qor_pp_variadics_msvc 1
#    /* Wave (C/C++), GCC (C++) */
#    elif defined __WAVE__ && __WAVE_HAS_VARIADICS__ || defined __GNUC__ && defined __GXX_EXPERIMENTAL_CXX0X__ && __GXX_EXPERIMENTAL_CXX0X__
#        define qor_pp_variadics 1
#    /* EDG-based (C/C++), GCC (C), and unknown (C/C++) */
#    elif !defined __cplusplus && __STDC_VERSION__ >= 199901L || __cplusplus >= 201103L
#        define qor_pp_variadics 1
#    else
#        define qor_pp_variadics 0
#    endif
# elif !qor_pp_variadics + 1 < 2
#    undef qor_pp_variadics
#    define qor_pp_variadics 1
#    if defined _MSC_VER && _MSC_VER >= 1400 && !defined(__clang__) && (defined(__INTELLISENSE__) || (defined(__INTEL_COMPILER) && __INTEL_COMPILER >= 1700) || !(defined __EDG__ || defined __GCCXML__ || defined __CUDACC__ || defined __PATHSCALE__ || defined __DMC__ || defined __CODEGEARC__ || defined __BORLANDC__ || defined __MWERKS__ || defined __SUNPRO_CC || defined __HP_aCC || defined __MRC__ || defined __SC__ || defined __IBMCPP__ || defined __PGI))
#        undef qor_pp_variadics_msvc
#        define qor_pp_variadics_msvc 1
#    endif
# else
#    undef qor_pp_variadics
#    define qor_pp_variadics 0
# endif

#endif//QOR_PP_H_PREPROCESSOR_CONFIG_CONFIG