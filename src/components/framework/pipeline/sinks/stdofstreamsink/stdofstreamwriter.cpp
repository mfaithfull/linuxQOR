// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "stdofstreamwriter.h"
#include "src/platform/filesystem/filesystem.h"

namespace qor{ namespace components{ 

    stdofstreamWriter::stdofstreamWriter() : pipeline::Pipeline(), m_Setup(false)
    {        
    }

    stdofstreamWriter::stdofstreamWriter(const std::string& fileName, size_t bufferByteCapacity) : pipeline::Pipeline(), m_Setup(false)
    {
        auto fileSystem = new_ref<platform::FileSystem>();
        fileSystem().Setup();
        platform::FileIndex file(fileSystem().CurrentPath(), fileName);
        SetFile(file);
        SetBufferCapacity(bufferByteCapacity);
        Setup();
    }

    stdofstreamWriter::stdofstreamWriter(platform::FileIndex& fileIndex, size_t bufferByteCapacity) : pipeline::Pipeline(), m_Setup(false)
    {
        SetFile(fileIndex);
        SetBufferCapacity(bufferByteCapacity);
        Setup();
    }

    void stdofstreamWriter::SetFile(platform::FileIndex& fileIndex)
    {
        m_connector.SetFile(fileIndex);
    }

    void stdofstreamWriter::SetBufferCapacity(size_t itemCount)
    {
        m_buffer.SetCapacity(itemCount);
    }

    void stdofstreamWriter::Setup()
    {
        if(m_buffer.Capacity() < 1 )
        {
            m_buffer.SetCapacity(4096);
        }

        if(!m_sink.HasBuffer())
        {
            m_sink.SetBuffer(&m_buffer);
        }

        if(!m_sink.HasSource())
        {
            m_sink.SetSource(&m_source);
        }

        if(!m_sink.HasPlug())
        {
            m_sink.SetPlug(&m_connector);
        }

        if(!m_connector.IsConnected())
        {
            m_connector.Connect();
        }
        m_Setup = true;
    }

    bool stdofstreamWriter::Write(size_t& unitsWritten, size_t unitsToWrite)
    {        
        if(!m_Setup)
        {
            Setup();
        }
        return m_sink.Write(unitsWritten, unitsToWrite);
    }

    bool stdofstreamWriter::Write(const std::string& strData)
    {
        size_t unitsWritten = 0;        
        size_t unitsWrittenAtOnce = 0;

        do
        {
            unitsWrittenAtOnce = 0;
            size_t unitsToWrite = strData.length() - unitsWritten;
            byte* space = m_buffer.WriteRequest(unitsToWrite);
            memcpy( space, strData.c_str() + unitsWritten, unitsToWrite * m_buffer.GetUnitSize());
            m_buffer.WriteAcknowledge(unitsToWrite);
            if(!Write(unitsWrittenAtOnce, unitsToWrite))
            {
                return false;
            }
            if(unitsWrittenAtOnce == 0)
            {
                break;
            }
            unitsWritten += unitsWrittenAtOnce;
        }while(unitsWritten < strData.length());
        return true;
    }

}}//qor::components
