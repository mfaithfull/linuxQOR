// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_PIPELINE_SINK_STDOFSTREAMWRITER
#define QOR_PP_H_COMPONENTS_PIPELINE_SINK_STDOFSTREAMWRITER

#include <functional>
#include "src/framework/pipeline/pipeline.h"
#include "src/framework/pipeline/podbuffer.h"
#include "src/framework/pipeline/sink.h"
#include "src/components/framework/pipeline/connectors/stdfstreamconnector/stdifstreamconnector.h"
#include "stdofstreamsink.h"

namespace qor{ namespace components{ 

    class qor_pp_module_interface(QOR_STDOFSTREAMSINK) stdofstreamWriter : public pipeline::Pipeline
    {
    public:

        //typedef size_t(*process_data_func)(byte*, size_t);
        //using ProcessDataFn = std::function<size_t(byte*, size_t)>;

        stdofstreamWriter();
        stdofstreamWriter(const std::string& fileName, size_t bufferByteCapacity = 4096);
        stdofstreamWriter(platform::FileIndex& fileIndex, size_t bufferByteCapacity = 4096);
        virtual ~stdofstreamWriter() = default;

        void SetFile(platform::FileIndex& fileIndex);
        void SetBufferCapacity(size_t itemCount);

        virtual bool Write(size_t& unitsWritten, size_t unitstoWrite);
        bool Write(const std::string& strData);

    protected:
        
        virtual bool Read(size_t& unitsRead, size_t unitsToRead = 1 ) { return false; }
        void Setup();
        bool m_Setup;
        pipeline::ByteBuffer m_buffer;
        stdofstreamConnector m_connector;
        stdofstreamSink m_sink;
        pipeline::NullSource m_source;
    };

}}//qor::components

#endif//QOR_PP_H_COMPONENTS_PIPELINE_SINK_STDOFSTREAMWRITER
