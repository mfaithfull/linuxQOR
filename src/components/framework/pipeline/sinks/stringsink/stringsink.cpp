// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "stringsink.h"
#include "src/framework/pipeline/source.h"

namespace qor{ namespace components{ 

    std::string StringSink::GetData()
    {
        return m_data;
    }
    
    bool StringSink::Write(size_t& unitsWritten, size_t unitsToWrite)
    {
        return (unitsToWrite == 0 || Pull(unitsWritten, unitsToWrite)) ? Push(unitsWritten, unitsWritten) : false;
    }

    bool StringSink::Pull(size_t& unitsWritten, size_t unitsToWrite)
    {
        return GetFlowMode() == FlowMode::Pull ? 
        (ActualSource()->Read(unitsWritten, unitsToWrite) && (unitsWritten > 0 || unitsToWrite == 0) ? true : false) : true;        
    }

    bool StringSink::Push(size_t& unitsWritten, size_t unitsToWrite)
    {
        if(unitsToWrite > 0)
        {
            pipeline::Buffer* buffer = GetBuffer();
            if(buffer)
            {
                byte* data = buffer->ReadRequest(unitsToWrite);
                size_t bytesWritten = Write(data, buffer->GetUnitSize() * unitsToWrite);
                if(bytesWritten > 0)
                {
                    unitsWritten = bytesWritten / buffer->GetUnitSize();
                    buffer->ReadAcknowledge(unitsWritten);
                    OnWriteSuccess(unitsWritten);
                }
                else //EOF?
                {
                    return false;
                }
                return true;
            }
            return false;
        }
        return true;
    }

    size_t StringSink::Write(byte* data, size_t bytesToWrite)
    {
        m_data.append(std::string((const char*)(data), bytesToWrite));
        return bytesToWrite;
    }

}}//qor::components
