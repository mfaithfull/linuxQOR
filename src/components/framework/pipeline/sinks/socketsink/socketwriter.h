// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_PIPELINE_SINK_SOCKETWRITER
#define QOR_PP_H_COMPONENTS_PIPELINE_SINK_SOCKETWRITER

#include <functional>
#include <arpa/inet.h>
#include "src/framework/pipeline/pipeline.h"
#include "src/framework/pipeline/podbuffer.h"
#include "src/framework/pipeline/sink.h"
#include "src/components/framework/pipeline/connectors/socketclientconnector/socketclientconnector.h"
#include "socketsink.h"

namespace qor{ namespace components{ 

    class qor_pp_module_interface(QOR_SOCKETSINK) SocketWriter : public pipeline::Pipeline
    {
    public:

        SocketWriter();
        virtual ~SocketWriter() = default;

        SocketWriter( 
            const std::string &host, 
            const std::string &ip, 
            int port,
            qor::network::sockets::eAddressFamily address_family = qor::network::sockets::eAddressFamily::AF_INet, 
            qor::network::addrinfo_flags socket_flags = 0, 
            bool tcp_nodelay = false, bool ipv6_v6only = false, time_t timeout_sec = 0, size_t bufferByteCount = 1024);

        virtual void SetBuffer(pipeline::Buffer* buffer);
        void SetBufferCapacity(size_t itemCount);
        void SetPlug(ref_of<SocketClientConnector>::type plug);
        virtual bool Write(size_t& unitsWritten, size_t unitstoWrite);
        ref_of<qor::network::Socket>::type Socket();

        template<typename T>
        bool Write(const T& hdata)
        {        
            auto ndata = HToN(hdata);
            auto buffer = GetBuffer();
            if(buffer)
            {
                size_t unitSize = buffer->GetUnitSize();
                size_t totalUnits = (sizeof(T)/unitSize);
                size_t unitsWritten = 0;        
                size_t unitsWrittenAtOnce;
                do
                {
                    unitsWrittenAtOnce = 0;
                    size_t unitsToWrite = totalUnits - unitsWritten;
                    byte* space = buffer->WriteRequest(unitsToWrite);
                    memcpy( space, GetAddressOfData(ndata) + (unitsWritten * unitSize), unitsToWrite);
                    buffer->WriteAcknowledge(unitsToWrite);
                    if(!Write(unitsWrittenAtOnce, unitsToWrite))
                    {
                        return false;
                    }
                    if(unitsWrittenAtOnce == 0)
                    {
                        break;
                    }
                    unitsWritten += unitsWrittenAtOnce;
                }while(unitsWritten < totalUnits);
                return true;        
            }
            return false;
        }

    protected:
        
        template<typename T>
        T HToN(const T& t)
        {
            return t;
        }

        template<typename T>
        const void* GetAddressOfData(const T& t)
        {
            return (const void*)&const_cast<T&>(t);
        }

        virtual bool Read(size_t& unitsRead, size_t unitsToRead = 1 ) { return false; }
        ref_of<SocketClientConnector>::type m_connector;
        SocketSink m_sink;
        pipeline::NullSource m_source;
    };

    template<>
    uint16_t SocketWriter::HToN(const uint16_t& s)
    {
        return ::htons(s);
    }

    template<>
    uint32_t SocketWriter::HToN(const uint32_t& s)
    {
        return ::htonl(s);
    }

    template<>
    uint64_t SocketWriter::HToN(const uint64_t& s)
    {

        return ((uint64_t)htonl(s & 0xFFFFFFFF) << 32LL) | htonl(s >> 32);
    }

}}//qor::components

#endif//QOR_PP_H_COMPONENTS_PIPELINE_SINK_SOCKETWRITER
