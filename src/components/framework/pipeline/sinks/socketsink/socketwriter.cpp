// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "socketwriter.h"
#include "src/platform/filesystem/filesystem.h"

namespace qor{ namespace components{ 

    SocketWriter::SocketWriter() : pipeline::Pipeline()
    {        
        m_sink.SetParent(this);
        m_sink.SetSource(this);
        this->SetSink(&m_sink);
        this->SetSource(&m_source);
    }

    SocketWriter::SocketWriter( const std::string &host, const std::string &ip, int port, qor::network::sockets::eAddressFamily address_family, qor::network::addrinfo_flags socket_flags, bool tcp_nodelay, bool ipv6_v6only, time_t timeout_sec, size_t bufferByteCount) : SocketWriter()
    {
        SetBufferCapacity(bufferByteCount);
        if(m_connector.IsNull())
        {
            SetPlug(new_ref<SocketClientConnector>());
        }
        m_connector->ConnectToAddress(host, ip, port, address_family, socket_flags, tcp_nodelay, ipv6_v6only, timeout_sec);
    }

    void SocketWriter::SetPlug(ref_of<SocketClientConnector>::type plug)
    {
        m_connector = plug;
        m_sink.SetPlug(plug);
    }

    void SocketWriter::SetBuffer(pipeline::Buffer* buffer)
    {
        Pipeline::SetBuffer(buffer);        
        m_source.SetBuffer(buffer);
        m_sink.SetBuffer(buffer);
    }

    void SocketWriter::SetBufferCapacity(size_t itemCount)
    {
        auto buffer = GetBuffer();
        if(buffer)
        {
            buffer->SetCapacity(itemCount);
        }
    }

    bool SocketWriter::Write(size_t& unitsWritten, size_t unitsToWrite)
    {        
        return ActualSink() ? ActualSink()->Write(unitsWritten, unitsToWrite) : false;
    }

    ref_of<qor::network::Socket>::type SocketWriter::Socket()
    {
        ref_of<qor::network::Socket>::type socket;
        if(m_connector.IsNotNull())
        {
            socket = m_connector->m_Socket;
        }
        return socket;
    }

}}//qor::components
