// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "stdoutsink.h"
#include "src/framework/pipeline/source.h"

namespace qor{ namespace components{ 

    StdOutSink::StdOutSink()
    {
    }

    bool StdOutSink::Write(size_t& unitsWritten, size_t unitsToWrite)
    {
        return Pull(unitsWritten, unitsToWrite) ? Push(unitsWritten, unitsWritten) : false;
    }

    //pull the requested amount of data from the stream
    bool StdOutSink::Pull(size_t& unitsWritten, size_t unitsToWrite)
    {
        if( GetFlowMode() == FlowMode::Pull )
        {
            return (ActualSource()->Read(unitsWritten, unitsToWrite) && (unitsWritten > 0)) ? true : false;
        }
        return true;
    }

    //push the requested amount of data out of the door
    bool StdOutSink::Push(size_t& unitsWritten, size_t unitsToWrite)
    {
        pipeline::Buffer* buffer = GetBuffer();
        if(buffer)
        {
            byte* pData = reinterpret_cast<byte*>(buffer->ReadRequest(unitsToWrite));
            size_t unitSize = buffer->GetUnitSize();							        //The Buffer knows the Unit size in bytes
            size_t bytesWritten = fwrite(pData, unitSize, unitsToWrite, stdout);
            if( bytesWritten > 0 )
            {
                unitsWritten = bytesWritten / buffer->GetUnitSize();
                buffer->ReadAcknowledge(unitsWritten);
                OnWriteSuccess(unitsWritten);
            }
            else //EOD?
            {
                return false;
            }
            return true;
        }
        return false;
    }
}}//qor::components
