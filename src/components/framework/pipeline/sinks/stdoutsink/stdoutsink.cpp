// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "stdoutsink.h"
#include "src/framework/pipeline/source.h"

namespace qor{ namespace components{ 

    StdOutSink::StdOutSink()
    {
    }

    bool StdOutSink::Write(size_t& unitsWritten, size_t unitsToWrite)
    {
        bool bResult = false;
        size_t unitsAvailable = GetBuffer() ? GetBuffer()->ReadCapacity() : 0;

        if(unitsAvailable < unitsToWrite)
        {
            size_t newUnits = 0;
            Read(newUnits, unitsToWrite - unitsAvailable);
            unitsAvailable += newUnits;
        }

        byte* pData = reinterpret_cast<byte*>(GetBuffer()->ReadRequest(unitsAvailable));
        size_t unitSize = GetBuffer()->GetUnitSize();							        //The Buffer knows the Unit size in bytes
        unitsWritten = fwrite(pData, unitSize, unitsAvailable,stdout);        
        GetBuffer()->ReadAcknowledge(unitsWritten);							            //Update the source buffer reading point. That part of the buffer can be reused as we're done reading it.
        return unitsWritten > 0 ? true : false;
    }

    bool StdOutSink::Read(size_t& unitsRead, size_t unitsToRead)
    {
        return ( GetFlowMode() == Push || ( ActualSource()->Read(unitsRead, unitsToRead) && unitsRead > 0) );
    }

}}//qor::components
