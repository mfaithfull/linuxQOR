// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_PIPELINE_CONNECTIONS_SOCKETCLIENT
#define QOR_PP_H_COMPONENTS_PIPELINE_CONNECTIONS_SOCKETCLIENT

#include "src/framework/thread/currentthread.h"
#include "src/platform/network/socket.h"
#include "src/platform/network/sockets.h"
#include "src/platform/network/addressinfo.h"
#include "src/framework/pipeline/connection.h"


namespace qor{ namespace components{ 

    class qor_pp_module_interface(QOR_CLIENTSOCKETCONNECTOR) SocketClientConnector : public pipeline::Plug
    {
    public:

		SocketClientConnector();
		virtual ~SocketClientConnector();

        //Plug interface
        virtual bool Connect();													//Device specific connection
        virtual void Disconnect(void);											//Device specific disconnection

        ref_of<qor::network::Socket>::type m_Socket;

        const qor::network::Address& RemoteAddress()
        {
            return m_remoteAddress;
        }

        void SetRemoteAddress(qor::network::Address& address)
        {
            m_remoteAddress = address;
        }

        bool ConnectToAddress( const std::string &host, const std::string &ip, int port, qor::network::sockets::eAddressFamily address_family, qor::network::addrinfo_flags socket_flags, bool tcp_nodelay, bool ipv6_v6only, time_t timeout_sec = 0 );

        bool SetNonBlocking(bool nonBlocking);

	protected:

        qor::network::Address m_remoteAddress;

    private:

        void SetupHintsForGetAddressInfo(qor::network::AddressInfo& hints, const std::string &host, const std::string &ip, qor::network::sockets::eAddressFamily address_family, qor::network::addrinfo_flags socket_flags, std::string& node);
        bool AttemptConnections(ref_of<qor::network::Sockets>::type socketsSubsystem, std::vector<qor::network::AddressInfo>& addresses);
    };

}}//qor::components

#endif//QOR_PP_H_COMPONENTS_PIPELINE_CONNECTIONS_SOCKETCLIENT
