// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "src/platform/platform.h"
#include "socketclientconnector.h"

namespace qor{ namespace components{ 

    SocketClientConnector::SocketClientConnector() : Plug()
    {
    }

    SocketClientConnector::~SocketClientConnector()
    {
        if (m_connected)
        {
            Disconnect();
        }
    }

    bool SocketClientConnector::Connect()
    {        
        m_connected = m_Socket->Connect(RemoteAddress()) == 0;
        return m_connected;
    }

    void SocketClientConnector::SetupHintsForGetAddressInfo(network::AddressInfo& hints, const std::string &host, const std::string &ip, qor::network::sockets::eAddressFamily address_family, qor::network::addrinfo_flags socket_flags, std::string& node)
    {
        hints.socktype = network::sockets::eType::Sock_Stream;
        hints.protocol = network::sockets::eProtocol::IPProto_IP;

        if (!ip.empty()) 
        {
            node = ip;
            // Ask getaddrinfo to convert IP in c-string to address
            hints.family = network::sockets::eAddressFamily::AF_Unspecified;            
            hints.flags.DontUseHostNameResolution(true);
        } 
        else 
        {
            if (!host.empty()) 
            { 
                node = host; 
            }
            hints.family = address_family;
            hints.flags = socket_flags;
        }

    }

    bool SocketClientConnector::AttemptConnections(ref_of<qor::network::Sockets>::type socketsSubsystem, std::vector<network::AddressInfo>& addresses)
    {
        for(auto address : addresses)
        {
            m_remoteAddress.sa_family = address.family;
            m_remoteAddress.SetPort( address.address.sa.IPAddress.sin_port);
            memcpy(m_remoteAddress.sa.sa_data, address.address.sa.sa_data, address.address.byte_size);
            m_Socket = socketsSubsystem->CreateSocket(address.family, address.socktype, address.protocol);

            if(Connect())
            {
                return true;
            }
        }
        return false;
    }

    bool SocketClientConnector::ConnectToAddress(const std::string &host, const std::string &ip, int port, qor::network::sockets::eAddressFamily address_family, qor::network::addrinfo_flags socket_flags, bool tcp_nodelay, bool ipv6_v6only, time_t timeout_sec)
    {
        if(address_family == qor::network::sockets::eAddressFamily::AF_Unix)
        {
            return false;//TODO: ConnectUnixSocketToAddress();
        }

        auto socketsSubsystem = ThePlatform()->GetSubsystem<network::Sockets>().template AsRef<network::Sockets>();
        auto service = std::to_string(port);
        std::string node;
        network::AddressInfo hints;
        std::vector<network::AddressInfo> results;

        SetupHintsForGetAddressInfo(hints, host, ip, address_family, socket_flags, node);

        if(socketsSubsystem->GetAddressInfo(node, service, hints, results /*timeout_sec*/) > 0)
        {
            return AttemptConnections(socketsSubsystem, results);
        }
        else
        {
            return false;
        }
    }

    void SocketClientConnector::Disconnect()
    {
        m_Socket->Shutdown(network::sockets::eShutdown::ShutdownReadWrite);
        m_connected = false;
    }

    bool SocketClientConnector::SetNonBlocking(bool nonBlocking)
    {
        return m_Socket->SetNonBlocking(nonBlocking);
    }
    
}}//qor::components
