// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_PIPELINE_CONNECTIONS_FILE
#define QOR_PP_H_COMPONENTS_PIPELINE_CONNECTIONS_FILE

#include "src/framework/pipeline/connection.h"
#include "src/platform/filesystem/ifilesystem.h"
#include "src/platform/filesystem/fileindex.h"

namespace qor{ namespace components{ 

    class qor_pp_module_interface(QOR_FILECONNECTOR) FileConnector : public pipeline::Plug
    {
    public:

		FileConnector();
		FileConnector(platform::FileIndex & fileIndex, 
            const platform::IFileSystem::WithFlags mode = platform::IFileSystem::WithFlags::CreateNew,
            const platform::IFileSystem::ShareMode access = platform::IFileSystem::ShareMode::Owner_Read, 
            const platform::IFileSystem::OpenFor openfor = platform::IFileSystem::OpenFor::ReadWrite);
		virtual ~FileConnector();

        //Plug interface
        virtual bool Connect();													//Device specific connection
        virtual void Disconnect(void);											//Device specific disconnection
        virtual bool HandlePendingConnectionResult(bool bConnected);			//Handling device specific pending connection states for async connections

    	void SetMode(platform::IFileSystem::WithFlags mode);
	    platform::IFileSystem::WithFlags GetMode(void);

		void SetOpenFor(platform::IFileSystem::OpenFor openfor);
		platform::IFileSystem::OpenFor GetOpenFor(void);

		void SetShare(platform::IFileSystem::ShareMode share);
		platform::IFileSystem::ShareMode GetShare(void);

		void SetFile(platform::FileIndex & fileIndex);

		platform::FileIndex& FileIndex(void) 
        { 
            return *m_pFileIndex; 					//The underlying FileIndex
        }

		ref_of<platform::IFile>::type File(void) 
        { 
            return m_File; 							//The underlying File
        }

	protected:

        platform::FileIndex* m_pFileIndex;
        platform::IFileSystem::WithFlags m_Mode;
        platform::IFileSystem::OpenFor m_OpenFor;
        platform::IFileSystem::ShareMode m_Share;

    private:

        ref_of<platform::IFile>::type m_File;

    };

}}//qor::components

#endif//QOR_PP_H_COMPONENTS_PIPELINE_CONNECTIONS_FILE
