// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "fileconnector.h"

namespace qor{ namespace components{ 

    FileConnector::FileConnector() : Plug()
    {
        m_Mode = platform::IFileSystem::WithFlags::None;        
        m_OpenFor = platform::IFileSystem::OpenFor::ReadWrite;
        m_Share = platform::IFileSystem::ShareMode::Owner_ReadWiteExecute;
    }

    FileConnector::FileConnector(platform::FileIndex& fileIndex, 
        const platform::IFileSystem::WithFlags mode, 
        const platform::IFileSystem::ShareMode share,
        const platform::IFileSystem::OpenFor openfor) : Plug()
    {
        m_Mode = mode;
        m_OpenFor = openfor;
        m_Share = share;
        m_pFileIndex = &fileIndex;
    }

    FileConnector::~FileConnector()
    {
        if (m_connected)
        {
            Disconnect();
        }
    }

    bool FileConnector::Connect()
    {
        m_File = new_ref<platform::IFile>(*m_pFileIndex, m_OpenFor, m_Mode);
        m_connected = !m_File.IsNull();//->IsOpen();
        return m_connected;
    }

    void FileConnector::Disconnect()
    {
        m_File.Dispose();
        m_connected = false;
    }
    
    bool FileConnector::HandlePendingConnectionResult(bool bConnected)
    {
        if (bConnected)
        {
            return true;
        }

        return false;
    }

    void FileConnector::SetMode(platform::IFileSystem::WithFlags mode)
    {
        m_Mode = mode;
    }

    platform::IFileSystem::WithFlags FileConnector::GetMode(void)
    {
        return m_Mode;
    }

    void FileConnector::SetOpenFor(platform::IFileSystem::OpenFor openfor)
    {
        m_OpenFor = openfor;
    }

	platform::IFileSystem::OpenFor FileConnector::GetOpenFor(void)
    {
        return m_OpenFor;
    }

    void FileConnector::SetShare(platform::IFileSystem::ShareMode share)
    {
        m_Share = share;
    }
    
    platform::IFileSystem::ShareMode FileConnector::GetShare(void)
    {
        return m_Share;
    }

    void FileConnector::SetFile(platform::FileIndex& fileIndex)
    {
        m_pFileIndex = &fileIndex;
    }

}}//qor::components
