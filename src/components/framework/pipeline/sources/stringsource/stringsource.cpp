// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include <stdio.h>
#include "stringsource.h"
#include "src/framework/pipeline/sink.h"

namespace qor{ namespace components{ 

    StringSource::StringSource()
    {
        m_data = "";
        m_it = m_data.begin();
    }

    void StringSource::SetData(const std::string& data)
    {
        m_data = data;
        m_it = m_data.begin();
    }

    bool StringSource::Read(size_t& unitsRead, size_t unitsToRead)
    {        
        return Pull(unitsRead, unitsToRead) ? Push(unitsRead, unitsRead) : false;
    }

    bool StringSource::Pull(size_t& unitsRead, size_t unitsToRead)
    {
        pipeline::Buffer* buffer = GetBuffer();
        if(buffer)
        {
            byte* space = buffer->WriteRequest(unitsToRead);            
            size_t charsRead = Read((char*)space, (buffer->GetUnitSize() * unitsToRead) / sizeof(char));
            if(charsRead > 0)
            {
                unitsRead = (charsRead * sizeof(char)) / buffer->GetUnitSize();
                buffer->WriteAcknowledge(unitsRead);
                OnReadSuccess(unitsRead);
            }
            else //EOF
            {
                OnEndOfData();
            }
            return true;
        }
        return false;
    }

    size_t StringSource::Read(char* space, size_t charsToRead)
    {
        size_t charsRead = 0;
        while(m_it != m_data.end() && charsRead < charsToRead)
        {
            space[charsRead++] = *m_it++;
        }
        return charsRead;
    }

        //push the requested amount of data up the pipeline
    bool StringSource::Push(size_t& unitsRead, size_t unitsToRead)
    {
        if( GetFlowMode() == FlowMode::Push )
        {
            return ActualSink()->Write(unitsRead, unitsToRead) && (unitsRead > 0) ? true : false;
        }
        return true;
    }

}}//qor::components
