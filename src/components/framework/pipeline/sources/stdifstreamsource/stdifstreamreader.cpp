// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "stdifstreamreader.h"
#include "src/platform/filesystem/filesystem.h"

namespace qor{ namespace components{ 

    stdifstreamReader::stdifstreamReader() : pipeline::Pipeline(), m_Setup(false)
    {        
    }

    stdifstreamReader::stdifstreamReader(const std::string& fileName, size_t bufferByteCapacity)
    {
        auto fileSystem = new_ref<platform::FileSystem>();
        fileSystem().Setup();
        platform::FileIndex file(fileSystem().CurrentPath(), fileName);
        SetFile(file);
        SetBufferCapacity(bufferByteCapacity);
        Setup();
    }

    stdifstreamReader::stdifstreamReader(platform::FileIndex& fileIndex, size_t bufferByteCapacity) : pipeline::Pipeline(), m_Setup(false)
    {
        SetFile(fileIndex);
        SetBufferCapacity(bufferByteCapacity);
        Setup();
    }

    void stdifstreamReader::SetFile(platform::FileIndex& fileIndex)
    {
        m_connector.SetFile(fileIndex);
    }

    void stdifstreamReader::SetBufferCapacity(size_t itemCount)
    {
        m_buffer.SetCapacity(itemCount);
    }

    void stdifstreamReader::Setup()
    {
        if(m_buffer.Capacity() < 1 )
        {
            m_buffer.SetCapacity(4096);
        }

        if(!source.HasBuffer())
        {
            source.SetBuffer(&m_buffer);
        }

        if(!source.HasSink())
        {
            source.SetSink(&m_sink);
        }

        if(!source.HasPlug())
        {
            source.SetPlug(&m_connector);
        }

        if(!m_connector.IsConnected())
        {
            m_connector.Connect();
        }
        m_Setup = true;
    }

    bool stdifstreamReader::Read(size_t& unitsRead, size_t unitsToRead)
    {        
        if(!m_Setup)
        {
            Setup();
        }
        return source.Read(unitsRead, unitsToRead);
    }

    void stdifstreamReader::ReadAll(size_t& unitsRead, stdifstreamReader::ProcessDataFn&& process)
    {
        size_t unitsReadAtOnce = 0;
        do
        {            
            unitsReadAtOnce = 0;
            size_t unitsToRead = m_buffer.WriteCapacity();
            Read(unitsReadAtOnce, unitsToRead);
            unitsRead += unitsReadAtOnce;
            size_t unitsToProcess = unitsReadAtOnce;            
            byte* data = m_buffer.ReadRequest(unitsToProcess);
            size_t bytesToProcess = unitsToProcess * m_buffer.GetUnitSize();
            size_t bytesProcessed = process(data, bytesToProcess);
            if(bytesProcessed > 0 )
            {
                size_t unitsProcessed = bytesProcessed / m_buffer.GetUnitSize();
                m_buffer.ReadAcknowledge(unitsProcessed);
            }
        } while (unitsReadAtOnce > 0);
    }

    std::string stdifstreamReader::Read()
    {
        size_t unitsRead = 0;
        std::string strText;
        ReadAll(unitsRead, [&strText](byte* data, size_t byteCount) -> size_t
        {
            char tmpBuffer[byteCount + 1];
            memcpy(tmpBuffer, (char*)(data), byteCount);
            tmpBuffer[byteCount] = '\0';
            std::string temp = tmpBuffer;
            strText = strText + temp;
            return byteCount;
        });
        return strText;
    }

}}//qor::components
