// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include <format>

#include "src/framework/thread/currentthread.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/objectcontext/anyobject.h"
#include "src/qor/reference/reference.h"
#include "src/qor/reference/newref.h"
#include "consolemenuwidget.h"


namespace qor { namespace components {

    ConsoleMenuWidget::ConsoleMenuWidget(const string_t& name) : m_selected(0), m_name(name), ConsoleWidget() {}

    void ConsoleMenuWidget::AddMenuItem(ref_of<MenuItem>::type item)
    {
        m_contents.emplace_back(item);
    }

    void ConsoleMenuWidget::AddMenuItem(const string_t& itemText)
    {
        int itemIndex = 0;
        for( ref_of<MenuItem>::type item : m_contents)
        {
            if(item->index > itemIndex)
            {
                itemIndex = item->index;
            }
        }
        itemIndex++;
        auto menuItem = new_ref<MenuItem>();
        menuItem->itemText = itemText;
        menuItem->index = itemIndex;
        AddMenuItem(menuItem);
    }

    Size ConsoleMenuWidget::Layout(int width, int height)
    {
        m_size = GetSize();
        return m_size;
    }

    Size ConsoleMenuWidget::GetSize()
    {
        int maxWidth = 0;
        int maxHeight = static_cast<int>(m_contents.size() + 4);//Add 2 for box, 1 for menu title, one for title separator
        for( ref_of<MenuItem>::type item : m_contents)
        {
            if(item->itemText.size() > maxWidth)
            {
                maxWidth = static_cast<int>(item->itemText.size());
            }
        }
        Size maxsize = {maxWidth + 4, maxHeight};
        return maxsize;
    }

    Size ConsoleMenuWidget::GetMinimumSize()
    {
        return GetSize();
    }

    Size ConsoleMenuWidget::GetDefaultSize()
    {
        return GetSize();
    }

    Size ConsoleMenuWidget::GetMaximumSize()
    {
        return GetSize();
    }

    void ConsoleMenuWidget::Render()
    {
        int row = 3;
        int column = 1;
        m_view->SetWidth(m_size.m_width);
        m_view->SetHeight(m_size.m_height);
        m_view->DrawWindow(0,0,m_size.m_width-1,m_size.m_height-1);
        for( ref_of<MenuItem>::type item : m_contents)
        {
            if(item->selected)
            {
                m_view->DrawLabel(column, row, std::format("{:x}>", item->index));
            }
            else
            {
                m_view->DrawLabel(column, row, std::format("{:x}|", item->index));
            }
            m_view->DrawString(column + 2, row, item->itemText);
            row += 1;
        }
        m_view->DrawString(1 + (((m_size.m_width - 2) - m_name.size()) / 2),1, m_name);
        m_view->DrawInternalHLine(0,2,m_size.m_width);
    }

    bool ConsoleMenuWidget::HandleInput(string_t input)
    {
        bool bHandled = false;
        if(input.size() >= 1 )
        {
            char_t c = input[0];
            if(c > '0' && c <= '0' + m_contents.size())
            {
                int selectedIndex = c - '0';
                for( ref_of<MenuItem>::type item : m_contents)
                {
                    if(item->index == m_selected)
                    {
                        item->selected = false;
                    }
                    if(item->index == selectedIndex)
                    {
                        bHandled = true;
                        item->selected = true;
                    }
                }
                m_selected = selectedIndex;
            }
        }
        return bHandled;
    }


}}//qor::components

