// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/reference/reference.h"
#include "src/qor/reference/newref.h"

#include "consoleviewcontroller.h"

namespace qor { namespace components {

    ConsoleViewController::ConsoleViewController()
    {
        m_console = new_ref<Console>();
        m_view = new_ref<ConsoleView>();
        m_model = new_ref<ConsoleViewModel>();
        m_compositor = new_ref<ConsoleCompositor>();
    }

    ConsoleViewController::~ConsoleViewController() {}

    ref_of<ConsoleViewModel>::type ConsoleViewController::Model()
    {
        return m_model;
    }

    void ConsoleViewController::Render()
    {
        
        unsigned int width = m_view->GetWidth();        //Get the constraints of the view
        unsigned int height = m_view->GetHeight();
        m_model->Layout(width, height);                 //Layout the view model
        m_model->Render();                              //Have the View model widgets render themselves to their own views
        m_compositor->Compose(m_model,m_view);          //Composite them into the main view
        m_view->Render();                               //Render the view
    }

    void ConsoleViewController::GetUserInput()
    {
        string_t input = m_console->ReadLine();         //Collect input from the user
        bool handled = false;   
        //Process the input
        //Check for Overall view level intercepts for modifying the view itself
        if( input == "\\")
        {
            /*push a layer onto the basic layers widget that contains a menu widget for modifying the view parameters*/
            handled = true;
        }

        //If the input is unhandled pass it to each widget's controller until it's handled
        if(!handled)
        {
            handled = m_model->HandleInput(input);
        }

        //If the input is unhandled raise an event to the application to handle it.
        if(!handled)
        {

        }
    }

    /*Operations that modify the view
    \ to bring up View menu
    1. Width
    2. Height
    3. Style
    
    Width and heigh just take ainput of a number
    
    Style will require a list of available style which will swap out the TOKEN->char_t mapping table*/


}}//qor::components
