// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"

#include "src/framework/thread/currentthread.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/objectcontext/anyobject.h"
#include "src/qor/reference/reference.h"
#include "src/qor/reference/newref.h"
#include "consolecolumnwidget.h"

namespace qor { namespace components {

    ConsoleColumnWidget::ConsoleColumnWidget() : ConsoleWidget() {}

    void ConsoleColumnWidget::AddWidget(ref_of<ConsoleWidget>::type widget)
    {
        m_contents.emplace_back(widget);
    }

    Size ConsoleColumnWidget::Layout(int width, int height)
    {
        Size totalSize = {0,0};
        for( ref_of<ConsoleWidget>::type widget : m_contents)
        {
            Size initialSize = widget->Layout(width, height / static_cast<int>(m_contents.size()));
            totalSize.m_height += initialSize.m_height;
            if(initialSize.m_width > totalSize.m_width)
            {
                totalSize.m_width = initialSize.m_width;
            }
        }
        m_size = totalSize;
        return totalSize;
    }

    Size ConsoleColumnWidget::GetMinimumSize()
    {
        int minWidth = 0;
        int minHeight = 0;
        for( ref_of<ConsoleWidget>::type widget : m_contents)
        {
            Size contentMinSize = widget->GetMinimumSize();
            if(contentMinSize.m_width > minWidth)       //minimum width is the maximum of the minum widths of the contents
            {
                minWidth = contentMinSize.m_width;
            }
            minHeight += contentMinSize.m_height;        //minimum height is the sum of the minimum heights of the contents
        }
        Size minsize = {minWidth, minHeight};
        return minsize;
    }

    Size ConsoleColumnWidget::GetDefaultSize()
    {
        int defaultWidth = 0;
        int defaultHeight = 0;
        for( ref_of<ConsoleWidget>::type widget : m_contents)
        {
            Size contentDefaultSize = widget->GetDefaultSize();
            if(contentDefaultSize.m_width > defaultWidth)       //minimum width is the maximum of the minum widths of the contents
            {
                defaultWidth = contentDefaultSize.m_width;
            }
            defaultHeight += contentDefaultSize.m_height;        //minimum height is the sum of the minimum heights of the contents
        }
        Size defaultSize = {defaultWidth, defaultHeight};
        return defaultSize;
    }

    Size ConsoleColumnWidget::GetMaximumSize()
    {
        int maxWidth = 0;
        int maxHeight = 0;
        for( ref_of<ConsoleWidget>::type widget : m_contents)
        {
            Size contentMaxSize = widget->GetMaximumSize();
            if(contentMaxSize.m_width > maxWidth)
            {
                maxWidth = contentMaxSize.m_width;
            }
            maxHeight += contentMaxSize.m_height;
        }
        Size maxsize = {maxWidth, maxHeight};
        return maxsize;
    }

    void ConsoleColumnWidget::Render()
    {
        if(m_compositor.IsNull())
        {
            m_compositor = new_ref<ConsoleCompositor>();
        }
        int row = 0;
        int column = 0;//TODO: vary the column according to alignment
        m_view->SetWidth(m_size.m_width);
        m_view->SetHeight(m_size.m_height);
        for( ref_of<ConsoleWidget>::type widget : m_contents)
        {
            widget->Render();
            m_compositor->Compose({column,row}, widget->GetSize(), widget->View(), m_view);
            row += widget->GetSize().m_height;
        }
    }

}}//qor::components

