// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_OPTIONPARSER_GETTER
#define QOR_PP_H_OPTIONPARSER_GETTER

#include <stdlib.h>

#include "ioptionable.h"
#include "shortoption_interpretter.h"
#include "context.h"
#include "nonopt_tracker.h"
#include "longoption_interpretter.h"

#include <string.h>

namespace qor{ namespace components{ namespace optparser {

	class qor_pp_module_interface(QOR_OPTIONPARSER) OptionGetter
	{
	public:

		OptionGetter(const int argc, const char** argv);
		OptionGetter(const int argc, const char** argv, const char* shortOptions, Option* longOptions);
		OptionGetter(const int argc, const char** argv, IOptionable& optionable, bool longOnly = false, bool posixCompliant = false, int option_index = 0);
		void SetOptions(const char* shortOptions, Option * longOptions);
		void GetOptions(IOptionable& optionable, bool longOnly = false, bool posixCompliant = false, int option_index = 0);

	private:

        arg_iter itArgument;
        NonOptTracker nonOpts;
        ShortOptInterpretter shortOptionInterpretter;
        LongOptInterpretter longOptioninterpretter;
		Context m_optionsContext;

		bool ParseNextOption(int& result);
		bool HandleEndOfOptions(int& result);
		bool HandleNonOption(int& result);
		bool HandleLongOption(int& result);
		char ParseNextShortOption();
		int ParseSpecialWCase(char& c);

		inline void ParseArgumentCase(char& c, const char* temp)
		{
			temp[2] == ':' ? ParseOptionalArgumentCase() : ParseRequiredArgumentCase(c);
		}

		void ParseRequiredArgumentCase(char& c);
		void ParseOptionalArgumentCase();
		int Internal(bool longOnly, bool posixlyCorrect);

	};

}}}//qor::components::optparser

#endif//QOR_PP_H_OPTIONPARSER_GETTER
