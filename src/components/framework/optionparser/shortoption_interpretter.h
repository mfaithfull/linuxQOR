// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_OPTIONPARSER_SHORTOPTIONINTERPRETTER
#define QOR_PP_H_OPTIONPARSER_SHORTOPTIONINTERPRETTER

#include "argument_iterator.h"

namespace qor{ namespace components{ namespace optparser {

    enum Ordering
    {
        REQUIRE_ORDER,
        PERMUTE,
        RETURN_IN_ORDER
    };

    //Helper to decode a short option set
    class ShortOptInterpretter
    {

    public:

        ShortOptInterpretter(){}

        void Init(const char* shortOptions)
        {
            m_ShortOptionSet = shortOptions;
        }

        bool DashOrPlus()
        {
            return (m_ShortOptionSet[0] == '-' || m_ShortOptionSet[0] == '+') ? true : false;
        }

        bool Colon()
        {
            return (m_ShortOptionSet[0] == ':') ? true : false;
        }

        bool Dash()
        {
            return (m_ShortOptionSet[0] == '-' ) ? true : false;
        }

        bool Plus()
        {
            return (m_ShortOptionSet[0] == '+' ) ? true : false;
        }

        void Next()
        {
            m_ShortOptionSet++;
        }

        void Inc()
        {
            ++m_ShortOptionSet;
        }

        const char* Find( char c )
        {
            return strchr(m_ShortOptionSet, c);
        }

        char ColonQuestion()
        {
            return m_ShortOptionSet[0] == ':' ? ':' : '?';
        }

   		// Determine how to handle the ordering of options and nonoptions.
        Ordering DetermineOptionOrdering(bool posixlyCorrect)
        {
            Ordering result = PERMUTE;
            // Determine how to handle the ordering of options and nonoptions.
            if (Dash())
            {
                result = RETURN_IN_ORDER;
                Inc();
            }
            else if (Plus())
            {
                result = REQUIRE_ORDER;
                Inc();
            }
            else if (posixlyCorrect || !!getenv("POSIXLY_CORRECT"))
            {
                result = REQUIRE_ORDER;
            }
            return result;
        }

    private:

        const char* m_ShortOptionSet;
    };

}}}//qor:://components::optparser

#endif//QOR_PP_H_OPTIONPARSER_SHORTOPTIONINTERPRETTER
