
// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "status.h"

namespace qor { namespace components { namespace protocols { namespace http {

    const char* status_message(StatusCode status) 
    {
        switch (status) 
        {
            case StatusCode::Continue_100: return "Continue";
            case StatusCode::SwitchingProtocol_101: return "Switching Protocol";
            case StatusCode::Processing_102: return "Processing";
            case StatusCode::EarlyHints_103: return "Early Hints";
            case StatusCode::OK_200: return "OK";
            case StatusCode::Created_201: return "Created";
            case StatusCode::Accepted_202: return "Accepted";
            case StatusCode::NonAuthoritativeInformation_203: return "Non-Authoritative Information";
            case StatusCode::NoContent_204: return "No Content";
            case StatusCode::ResetContent_205: return "Reset Content";
            case StatusCode::PartialContent_206: return "Partial Content";
            case StatusCode::MultiStatus_207: return "Multi-Status";
            case StatusCode::AlreadyReported_208: return "Already Reported";
            case StatusCode::IMUsed_226: return "IM Used";
            case StatusCode::MultipleChoices_300: return "Multiple Choices";
            case StatusCode::MovedPermanently_301: return "Moved Permanently";
            case StatusCode::Found_302: return "Found";
            case StatusCode::SeeOther_303: return "See Other";
            case StatusCode::NotModified_304: return "Not Modified";
            case StatusCode::UseProxy_305: return "Use Proxy";
            case StatusCode::unused_306: return "unused";
            case StatusCode::TemporaryRedirect_307: return "Temporary Redirect";
            case StatusCode::PermanentRedirect_308: return "Permanent Redirect";
            case StatusCode::BadRequest_400: return "Bad Request";
            case StatusCode::Unauthorized_401: return "Unauthorized";
            case StatusCode::PaymentRequired_402: return "Payment Required";
            case StatusCode::Forbidden_403: return "Forbidden";
            case StatusCode::NotFound_404: return "Not Found";
            case StatusCode::MethodNotAllowed_405: return "Method Not Allowed";
            case StatusCode::NotAcceptable_406: return "Not Acceptable";
            case StatusCode::ProxyAuthenticationRequired_407: return "Proxy Authentication Required";
            case StatusCode::RequestTimeout_408: return "Request Timeout";
            case StatusCode::Conflict_409: return "Conflict";
            case StatusCode::Gone_410: return "Gone";
            case StatusCode::LengthRequired_411: return "Length Required";
            case StatusCode::PreconditionFailed_412: return "Precondition Failed";
            case StatusCode::PayloadTooLarge_413: return "Payload Too Large";
            case StatusCode::UriTooLong_414: return "URI Too Long";
            case StatusCode::UnsupportedMediaType_415: return "Unsupported Media Type";
            case StatusCode::RangeNotSatisfiable_416: return "Range Not Satisfiable";
            case StatusCode::ExpectationFailed_417: return "Expectation Failed";
            case StatusCode::ImATeapot_418: return "I'm a teapot";
            case StatusCode::MisdirectedRequest_421: return "Misdirected Request";
            case StatusCode::UnprocessableContent_422: return "Unprocessable Content";
            case StatusCode::Locked_423: return "Locked";
            case StatusCode::FailedDependency_424: return "Failed Dependency";
            case StatusCode::TooEarly_425: return "Too Early";
            case StatusCode::UpgradeRequired_426: return "Upgrade Required";
            case StatusCode::PreconditionRequired_428: return "Precondition Required";
            case StatusCode::TooManyRequests_429: return "Too Many Requests";
            case StatusCode::RequestHeaderFieldsTooLarge_431: return "Request Header Fields Too Large";
            case StatusCode::UnavailableForLegalReasons_451: return "Unavailable For Legal Reasons";
            case StatusCode::NotImplemented_501: return "Not Implemented";
            case StatusCode::BadGateway_502: return "Bad Gateway";
            case StatusCode::ServiceUnavailable_503: return "Service Unavailable";
            case StatusCode::GatewayTimeout_504: return "Gateway Timeout";
            case StatusCode::HttpVersionNotSupported_505: return "HTTP Version Not Supported";
            case StatusCode::VariantAlsoNegotiates_506: return "Variant Also Negotiates";
            case StatusCode::InsufficientStorage_507: return "Insufficient Storage";
            case StatusCode::LoopDetected_508: return "Loop Detected";
            case StatusCode::NotExtended_510: return "Not Extended";
            case StatusCode::NetworkAuthenticationRequired_511: return "Network Authentication Required";
            default:
            case StatusCode::InternalServerError_500: return "Internal Server Error";
        }
    }

}}}}//qor::components::protocols::http
