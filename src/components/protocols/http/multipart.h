// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <string>

namespace qor { namespace components { namespace protocols { namespace http {

    qor_pp_module_interface(QOR_HTTP) std::string make_multipart_data_boundary();
    qor_pp_module_interface(QOR_HTTP) bool is_multipart_boundary_chars_valid(const std::string &boundary);
    qor_pp_module_interface(QOR_HTTP) std::string serialize_multipart_formdata_item_end();
    qor_pp_module_interface(QOR_HTTP) std::string serialize_multipart_formdata_finish(const std::string &boundary);
    qor_pp_module_interface(QOR_HTTP) std::string serialize_multipart_formdata_get_content_type(const std::string &boundary);
    qor_pp_module_interface(QOR_HTTP) std::string serialize_multipart_formdata(const UploadFormDataItems &items, const std::string &boundary, bool finish = true);

    template <typename T>
    inline std::string serialize_multipart_formdata_item_begin(const T &item, const std::string &boundary) 
    {
        std::string body = "--" + boundary + "\r\n";
        body += "Content-Disposition: form-data; name=\"" + item.name + "\"";
        if (!item.filename.empty()) 
        {
            body += "; filename=\"" + item.filename + "\"";
        }
        body += "\r\n";
        if (!item.content_type.empty()) 
        {
            body += "Content-Type: " + item.content_type + "\r\n";
        }
        body += "\r\n";
        return body;
    }

}}}}//qor::components::protocols::http
