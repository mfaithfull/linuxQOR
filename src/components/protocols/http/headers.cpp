// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "headers.h"

namespace qor { namespace components { namespace protocols { namespace http {

    bool has_header(const Headers &headers, const std::string &key) 
    {
        return headers.find(key) != headers.end();
    }

    const char* get_header_value(const Headers &headers, const std::string &key, const char *def, size_t id) 
    {
        auto rng = headers.equal_range(key);
        auto it = rng.first;
        std::advance(it, static_cast<ssize_t>(id));
        if (it != rng.second) { return it->second.c_str(); }
        return def;
    }

    /*
    template <typename T>
    inline bool parse_header(const char *beg, const char *end, T fn) 
    {
        // Skip trailing spaces and tabs.
        while (beg < end && is_space_or_tab(end[-1])) 
        {
            end--;
        }

        auto p = beg;
        while (p < end && *p != ':') 
        {
            p++;
        }

        auto name = std::string(beg, p);
        if (!detail::fields::is_field_name(name)) 
        { 
            return false; 
        }

        if (p == end) 
        { 
            return false; 
        }

        auto key_end = p;

        if (*p++ != ':') 
        { 
            return false; 
        }

        while (p < end && is_space_or_tab(*p)) 
        {
            p++;
        }

        if (p <= end) 
        {
            auto key_len = key_end - beg;
            if (!key_len) 
            { 
                return false; 
            }

            auto key = std::string(beg, key_end);
            auto val = std::string(p, end);

            if (!fields::is_field_value(val)) 
            { 
                return false; 
            }

            if (case_ignore::equal(key, "Location") || case_ignore::equal(key, "Referer")) 
            {
                fn(key, val);
            } 
            else 
            {
                fn(key, decode_path_component(val));
            }
            return true;
        }
        return false;
    }
    */
    /*
    bool read_headers(Stream &strm, Headers &headers) 
    {
        const auto bufsiz = 2048;
        char buf[bufsiz];
        stream_line_reader line_reader(strm, buf, bufsiz);

        size_t header_count = 0;

        for (;;) 
        {
            if (!line_reader.getline()) 
            { 
                return false; 
            }

            // Check if the line ends with CRLF.
            auto line_terminator_len = 2;
            if (line_reader.end_with_crlf()) 
            {
                // Blank line indicates end of headers.
                if (line_reader.size() == 2) 
                { 
                    break; 
                }
            } 
            else 
            {
#ifdef CPPHTTPLIB_ALLOW_LF_AS_LINE_TERMINATOR
                // Blank line indicates end of headers.
                if (line_reader.size() == 1) { break; }
                line_terminator_len = 1;
#else
                continue; // Skip invalid line.
#endif
            }

            if (line_reader.size() > CPPHTTPLIB_HEADER_MAX_LENGTH) 
            { 
                return false; 
            }

            // Check header count limit
            if (header_count >= CPPHTTPLIB_HEADER_MAX_COUNT) 
            { 
                return false; 
            }

            // Exclude line terminator
            auto end = line_reader.ptr() + line_reader.size() - line_terminator_len;

            if (!parse_header(line_reader.ptr(), end, [&](const std::string &key, const std::string &val) 
                {
                    headers.emplace(key, val);
                })) 
            {
                return false;
            }

            header_count++;
        }
        return true;
    }
    */
}}}}//qor::components::protocols::http

