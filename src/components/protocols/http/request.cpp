
// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "request.h"
#include "fields/fields.h"

namespace qor { namespace components { namespace protocols { namespace http {

    bool Request::has_header(const std::string &key) const 
    {
        return http::has_header(headers, key);
    }

    std::string Request::get_header_value(const std::string &key, const char *def, size_t id) const 
    {
        return http::get_header_value(headers, key, def, id);
    }

    size_t Request::get_header_value_count(const std::string &key) const 
    {
        auto r = headers.equal_range(key);
        return static_cast<size_t>(std::distance(r.first, r.second));
    }

    void Request::set_header(const std::string &key, const std::string &val) 
    {
        if (fields::is_field_name(key) && fields::is_field_value(val)) 
        {
            headers.emplace(key, val);
        }
    }

    bool Request::has_trailer(const std::string &key) const 
    {
        return trailers.find(key) != trailers.end();
    }

    std::string Request::get_trailer_value(const std::string &key, size_t id) const 
    {
        auto rng = trailers.equal_range(key);
        auto it = rng.first;
        std::advance(it, static_cast<ssize_t>(id));
        if (it != rng.second) 
        { 
            return it->second; 
        }
        return std::string();
    }

    inline size_t Request::get_trailer_value_count(const std::string &key) const 
    {
        auto r = trailers.equal_range(key);
        return static_cast<size_t>(std::distance(r.first, r.second));
    }

    inline bool Request::has_param(const std::string &key) const 
    {
        return params.find(key) != params.end();
    }

    inline std::string Request::get_param_value(const std::string &key, size_t id) const 
    {
        auto rng = params.equal_range(key);
        auto it = rng.first;
        std::advance(it, static_cast<ssize_t>(id));
        if (it != rng.second) 
        { 
            return it->second; 
        }
        return std::string();
    }

    inline size_t Request::get_param_value_count(const std::string &key) const 
    {
        auto r = params.equal_range(key);
        return static_cast<size_t>(std::distance(r.first, r.second));
    }

    bool Request::is_multipart_form_data() const 
    {
        const auto &content_type = get_header_value("Content-Type");
        return !content_type.rfind("multipart/form-data", 0);
    }

}}}}//qor::components::protocols::http

