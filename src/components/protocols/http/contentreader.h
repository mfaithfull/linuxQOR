// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_CONTENTREADER
#define QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_CONTENTREADER

#include <vector>
#include "formsdataprovider.h"

namespace qor { namespace components { namespace protocols { namespace http {

    using FormDataProviderItems = std::vector<FormDataProvider>;
    using ContentReceiverWithProgress = std::function<bool(const char *data, size_t data_length, size_t offset, size_t total_length)>;
    using ContentReceiver = std::function<bool(const char *data, size_t data_length)>;
    using FormDataHeader = std::function<bool(const FormData &file)>;

    class ContentReader 
    {
    public:
        using Reader = std::function<bool(ContentReceiver receiver)>;
        using FormDataReader = std::function<bool(FormDataHeader header, ContentReceiver receiver)>;

        ContentReader(Reader reader, FormDataReader multipart_reader) : reader_(std::move(reader)), formdata_reader_(std::move(multipart_reader)) 
        {
        }

        bool operator()(FormDataHeader header, ContentReceiver receiver) const 
        {
            return formdata_reader_(std::move(header), std::move(receiver));
        }

        bool operator()(ContentReceiver receiver) const 
        {
            return reader_(std::move(receiver));
        }

        Reader reader_;
        FormDataReader formdata_reader_;
    };

}}}}

#endif//QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_CONTENTREADER

