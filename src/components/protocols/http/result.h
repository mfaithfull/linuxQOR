// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_RESULT
#define QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_RESULT

#include "error.h"
#include "response.h"

namespace qor { namespace components { namespace protocols { namespace http {

    class qor_pp_module_interface(QOR_HTTP) Result
    {
    public:

        Result() = default;
        Result(std::unique_ptr<Response> &&res, Error err, Headers &&request_headers = Headers{}) : res_(std::move(res)), err_(err), request_headers_(std::move(request_headers)) 
        {            
        }

#ifdef CPPHTTPLIB_OPENSSL_SUPPORT
        Result(std::unique_ptr<Response> &&res, Error err, Headers &&request_headers,
        int ssl_error)
        : res_(std::move(res)), err_(err),
        request_headers_(std::move(request_headers)), ssl_error_(ssl_error) {}
        Result(std::unique_ptr<Response> &&res, Error err, Headers &&request_headers,
        int ssl_error, unsigned long ssl_openssl_error)
        : res_(std::move(res)), err_(err),
        request_headers_(std::move(request_headers)), ssl_error_(ssl_error),
        ssl_openssl_error_(ssl_openssl_error) {}
#endif

        // Response
        operator bool() const { return res_ != nullptr; }
        bool operator==(std::nullptr_t) const { return res_ == nullptr; }
        bool operator!=(std::nullptr_t) const { return res_ != nullptr; }
        const Response &value() const { return *res_; }
        Response &value() { return *res_; }
        const Response &operator*() const { return *res_; }
        Response &operator*() { return *res_; }
        const Response *operator->() const { return res_.get(); }
        Response *operator->() { return res_.get(); }

        // Error
        Error error() const { return err_; }

#ifdef CPPHTTPLIB_OPENSSL_SUPPORT
        // SSL Error
        int ssl_error() const { return ssl_error_; }
        // OpenSSL Error
        unsigned long ssl_openssl_error() const { return ssl_openssl_error_; }
#endif

        // Request Headers
        bool has_request_header(const std::string &key) const;
        std::string get_request_header_value(const std::string &key, const char *def = "", size_t id = 0) const;
        size_t get_request_header_value_u64(const std::string &key, size_t def = 0, size_t id = 0) const;
        size_t get_request_header_value_count(const std::string &key) const;

    private:
        std::unique_ptr<Response> res_;
        Error err_ = Error::Unknown;
        Headers request_headers_;
#ifdef CPPHTTPLIB_OPENSSL_SUPPORT
        int ssl_error_ = 0;
        unsigned long ssl_openssl_error_ = 0;
#endif

    };

}}}}//qor::components::protocols::http

#endif//QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_RESULT