// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_RESPONSE
#define QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_RESPONSE

#include "headers.h"
#include "status.h"
#include "contentprovider.h"
#include "contentreader.h"

namespace qor { namespace components { namespace protocols { namespace http {

    class qor_pp_module_interface(QOR_HTTP) Response
    {
    public:

        std::string version;
        int status = -1;
        std::string reason;
        Headers headers;
        Headers trailers;
        std::string body;
        std::string location; // Redirect location

        bool has_header(const std::string &key) const;
        std::string get_header_value(const std::string &key, const char *def = "", size_t id = 0) const;
        size_t get_header_value_u64(const std::string &key, size_t def = 0, size_t id = 0) const;
        size_t get_header_value_count(const std::string &key) const;
        void set_header(const std::string &key, const std::string &val);
        bool has_trailer(const std::string &key) const;
        std::string get_trailer_value(const std::string &key, size_t id = 0) const;
        size_t get_trailer_value_count(const std::string &key) const;
        void set_redirect(const std::string &url, int status = StatusCode::Found_302);
        void set_content(const char *s, size_t n, const std::string &content_type);
        void set_content(const std::string &s, const std::string &content_type);
        void set_content(std::string &&s, const std::string &content_type);
        void set_content_provider(size_t length, const std::string &content_type, ContentProvider provider, ContentProviderResourceReleaser resource_releaser = nullptr);
        void set_content_provider(const std::string &content_type, ContentProviderWithoutLength provider,ContentProviderResourceReleaser resource_releaser = nullptr);
        void set_chunked_content_provider(const std::string &content_type, ContentProviderWithoutLength provider, ContentProviderResourceReleaser resource_releaser = nullptr);
        void set_file_content(const std::string &path, const std::string &content_type);
        void set_file_content(const std::string &path);

        Response() = default;
        Response(const Response &) = default;
        Response &operator=(const Response &) = default;
        Response(Response &&) = default;
        Response &operator=(Response &&) = default;
        ~Response() 
        {
            if (content_provider_resource_releaser_) 
            {
                content_provider_resource_releaser_(content_provider_success_);
            }
        }

    private:

        size_t content_length_ = 0;
        ContentProvider content_provider_;
        ContentProviderResourceReleaser content_provider_resource_releaser_;
        bool is_chunked_content_provider_ = false;
        bool content_provider_success_ = false;
        std::string file_content_path_;
        std::string file_content_content_type_;

    };

}}}}

#endif//QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_RESPONSE