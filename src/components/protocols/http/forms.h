// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_FORMS
#define QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_FORMS

#include <functional>
#include <map>
#include <regex>

#include "headers.h"

namespace qor { namespace components { namespace protocols { namespace http {

    using Params = std::multimap<std::string, std::string>;
    using Match = std::smatch;

    using DownloadProgress = std::function<bool(size_t current, size_t total)>;
    using UploadProgress = std::function<bool(size_t current, size_t total)>;

    struct Response;
    using ResponseHandler = std::function<bool(const Response &response)>;

    struct FormData 
    {
        std::string name;
        std::string content;
        std::string filename;
        std::string content_type;
        Headers headers;
    };

    struct FormField 
    {
        std::string name;
        std::string content;
        Headers headers;
    };

    using FormFields = std::multimap<std::string, FormField>;

    using FormFiles = std::multimap<std::string, FormData>;

    struct MultipartFormData 
    {
        FormFields fields; // Text fields from multipart
        FormFiles files;   // Files from multipart

        // Text field access
        std::string get_field(const std::string &key, size_t id = 0) const;
        std::vector<std::string> get_fields(const std::string &key) const;
        bool has_field(const std::string &key) const;
        size_t get_field_count(const std::string &key) const;

        // File access
        FormData get_file(const std::string &key, size_t id = 0) const;
        std::vector<FormData> get_files(const std::string &key) const;
        bool has_file(const std::string &key) const;
        size_t get_file_count(const std::string &key) const;
    };

    struct UploadFormData {
        std::string name;
        std::string content;
        std::string filename;
        std::string content_type;
    };

}}}}

#endif//QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_FORMS