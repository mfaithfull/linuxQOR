// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_FIELDS
#define QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_FIELDS

#include <string>

namespace qor { namespace components { namespace protocols { namespace http { namespace fields {

    inline bool is_token_char(char c) 
    {
        return std::isalnum(c) || c == '!' || c == '#' || c == '$' || c == '%' ||
                c == '&' || c == '\'' || c == '*' || c == '+' || c == '-' ||
                c == '.' || c == '^' || c == '_' || c == '`' || c == '|' || c == '~';
    }

    inline bool is_token(const std::string &s) 
    {
        if (s.empty()) { return false; }
        for (auto c : s) 
        {
            if (!is_token_char(c)) { return false; }
        }
        return true;
    }

    inline bool is_field_name(const std::string &s) { return is_token(s); }

    inline bool is_vchar(char c) { return c >= 33 && c <= 126; }

    inline bool is_obs_text(char c) { return 128 <= static_cast<unsigned char>(c); }

    inline bool is_field_vchar(char c) { return is_vchar(c) || is_obs_text(c); }

    inline bool is_field_content(const std::string &s) 
    {
        if (s.empty()) { return true; }

        if (s.size() == 1) {
        return is_field_vchar(s[0]);
        } else if (s.size() == 2) {
        return is_field_vchar(s[0]) && is_field_vchar(s[1]);
        } else {
        size_t i = 0;

        if (!is_field_vchar(s[i])) { return false; }
        i++;

        while (i < s.size() - 1) {
        auto c = s[i++];
        if (c == ' ' || c == '\t' || is_field_vchar(c)) {
        } else {
        return false;
        }
        }

        return is_field_vchar(s[i]);
        }
    }

    inline bool is_field_value(const std::string &s) 
    { 
        return is_field_content(s); 
    }

}}}}}//qor::components::protocols::http::fields

#endif//QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_FIELDS