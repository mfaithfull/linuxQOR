
// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "error.h"

namespace qor { namespace components { namespace protocols { namespace http {

    std::ostream &operator<<(std::ostream &os, const Error &obj) 
    {
        os << to_string(obj);
        os << " (" << static_cast<std::underlying_type<Error>::type>(obj) << ')';
        return os;
    }

    std::string to_string(const Error error) 
    {
        switch (error) {
        case Error::Success: return "Success (no error)";
        case Error::Unknown: return "Unknown";
        //case Error::Connection: return "Could not establish connection";
        //case Error::BindIPAddress: return "Failed to bind IP address";
        case Error::Read: return "Failed to read connection";
        case Error::Write: return "Failed to write connection";
        //case Error::ExceedRedirectCount: return "Maximum redirect count exceeded";
        case Error::Canceled: return "Connection handling canceled";
        //case Error::SSLConnection: return "SSL connection failed";
        //case Error::SSLLoadingCerts: return "SSL certificate loading failed";
        //case Error::SSLServerVerification: return "SSL server verification failed";
        //case Error::SSLServerHostnameVerification: return "SSL server hostname verification failed";
        case Error::UnsupportedMultipartBoundaryChars: return "Unsupported HTTP multipart boundary characters";
        //case Error::Compression: return "Compression failed";
        //case Error::ConnectionTimeout: return "Connection timed out";
        //case Error::ProxyConnection: return "Proxy connection failed";
        //case Error::ResourceExhaustion: return "Resource exhaustion";
        //case Error::TooManyFormDataFiles: return "Too many form data files";
        //case Error::ExceedMaxPayloadSize: return "Exceeded maximum payload size";
        //case Error::ExceedUriMaxLength: return "Exceeded maximum URI length";
        //case Error::ExceedMaxSocketDescriptorCount: return "Exceeded maximum socket descriptor count";
        //case Error::InvalidRequestLine: return "Invalid request line";
        //case Error::InvalidHTTPMethod: return "Invalid HTTP method";
        //case Error::InvalidHTTPVersion: return "Invalid HTTP version";
        //case Error::InvalidHeaders: return "Invalid headers";
        //case Error::MultipartParsing: return "Multipart parsing failed";
        //case Error::OpenFile: return "Failed to open file";
        //case Error::Listen: return "Failed to listen on socket";
        //case Error::GetSockName: return "Failed to get socket name";
        //case Error::UnsupportedAddressFamily: return "Unsupported address family";
        //case Error::HTTPParsing: return "HTTP parsing failed";
        //case Error::InvalidRangeHeader: return "Invalid Range header";
        default: break;
        }

        return "Invalid";
    }

}}}}//qor::components::protocols::http

