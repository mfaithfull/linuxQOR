
// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "response.h"
#include "fields/fields.h"
#include "contentprovideradapter.h"

namespace qor { namespace components { namespace protocols { namespace http {

    bool Response::has_header(const std::string &key) const 
    {
        return headers.find(key) != headers.end();
    }

    std::string Response::get_header_value(const std::string &key, const char *def, size_t id) const 
    {
        return http::get_header_value(headers, key, def, id);
    }

    size_t Response::get_header_value_count(const std::string &key) const 
    {
        auto r = headers.equal_range(key);
        return static_cast<size_t>(std::distance(r.first, r.second));
    }

    void Response::set_header(const std::string &key, const std::string &val) 
    {
        if (fields::is_field_name(key) && fields::is_field_value(val)) 
        {
            headers.emplace(key, val);
        }
    }

    bool Response::has_trailer(const std::string &key) const 
    {
        return trailers.find(key) != trailers.end();
    }

    std::string Response::get_trailer_value(const std::string &key, size_t id) const 
    {
        auto rng = trailers.equal_range(key);
        auto it = rng.first;
        std::advance(it, static_cast<ssize_t>(id));
        if (it != rng.second) 
        { 
            return it->second; 
        }
        return std::string();
    }

    inline size_t Response::get_trailer_value_count(const std::string &key) const 
    {
        auto r = trailers.equal_range(key);
        return static_cast<size_t>(std::distance(r.first, r.second));
    }

    void Response::set_redirect(const std::string &url, int stat) 
    {
        if (fields::is_field_value(url))
        {
            set_header("Location", url);
            if (300 <= stat && stat < 400) 
            {
                this->status = stat;
            } 
            else 
            {
                this->status = StatusCode::Found_302;
            }
        }
    }

    void Response::set_content(const char *s, size_t n, const std::string &content_type) 
    {
        body.assign(s, n);
        auto rng = headers.equal_range("Content-Type");
        headers.erase(rng.first, rng.second);
        set_header("Content-Type", content_type);
    }

    void Response::set_content(const std::string &s, const std::string &content_type) 
    {
        set_content(s.data(), s.size(), content_type);
    }

    void Response::set_content(std::string &&s, const std::string &content_type) 
    {
        body = std::move(s);

        auto rng = headers.equal_range("Content-Type");
        headers.erase(rng.first, rng.second);
        set_header("Content-Type", content_type);
    }

    void Response::set_content_provider( size_t in_length, const std::string &content_type, ContentProvider provider, ContentProviderResourceReleaser resource_releaser) 
    {
        set_header("Content-Type", content_type);
        content_length_ = in_length;
        if (in_length > 0) 
        { 
            content_provider_ = std::move(provider); 
        }
        content_provider_resource_releaser_ = std::move(resource_releaser);
        is_chunked_content_provider_ = false;
    }

    void Response::set_content_provider( const std::string &content_type, ContentProviderWithoutLength provider, ContentProviderResourceReleaser resource_releaser) 
    {
        set_header("Content-Type", content_type);
        content_length_ = 0;
        content_provider_ = ContentProviderAdapter(std::move(provider));
        content_provider_resource_releaser_ = std::move(resource_releaser);
        is_chunked_content_provider_ = false;
    }

    void Response::set_chunked_content_provider(const std::string &content_type, ContentProviderWithoutLength provider, ContentProviderResourceReleaser resource_releaser) 
    {
        set_header("Content-Type", content_type);
        content_length_ = 0;
        content_provider_ = ContentProviderAdapter(std::move(provider));
        content_provider_resource_releaser_ = std::move(resource_releaser);
        is_chunked_content_provider_ = true;
    }

    inline void Response::set_file_content(const std::string &path, const std::string &content_type) 
    {
        file_content_path_ = path;
        file_content_content_type_ = content_type;
    }

    inline void Response::set_file_content(const std::string &path) 
    {
        file_content_path_ = path;
    }

}}}}//qor::components::protocols::http

