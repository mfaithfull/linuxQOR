// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_TEXT_RANDOM
#define QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_TEXT_RANDOM

#include <string>
#include <random>

namespace qor { namespace components { namespace protocols { namespace http { namespace text {

    std::string random_string(size_t length) 
    {
        constexpr const char data[] =
        "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

        thread_local auto engine([]() 
        {
            // std::random_device might actually be deterministic on some
            // platforms, but due to lack of support in the c++ standard library,
            // doing better requires either some ugly hacks or breaking portability.
            std::random_device seed_gen;
            // Request 128 bits of entropy for initialization
            std::seed_seq seed_sequence{seed_gen(), seed_gen(), seed_gen(), seed_gen()};
            return std::mt19937(seed_sequence);
        }());

        std::string result;
        for (size_t i = 0; i < length; i++) 
        {
            result += data[engine() % (sizeof(data) - 1)];
        }
        return result;
    }

}}}}}//qor::components:protocols::http::text

#endif//QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_TEXT_RANDOM

