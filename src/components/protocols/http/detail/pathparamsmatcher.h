// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_DETAIL_PATHPARAMSMATCHER
#define QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_DETAIL_PATHPARAMSMATCHER

#include <string>
#include <vector>
#include "matcher.h"

namespace qor { namespace components { namespace protocols { namespace http { namespace detail {

    class PathParamsMatcher final : public MatcherBase 
    {
    public:
        PathParamsMatcher(const std::string &pattern);

        bool match(Request &request) const override;

    private:
        // Treat segment separators as the end of path parameter capture
        // Does not need to handle query parameters as they are parsed before path
        // matching
        static constexpr char separator = '/';

        // Contains static path fragments to match against, excluding the '/' after
        // path params
        // Fragments are separated by path params
        std::vector<std::string> static_fragments_;
        // Stores the names of the path parameters to be used as keys in the
        // Request::path_params map
        std::vector<std::string> param_names_;
    };

}}}}}//qor::components::protocols::http::detail

#endif//QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_DETAIL_PATHPARAMSMATCHER