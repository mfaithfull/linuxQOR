
// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include "requestwriter.h"
#include "error.h"

namespace qor { namespace components { namespace protocols { namespace http {

    HTTPRequestWriter::HTTPRequestWriter() : m_source()
    {
        SetFlowMode(Element::FlowMode::Push);
        m_source.SetParent(this);
    }

    void HTTPRequestWriter::SetBuffer(pipeline::Buffer* buffer)
    {
        Pipeline::SetBuffer(buffer);
        m_source.SetBuffer(buffer);
        auto sink = GetSink();
        if(sink)
        {
            sink->SetBuffer(buffer);
        }
    }

    bool HTTPRequestWriter::WriteData(const std::string& str)
    {
        return WriteData(str.c_str(), str.length());
    }

    bool HTTPRequestWriter::WriteData(const char* data, size_t size)
    {
        auto buffer = GetBuffer();
        if(buffer)
        {
            do
            {
                size_t unitsToWrite = size;        
                byte* space = buffer->WriteRequest(unitsToWrite);
                memcpy(space, data, unitsToWrite);
                buffer->WriteAcknowledge(unitsToWrite);        
                size -= unitsToWrite;
                if(size > 0)
                {
                    size_t unitsWritten = 0;
                    if(!ActualSink()->Write(unitsWritten, unitsToWrite))
                    {   
                        return false;
                    }
                }
            } while (size > 0);
            return true;
        }
        return false;
    }

    bool HTTPRequestWriter::WriteRequestLine(const std::string &method, const std::string &path)
    {
        std::string s = method;
        s += " ";
        s += path;
        s += " HTTP/1.1\r\n";
        return WriteData(s.data(), s.size());
    }

    bool HTTPRequestWriter::WriteHeaders(const Headers &headers)
    {
        //ssize_t write_len = 0;
        for (const auto &x : headers) 
        {
            std::string s;
            s = x.first;
            s += ": ";
            s += x.second;
            s += "\r\n";

            auto len = WriteData(s.data(), s.size());
            if (len < 0) 
            { 
                return len; 
            }
            //write_len += len;
        }
        return WriteData("\r\n");
    }

    bool HTTPRequestWriter::WriteHeader(Request& req, const std::string& path_with_query)
    {
        // Write request line and headers
        WriteRequestLine(req.method, path_with_query);
        WriteHeaders(req.headers);

        auto buffer = GetBuffer();

        if(buffer)
        {
            size_t unitsToWrite = buffer->ReadCapacity();
            size_t unitsWritten = 0;
            if(!ActualSink()->Write(unitsWritten, unitsToWrite))
            {
                //error = Error::Write;
                //output_error_log(error, &req);
                return false;
            }
            return true;
        }
        return false;
    }

    bool HTTPRequestWriter::WriteBody(Request& req)
    {
        // Body
        if (req.body.empty()) 
        {
            return write_content_with_provider(req);
        }
        return true;
    }

    bool HTTPRequestWriter::WriteUpload(Request& req)
    {
        if (req.upload_progress) 
        {
            auto body_size = req.body.size();
            size_t written = 0;
            auto data = req.body.data();

            while (written < body_size) 
            {
                size_t to_write = (std::min)(16384ul, body_size - written);
                if (!WriteData(data + written, to_write)) 
                {
                    //error = Error::Write;
                    //output_error_log(error, &req);
                    return false;
                }
                written += to_write;

                if (!req.upload_progress(written, body_size)) 
                {
                    //error = Error::Canceled;
                    //output_error_log(error, &req);
                    return false;
                }
            }
        } 
        else 
        {
            if (!WriteData(req.body.data(), req.body.size())) 
            {
                //error = Error::Write;
                //output_error_log(error, &req);
                return false;
            }
        }
        return true;
    }

    bool HTTPRequestWriter::Write(Request& req, const std::string& path_with_query)
    {
        bool bResult = WriteHeader(req, path_with_query) && WriteBody(req) && WriteUpload(req);

        auto buffer = GetBuffer();
        if(buffer)
        {
            size_t size = buffer->ReadCapacity();
            while(size > 0)
            {            
                size_t unitsWritten = 0;
                if(!ActualSink()->Write(unitsWritten, size))
                {   
                    return false;
                }
                size -= unitsWritten;
            };        
        }
        return bResult;
    }

    bool HTTPRequestWriter::write_content_with_provider(const protocols::http::Request &req)
    {
        auto is_shutting_down = []() { return false; };
        
        if (req.IsChunkedContentProvider()) 
        {
            // TODO: Brotli support
            //std::unique_ptr<detail::compressor> compressor;
#ifdef CPPHTTPLIB_ZLIB_SUPPORT
            if (compress_) 
            {
                compressor = std::make_unique<detail::gzip_compressor>();
            } 
            else
#endif
            {
                //compressor = std::make_unique<detail::nocompressor>();
            }

            return false;//detail::write_content_chunked(strm, req.content_provider_, is_shutting_down, *compressor);
        } 
        else 
        {
            Error error = Error::Success;
            return write_content_with_progress(req.GetContentProvider(), (size_t)0, req.GetContentLength(), is_shutting_down, req.upload_progress, error);
        }
    }



}}}}//qor::components::protocols::http
