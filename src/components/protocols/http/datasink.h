// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_DATASINK
#define QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_DATASINK

#include <vector>
#include "forms.h"

namespace qor { namespace components { namespace protocols { namespace http {

    using UploadFormDataItems = std::vector<UploadFormData>;

    class DataSink 
    {
    public:
        DataSink() : os(&sb_), sb_(*this) {}

        DataSink(const DataSink &) = delete;
        DataSink &operator=(const DataSink &) = delete;
        DataSink(DataSink &&) = delete;
        DataSink &operator=(DataSink &&) = delete;

        std::function<bool(const char *data, size_t data_len)> write;
        std::function<bool()> is_writable;
        std::function<void()> done;
        std::function<void(const Headers &trailer)> done_with_trailer;
        std::ostream os;

    private:

        class data_sink_streambuf final : public std::streambuf 
        {
        public:
            explicit data_sink_streambuf(DataSink &sink) : sink_(sink) {}

        protected:

            std::streamsize xsputn(const char *s, std::streamsize n) override 
            {
                sink_.write(s, static_cast<size_t>(n));
                return n;
            }

        private:
            DataSink &sink_;
        };

        data_sink_streambuf sb_;
    };


}}}}

#endif//QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_DATASINK

