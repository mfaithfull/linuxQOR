// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_REQUESTWRITER
#define QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_REQUESTWRITER

#include <functional>
#include "src/framework/pipeline/pipeline.h"
#include "src/framework/pipeline/podbuffer.h"
#include "src/framework/pipeline/sink.h"
#include "request.h"
#include "error.h"

namespace qor { namespace components { namespace protocols { namespace http { 

    class qor_pp_module_interface(QOR_HTTP) HTTPRequestWriter : public pipeline::Pipeline
    {
    public:

        HTTPRequestWriter();
        virtual ~HTTPRequestWriter() = default;
        bool Write(Request& request, const std::string& path_with_query);
        virtual void SetBuffer(pipeline::Buffer* buffer);

    protected:
        

        virtual bool Write(size_t& unitsWritten, size_t unitstoWrite) {return false;}
        virtual bool Read(size_t& unitsRead, size_t unitsToRead = 1 ) { return false; }
        
        pipeline::NullSource m_source;

    private:

        bool WriteHeaders(const Headers &headers);
        bool WriteData(const std::string& str);
        bool WriteData(const char* data, size_t size);
        bool WriteRequestLine(const std::string &method, const std::string &path);
        bool WriteHeader(Request& req, const std::string& path_with_query);
        bool WriteBody(Request& req);
        bool WriteUpload(Request& req);
        void ExtractPathAndQuery(Request& req);
        std::string EncodePathAndQuery(Request& req);
        bool write_content_with_provider(const protocols::http::Request &req);

        template <typename T>
        bool write_content_with_progress(const ContentProvider &content_provider, size_t offset, size_t length, T is_shutting_down, const UploadProgress &upload_progress, Error &error)
        {
            size_t end_offset = offset + length;
            size_t start_offset = offset;
            auto ok = true;
            DataSink data_sink;

            data_sink.write = [&](const char *d, size_t l) -> bool 
                {
                    if (ok) {
                        if (WriteData(d, (size_t)l)) 
                        {
                            offset += l;
                            if (upload_progress && length > 0) {
                                size_t current_written = offset - start_offset;
                                if (!upload_progress(current_written, length)) 
                                {
                                    ok = false;
                                    return false;
                                }
                            }
                        } else {
                        ok = false;
                        }
                    }
                    return ok;
                };

            data_sink.is_writable = [&]() -> bool { return true;/*strm.wait_writable();*/ };

            while (offset < end_offset && !is_shutting_down()) 
            {
                /*
                if (!strm.wait_writable()) 
                {
                    error = Error::Write;
                    return false;
                } 
                else*/ if (!content_provider(offset, end_offset - offset, data_sink)) 
                {
                    error = Error::Canceled;
                    return false;
                } 
                else if (!ok) 
                {
                    error = Error::Write;
                    return false;
                }
            }

            error = Error::Success;
            return true;
        }

    };

}}}}//qor::components::protocols::http

#endif//QOR_PP_H_COMPONENTS_PROTOCOLS_HTTP_REQUESTWRITER
