// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include <string.h>
#include "stackpage.h"
#include "../threadheap/threadheap.h"

namespace qor{ namespace components{ namespace threadmemory{

    void* StackPage::operator new(size_t sz)
    {
        return new_ref<ThreadHeap>()->Allocate(sz);
    }

    void StackPage::operator delete(void* allocation)
    {
        new_ref<ThreadHeap>()->Free(reinterpret_cast<byte*>(allocation));
    }

    StackPage::StackPage(size_t pageUnits) : 
        m_pageUnits(pageUnits), m_next(nullptr), m_prev(nullptr), 
        m_memoryBase(nullptr), m_ToS(nullptr), m_items(0) {}

    StackPage::~StackPage()
    {
        new_ref<ThreadHeap>()->Free(m_memoryBase);
    }

    size_t StackPage::TotalSizeBytes() const
    {
        return m_memoryBase ? (m_pageUnits * c_pageSize) : 0;
    }

    size_t StackPage::AllocatedByteCount() const
    {
        return m_ToS - m_memoryBase;
    }

    size_t StackPage::AllocatedItemsCount(void) const
    {
        return m_items;
    }

    void StackPage::SetSize(size_t pageUnits)
    {
        m_pageUnits = pageUnits;
    }

    StackPage* StackPage::Next() const
    {
        return m_next;
    }

    StackPage* StackPage::Previous() const
    {
        return m_prev;
    }

    void  StackPage::SetNext(StackPage* next)
    {
        m_next = next;
    }

    void  StackPage::SetPrevious(StackPage* prev)
    {
        m_prev = prev;
    }

    void  StackPage::Initialise()
    {
        if(m_memoryBase == nullptr && (m_pageUnits > 0))
        {
            m_memoryBase = reinterpret_cast<byte*>(new_ref<ThreadHeap>()->Allocate(m_pageUnits * c_pageSize));
            m_ToS = m_memoryBase;
            m_items = 0;
        }
    }

    void* StackPage::Allocate(size_t byteCount)
    {
        byte* mem = nullptr;
        if((m_memoryBase + (m_pageUnits * c_pageSize)) > (m_ToS + byteCount + sizeof(StackPage*)))
        {
            mem = Push(byteCount + sizeof(StackPage*));
            *(reinterpret_cast<StackPage**>(mem)) = this;
            mem += sizeof(StackPage*);
            m_items++;
        }
        return mem;
    }

    bool StackPage::Free(void* memory, size_t byteCount)
    {
        bool result = false;
        byte* mem = reinterpret_cast<byte*>(memory) - sizeof(StackPage*);
        byteCount += sizeof(StackPage*);
        if((mem >= m_memoryBase) && (mem <= (m_ToS - byteCount)))
        {
            if(m_ToS == (mem + byteCount))
            {
                Pop(byteCount);
            }
            else
            {
#ifndef NDEBUG
                memset(mem, 0xFD, byteCount);
#endif       
            }
            --m_items;
            if(m_items == 0)
            {
                m_ToS = m_memoryBase;
            }
            result = true;
        }
        return result;
    }

    byte* StackPage::Push(size_t byteCount)
    {
        byte* mem = m_ToS;
#ifndef NDEBUG
        memset(mem, 0x3, byteCount);
#endif
        m_ToS += byteCount;
        return mem;
    }

    byte* StackPage::Pop(size_t byteCount)
    {
        m_ToS -= byteCount;
#ifndef NDEBUG
        memset(m_ToS, 0xFD, byteCount);
#endif
        return m_ToS;
    }


}}}//qor::components::threadmemory