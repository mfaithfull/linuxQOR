// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include <string.h>
#include "fastheap.h"
#include "../threadheap/threadheap.h"

using namespace qor;


thread_local qor::detail::ThreadInstanceHolder<qor::components::threadmemory::FastHeap> ThreadInstanceHolderFastHeap;

qor_pp_export qor::detail::ThreadInstanceHolder<components::threadmemory::FastHeap>* GetFastHeapHolder()
{
    return &ThreadInstanceHolderFastHeap;
}

namespace qor { namespace detail {

        template<>
        ThreadInstanceHolder<components::threadmemory::FastHeap>* theThreadInstanceHolder<components::threadmemory::FastHeap>()
        {
            return GetFastHeapHolder();
        }
}}


namespace qor{ namespace components{ namespace threadmemory{

    FastHeap::FastHeap()
    {
        m_allocIndex = 0;
        m_totalAlloc = 0;
        m_peakAlloc = 0;

        size_t BucketSize = 1;
        for (size_t Bucket = 0; Bucket < sc_rootBuckets; Bucket++)
        {
            m_initialPages[Bucket].SetSize(BucketSize);
            BucketSize *= sc_powerScale;
        }
    }

    FastHeap::~FastHeap()
    {

    }

    void* FastHeap::Allocate(size_t byteCount)
    {
        FastBucket* bucket = Bucket(byteCount);
        void* memory = bucket ? bucket->Allocate(byteCount) : nullptr;

        if(memory)
        {
            m_totalAlloc += (byteCount);
            if (m_totalAlloc > m_peakAlloc)
            {
                m_peakAlloc = m_totalAlloc;
            }
        }
        return memory;
    }	

    void FastHeap::Free(void* allocation, size_t byteCount)
    {
        FastBucket* bucket = Bucket(byteCount);
        if (bucket && bucket->Free(allocation, byteCount))
        {
            m_totalAlloc -= (byteCount);
        }
        else
        {
            throw memoryexception("Memory to free at %X not found in Fast Heap.");
        }
    }

    size_t FastHeap::TotalBytesAllocated() const
    {
        return m_totalAlloc;
    }

    FastBucket* FastHeap::Bucket(size_t byteCount)
    {
        size_t basePage = 0;
        FastBucket* bucket = &m_initialPages[basePage];
        while ((basePage < sc_rootBuckets) && ((byteCount * 7) > bucket->PageSize()))
        {
            bucket = &m_initialPages[++basePage];
        }
        if (basePage < sc_rootBuckets)
        {
            bucket->Initialise();
        }
        else
        {
            bucket = nullptr;
        }
        return bucket;
    }

}}}//qor::components::threadmemory