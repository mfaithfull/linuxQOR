// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENT_THREADMEMORY_FASTHEAP
#define QOR_PP_H_COMPONENT_THREADMEMORY_FASTHEAP

#include "src/platform/compiler/compiler.h"
#include "src/qor/objectcontext/anyobject.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/factory/factory.h"
#include "src/qor/instance/instance.h"
#include "src/qor/reference/ref.h"
#include "src/qor/reference/newref.h"
#include "src/qor/instance/threadsingleton.h"
#include "fastbucket.h"

namespace qor { namespace components { namespace threadmemory {

        class qor_pp_module_interface(QOR_THREADMEMORY) FastHeap final
        {
        public:

            static constexpr size_t sc_rootBuckets = 8;
            static constexpr size_t sc_powerScale = 2;

            FastHeap();
            ~FastHeap();
            void* Allocate(size_t byteCount);
            void Free(void* allocation, size_t byteCount);
            size_t TotalBytesAllocated() const;

        private:

            FastBucket* Bucket(size_t byteCount);

            FastBucket m_initialPages[sc_rootBuckets];
            size_t m_totalAlloc;
            size_t m_peakAlloc;
            size_t m_allocIndex;

        };

    }}//qor::components::threadmemory

    qor_pp_declare_instancer_of(components::threadmemory::FastHeap, ThreadSingletonInstancer);    
}//qor

qor_pp_module_interface(QOR_THREADMEMORY) qor::detail::ThreadInstanceHolder<qor::components::threadmemory::FastHeap>* GetFastHeapHolder();

#endif//QOR_PP_H_COMPONENT_THREADMEMORY_FASTHEAP
