// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"


#include "threadheap.h"

namespace qor {
    bool qor_pp_module_interface(QOR_THREADMEMORY) ImplementsThreadHeap()
    {
        return true;
    }
}

using namespace qor;

qor_pp_thread_local qor::detail::ThreadInstanceHolder<qor::components::threadmemory::ThreadHeap> ThreadInstanceHolderThreadHeap;

qor_pp_export qor::detail::ThreadInstanceHolder<qor::components::threadmemory::ThreadHeap>* GetCurrentThreadHeap()
{
    return &ThreadInstanceHolderThreadHeap;
}

namespace qor {
    namespace detail {

        template<>
        ThreadInstanceHolder<qor::components::threadmemory::ThreadHeap>* theThreadInstanceHolder<qor::components::threadmemory::ThreadHeap>()
        {
            return GetCurrentThreadHeap();
        }
    }
}


namespace qor{ namespace components{ namespace threadmemory{

    ThreadHeap::ThreadHeap()
    {
        //On GNU Linux the system heap has a per thread arena already so the ThreadHeap is just the heap
    }

    ThreadHeap::~ThreadHeap()
    {

    }

    byte* ThreadHeap::Allocate(size_t byteCount)
    {
        return new byte[byteCount];
    }

    void ThreadHeap::Free(byte* allocation)
    {
        delete [] allocation;
    }

}}}//qor::components::threadmemory