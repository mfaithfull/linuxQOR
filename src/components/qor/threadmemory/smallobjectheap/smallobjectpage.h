// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENT_THREADMEMORY_SMALLOBJECTHEAP_PAGE
#define QOR_PP_H_COMPONENT_THREADMEMORY_SMALLOBJECTHEAP_PAGE

#include "src/platform/compiler/compiler.h"

namespace qor{ namespace components{ namespace threadmemory{

    class qor_pp_module_interface(QOR_THREADMEMORY) SmallObjectPage final
    {
    public:

        static constexpr size_t sc_WordBits = sizeof(size_t) * 8;

        SmallObjectPage(size_t unitSize, size_t mapWordCount = 1);        
        ~SmallObjectPage();

        byte* Allocate();
        bool IsEmpty() const;
        bool Free(byte* element);
        bool IsFull() const;

        SmallObjectPage* m_prev;

    private:
    
        inline byte* Memory() const
        {
            return m_memory;
        }    

        void inline Use(size_t wordIndex, size_t bitIndex)
        {
            m_map[wordIndex] |= ( (size_t)(1) << bitIndex);
        }

        void inline Free(size_t wordIndex, size_t bitIndex)
        {
            m_map[wordIndex] &= ~( (size_t)(1) << bitIndex );
        }

        bool inline IsInUse(size_t wordIndex, size_t bitIndex) const
        {
            return (m_map[wordIndex] & ((size_t)(1) << bitIndex)) != 0 ? true : false;
        }

        size_t* m_map;
        byte* m_memory;
        size_t m_mapWords;
        size_t m_unitSize;
        size_t m_pageByteCount;        

        SmallObjectPage(const SmallObjectPage& src) = delete;
        SmallObjectPage& operator = (const SmallObjectPage& src) = delete;
    };

}}}//qor::components::threadmemory

#endif//QOR_PP_H_COMPONENT_THREADMEMORY_SMALLOBJECTHEAP_PAGE
