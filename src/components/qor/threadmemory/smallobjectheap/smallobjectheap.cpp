// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "src/configuration/configuration.h"
#include <string.h>
#include "smallobjectheap.h"
#include "../fastheap/fastheap.h"

using namespace qor;


qor_pp_thread_local qor::detail::ThreadInstanceHolder<qor::components::threadmemory::SmallObjectHeap> ThreadInstanceHolderSmallObjectHeap;

qor_pp_export qor::detail::ThreadInstanceHolder<qor::components::threadmemory::SmallObjectHeap>* GetCurrentSmallObjectHeap()
{
    return &ThreadInstanceHolderSmallObjectHeap;
}

namespace qor {
    namespace detail {

        template<>
        ThreadInstanceHolder<components::threadmemory::SmallObjectHeap>* theThreadInstanceHolder<components::threadmemory::SmallObjectHeap>()
        {
            return GetCurrentSmallObjectHeap();
        }
    }
}

namespace qor{ namespace components{ namespace threadmemory{

    SmallObjectHeap::SmallObjectHeap()
    {
        memset(m_buckets, 0, sizeof(char*) * sc_rootBuckets);
        m_totalAlloc = 0;
        m_peakAlloc = 0;

    }

    SmallObjectHeap::~SmallObjectHeap()
    {
        for(unsigned int bucketIndex = 0; bucketIndex < sc_rootBuckets; ++bucketIndex)
        {
            if(m_buckets[bucketIndex] != nullptr)
            {
                FreeBucket(bucketIndex, m_buckets[bucketIndex]);
            }
        }
    }

    byte* SmallObjectHeap::Allocate(size_t size)
    {
        byte* memory = nullptr;
        if( size > (1024 * 64))
        {
            memory = DeferToFastAllocator(size);
        }
        else
        {
            SmallObjectBucket* bucket = Bucket(BucketIndex(size));
            if(bucket)
            {
                memory = bucket->Allocate();
                m_totalAlloc += bucket->UnitSize();
            }
        }

        if(memory)
        {
            if(m_totalAlloc > m_peakAlloc)
            {
                m_peakAlloc = m_totalAlloc;
            }
        }
        else
        {
            throw memoryexception( "The Small Object Heap has run out of space.");
        }
        return memory;
    }

    void SmallObjectHeap::Free(byte* memory, size_t size)
    {
        if(size <= 1024 * 64)
        {
            int bucketIndex = BucketIndex(size);
            SmallObjectBucket* bucket = m_buckets[bucketIndex];
            if(bucket && bucket->Free(memory))
            {
                m_totalAlloc -= bucket->UnitSize();
                if(bucket->IsEmpty() && (bucket->GetCacheCount() == 0))
                {
                    FreeBucket(bucketIndex, bucket);
                }
            }
            else
            {
                throw memoryexception( "The Small Object Heap can't find bucket.");
            }
        }
        else
        {
            DeferToFastFree(memory, size);
        }
    }

    size_t SmallObjectHeap::TotalAllocation(void) const
    {
        return m_totalAlloc;
    }

    size_t SmallObjectHeap::PeakAllocation() const
    {
        return m_peakAlloc;
    }

    void SmallObjectHeap::SetCacheLimit(byte pages)
    {
        for (size_t bucketIndex = 0; bucketIndex < sc_rootBuckets; ++bucketIndex)
        {
            if (m_buckets[bucketIndex] != nullptr)
            {
                m_buckets[bucketIndex]->SetCacheLimit(pages);
            }
        }
    }

    byte* SmallObjectHeap::DeferToFastAllocator(size_t size)
    {
        return reinterpret_cast<byte*>(new_ref<FastHeap>()->Allocate(size));
    }

    void SmallObjectHeap::DeferToFastFree(void* mem, size_t size)
    {
        new_ref<FastHeap>()->Free(mem, size);
    }

    void SmallObjectHeap::FreeBucket(int bucketIndex, SmallObjectBucket* bucket)
    {
        m_buckets[bucketIndex] = nullptr;
        delete bucket;
    }

    int SmallObjectHeap::BucketIndex(size_t allocSize)
    {
        int bucketIndex = 0;
        SmallObjectBucket* bucket = nullptr;
        do
        {
        } while ((allocSize > (size_t)(4 << bucketIndex)) && (++bucketIndex < sc_rootBuckets));
        bucket = m_buckets[bucketIndex];
        if (bucket == nullptr && (allocSize <= (size_t)(4 << bucketIndex)))
        {
            m_buckets[bucketIndex] = new SmallObjectBucket(4 << bucketIndex);
        }

        return bucketIndex;
    }

    SmallObjectBucket* SmallObjectHeap::Bucket(int bucketIndex)          //Get the bucket from the index
    {
        SmallObjectBucket* bucket = nullptr;
        if (bucketIndex >= 0 && bucketIndex < sc_rootBuckets)
        {
            bucket = m_buckets[bucketIndex];
        }
        return bucket;
    }


}}}//qor::components::threadmemory
