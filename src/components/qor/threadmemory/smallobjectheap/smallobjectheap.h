// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENT_THREADMEMORY_SMALLOBJECTHEAP
#define QOR_PP_H_COMPONENT_THREADMEMORY_SMALLOBJECTHEAP

#include "src/platform/compiler/compiler.h"
#include "src/qor/objectcontext/anyobject.h"
#include "src/framework/thread/currentthread.h"
#include "src/qor/injection/typeidentity.h"
#include "src/qor/factory/factory.h"
#include "src/qor/instance/instance.h"
#include "src/qor/reference/ref.h"
#include "src/qor/reference/newref.h"
#include "src/qor/instance/threadsingleton.h"
#include "smallobjectbucket.h"

namespace qor{ namespace components{ namespace threadmemory{

    class qor_pp_module_interface(QOR_THREADMEMORY) SmallObjectHeap final
    {

    public:

        static constexpr size_t sc_rootBuckets = (sizeof(size_t) * 8) / 4;// power of 4 buckets up to the memory space size

        SmallObjectHeap();
        ~SmallObjectHeap();

        byte* Allocate(size_t size);
        void Free(byte* p, size_t size);
        size_t TotalAllocation(void) const;
        size_t PeakAllocation() const;
        void SetCacheLimit(byte Pages);

    private:

        byte* DeferToFastAllocator(size_t size);
        void DeferToFastFree(void* mem, size_t size);
        void FreeBucket(int bucketIndex, SmallObjectBucket* bucket);
        int BucketIndex(size_t allocSize);					            //Get the bucket index from the size of allocation
        SmallObjectBucket* Bucket(int bucketIndex);                     //Get the bucket from the index

        SmallObjectBucket* m_buckets[sc_rootBuckets];		            //Array of buckets to contain allocations        
        size_t m_totalAlloc;							                //The total allocated bytes
        size_t m_peakAlloc;								                //The highest total allocated bytes
    };

}}}//qor::components::threadmemory

namespace qor{ qor_pp_declare_instancer_of(components::threadmemory::SmallObjectHeap, ThreadSingletonInstancer);}

qor_pp_module_interface(QOR_THREADMEMORY) qor::detail::ThreadInstanceHolder<qor::components::threadmemory::SmallObjectHeap>* GetCurrentSmallObjectHeap();

#endif//QOR_PP_H_COMPONENT_THREADMEMORY_SMALLOBJECTHEAP

