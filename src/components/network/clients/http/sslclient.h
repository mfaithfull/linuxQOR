// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_NETWORK_CLIENTS_HTTP_SSLCLIENT
#define QOR_PP_H_COMPONENTS_NETWORK_CLIENTS_HTTP_SSLCLIENT

#include "clientimpl.h"

namespace qor{ namespace components{ namespace network{

    class SSLClient final : public ClientImpl 
    {
    public:
        explicit SSLClient(const std::string &host);
        explicit SSLClient(const std::string &host, int port);
        explicit SSLClient(const std::string &host, int port, const std::string &client_cert_path, const std::string &client_key_path, const std::string &private_key_password = std::string());
        explicit SSLClient(const std::string &host, int port, X509 *client_cert, EVP_PKEY *client_key, const std::string &private_key_password = std::string());
        ~SSLClient() override;
        bool is_valid() const override;
        void set_ca_cert_store(X509_STORE *ca_cert_store);
        void load_ca_cert_store(const char *ca_cert, std::size_t size);
        long get_openssl_verify_result() const;
        SSL_CTX *ssl_context() const;

    private:
        bool create_and_connect_socket(Socket &socket, Error &error) override;
        void shutdown_ssl(Socket &socket, bool shutdown_gracefully) override;
        void shutdown_ssl_impl(Socket &socket, bool shutdown_gracefully);
        bool process_socket(const Socket &socket, std::chrono::time_point<std::chrono::steady_clock> start_time, std::function<bool(Stream &strm)> callback) override;
        bool is_ssl() const override;

        bool connect_with_proxy( Socket &sock, std::chrono::time_point<std::chrono::steady_clock> start_time, Response &res, bool &success, Error &error);
        bool initialize_ssl(Socket &socket, Error &error);
        bool load_certs();

        bool verify_host(X509 *server_cert) const;
        bool verify_host_with_subject_alt_name(X509 *server_cert) const;
        bool verify_host_with_common_name(X509 *server_cert) const;
        bool check_host_name(const char *pattern, size_t pattern_len) const;

        SSL_CTX *ctx_;
        std::mutex ctx_mutex_;
        std::once_flag initialize_cert_;
        std::vector<std::string> host_components_;
        long verify_result_ = 0;
        friend class ClientImpl;
    };

}}}//qor::components::network

#endif//QOR_PP_H_COMPONENTS_NETWORK_CLIENTS_HTTP_SSLCLIENT
