// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_PP_H_COMPONENTS_NETWORK_CLIENTS_HTTP_CLIENT
#define QOR_PP_H_COMPONENTS_NETWORK_CLIENTS_HTTP_CLIENT

#include <functional>
#include <chrono>
#include "src/components/protocols/http/result.h"
#include "src/components/protocols/http/response.h"
#include "src/components/protocols/http/headers.h"
#include "src/components/protocols/http/datasink.h"
#include "src/components/protocols/http/forms.h"
#include "src/components/protocols/http/request.h"

namespace qor{ namespace components{ namespace network{

    class ClientImpl;
    
    using DownloadProgress = std::function<bool(size_t current, size_t total)>;
    using UploadProgress = std::function<bool(size_t current, size_t total)>;
    using ContentReceiverWithProgress = std::function<bool(const char *data, size_t data_length, size_t offset, size_t total_length)>;
    using ContentReceiver = std::function<bool(const char *data, size_t data_length)>;
    using ResponseHandler = std::function<bool(const protocols::http::Response &response)>;
    using Params = std::multimap<std::string, std::string>;
    using ContentProvider = std::function<bool(size_t offset, size_t length,  protocols::http::DataSink &sink)>;
    using ContentProviderWithoutLength = std::function<bool(size_t offset,  protocols::http::DataSink &sink)>;
    using Logger = std::function<void(const protocols::http::Request &, const protocols::http::Response &)>;

    // Forward declaration for Error type
    enum class Error;
    using ErrorLogger = std::function<void(const Error &, const protocols::http::Request*)>;

    class qor_pp_module_interface(QOR_HTTPCLIENT) HTTPClient
    {
    public:

        HTTPClient() = default;
        virtual ~HTTPClient() = default;

     private:

        HTTPClient(const HTTPClient&) = delete;
        HTTPClient& operator = (const HTTPClient&) = delete;

    public:

// Universal interface
        explicit HTTPClient(const std::string &scheme_host_port);
        explicit HTTPClient(const std::string &scheme_host_port, const std::string &client_cert_path, const std::string &client_key_path);

// HTTP only interface
        explicit HTTPClient(const std::string &host, int port);
        explicit HTTPClient(const std::string &host, int port, const std::string &client_cert_path, const std::string &client_key_path);

        HTTPClient(HTTPClient&&) = default;
        HTTPClient& operator=(HTTPClient&&) = default;

        ~HTTPClient();

        bool is_valid() const;

        protocols::http::Result Get(const std::string &path, DownloadProgress progress = nullptr);
        protocols::http::Result Get(const std::string &path, ContentReceiver content_receiver, DownloadProgress progress = nullptr);
        protocols::http::Result Get(const std::string &path, ResponseHandler response_handler, ContentReceiver content_receiver, DownloadProgress progress = nullptr);
        protocols::http::Result Get(const std::string &path, const protocols::http::Headers &headers, DownloadProgress progress = nullptr);
        protocols::http::Result Get(const std::string &path, const protocols::http::Headers &headers, ContentReceiver content_receiver, DownloadProgress progress = nullptr);
        protocols::http::Result Get(const std::string &path, const protocols::http::Headers &headers, ResponseHandler response_handler, ContentReceiver content_receiver, DownloadProgress progress = nullptr);
        protocols::http::Result Get(const std::string &path, const Params &params, const protocols::http::Headers &headers, DownloadProgress progress = nullptr);
        protocols::http::Result Get(const std::string &path, const Params &params, const protocols::http::Headers &headers, ContentReceiver content_receiver, DownloadProgress progress = nullptr);
        protocols::http::Result Get(const std::string &path, const Params &params, const protocols::http::Headers &headers, ResponseHandler response_handler, ContentReceiver content_receiver, DownloadProgress progress = nullptr);

        protocols::http::Result Head(const std::string &path);
        protocols::http::Result Head(const std::string &path, const protocols::http::Headers &headers);

        protocols::http::Result Post(const std::string &path);
        protocols::http::Result Post(const std::string &path, const char *body, size_t content_length, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Post(const std::string &path, const std::string &body, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Post(const std::string &path, size_t content_length, ContentProvider content_provider, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Post(const std::string &path, ContentProviderWithoutLength content_provider, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Post(const std::string &path, const Params &params);
        protocols::http::Result Post(const std::string &path, const protocols::http::UploadFormDataItems &items, UploadProgress progress = nullptr);
        protocols::http::Result Post(const std::string &path, const protocols::http::Headers &headers);
        protocols::http::Result Post(const std::string &path, const protocols::http::Headers &headers, const char *body, size_t content_length, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Post(const std::string &path, const protocols::http::Headers &headers, const std::string &body, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Post(const std::string &path, const protocols::http::Headers &headers, size_t content_length, ContentProvider content_provider, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Post(const std::string &path, const protocols::http::Headers &headers, ContentProviderWithoutLength content_provider, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Post(const std::string &path, const protocols::http::Headers &headers, const Params &params);
        protocols::http::Result Post(const std::string &path, const protocols::http::Headers &headers, const protocols::http::UploadFormDataItems &items, UploadProgress progress = nullptr);
        protocols::http::Result Post(const std::string &path, const protocols::http::Headers &headers, const protocols::http::UploadFormDataItems &items, const std::string &boundary, UploadProgress progress = nullptr);
        protocols::http::Result Post(const std::string &path, const protocols::http::Headers &headers, const protocols::http::UploadFormDataItems &items, const protocols::http::FormDataProviderItems &provider_items, UploadProgress progress = nullptr);
        protocols::http::Result Post(const std::string &path, const protocols::http::Headers &headers, const std::string &body, const std::string &content_type, ContentReceiver content_receiver, DownloadProgress progress = nullptr);

        protocols::http::Result Put(const std::string &path);
        protocols::http::Result Put(const std::string &path, const char *body, size_t content_length, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Put(const std::string &path, const std::string &body, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Put(const std::string &path, size_t content_length, ContentProvider content_provider, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Put(const std::string &path, ContentProviderWithoutLength content_provider, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Put(const std::string &path, const Params &params);
        protocols::http::Result Put(const std::string &path, const protocols::http::UploadFormDataItems &items, UploadProgress progress = nullptr);
        protocols::http::Result Put(const std::string &path, const protocols::http::Headers &headers);
        protocols::http::Result Put(const std::string &path, const protocols::http::Headers &headers, const char *body, size_t content_length, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Put(const std::string &path, const protocols::http::Headers &headers, const std::string &body, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Put(const std::string &path, const protocols::http::Headers &headers, size_t content_length, ContentProvider content_provider, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Put(const std::string &path, const protocols::http::Headers &headers, ContentProviderWithoutLength content_provider, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Put(const std::string &path, const protocols::http::Headers &headers, const Params &params);
        protocols::http::Result Put(const std::string &path, const protocols::http::Headers &headers, const protocols::http::UploadFormDataItems &items, UploadProgress progress = nullptr);
        protocols::http::Result Put(const std::string &path, const protocols::http::Headers &headers, const protocols::http::UploadFormDataItems &items, const std::string &boundary, UploadProgress progress = nullptr);
        protocols::http::Result Put(const std::string &path, const protocols::http::Headers &headers, const protocols::http::UploadFormDataItems &items, const protocols::http::FormDataProviderItems &provider_items, UploadProgress progress = nullptr);
        protocols::http::Result Put(const std::string &path, const protocols::http::Headers &headers, const std::string &body, const std::string &content_type, ContentReceiver content_receiver, DownloadProgress progress = nullptr);

        protocols::http::Result Patch(const std::string &path);
        protocols::http::Result Patch(const std::string &path, const char *body, size_t content_length, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Patch(const std::string &path, const std::string &body, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Patch(const std::string &path, size_t content_length, ContentProvider content_provider, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Patch(const std::string &path, ContentProviderWithoutLength content_provider, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Patch(const std::string &path, const Params &params);
        protocols::http::Result Patch(const std::string &path, const protocols::http::UploadFormDataItems &items, UploadProgress progress = nullptr);
        protocols::http::Result Patch(const std::string &path, const protocols::http::Headers &headers);
        protocols::http::Result Patch(const std::string &path, const protocols::http::Headers &headers, const char *body, size_t content_length, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Patch(const std::string &path, const protocols::http::Headers &headers, const std::string &body, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Patch(const std::string &path, const protocols::http::Headers &headers, size_t content_length, ContentProvider content_provider, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Patch(const std::string &path, const protocols::http::Headers &headers, ContentProviderWithoutLength content_provider, const std::string &content_type, UploadProgress progress = nullptr);
        protocols::http::Result Patch(const std::string &path, const protocols::http::Headers &headers, const Params &params);
        protocols::http::Result Patch(const std::string &path, const protocols::http::Headers &headers, const protocols::http::UploadFormDataItems &items, UploadProgress progress = nullptr);
        protocols::http::Result Patch(const std::string &path, const protocols::http::Headers &headers, const protocols::http::UploadFormDataItems &items, const std::string &boundary, UploadProgress progress = nullptr);
        protocols::http::Result Patch(const std::string &path, const protocols::http::Headers &headers, const protocols::http::UploadFormDataItems &items, const protocols::http::FormDataProviderItems &provider_items, UploadProgress progress = nullptr);
        protocols::http::Result Patch(const std::string &path, const protocols::http::Headers &headers, const std::string &body, const std::string &content_type, ContentReceiver content_receiver, DownloadProgress progress = nullptr);

        protocols::http::Result Delete(const std::string &path, DownloadProgress progress = nullptr);
        protocols::http::Result Delete(const std::string &path, const char *body, size_t content_length, const std::string &content_type, DownloadProgress progress = nullptr);
        protocols::http::Result Delete(const std::string &path, const std::string &body, const std::string &content_type, DownloadProgress progress = nullptr);
        protocols::http::Result Delete(const std::string &path, const Params &params, DownloadProgress progress = nullptr);
        protocols::http::Result Delete(const std::string &path, const protocols::http::Headers &headers, DownloadProgress progress = nullptr);
        protocols::http::Result Delete(const std::string &path, const protocols::http::Headers &headers, const char *body, size_t content_length, const std::string &content_type, DownloadProgress progress = nullptr);
        protocols::http::Result Delete(const std::string &path, const protocols::http::Headers &headers, const std::string &body, const std::string &content_type, DownloadProgress progress = nullptr);
        protocols::http::Result Delete(const std::string &path, const protocols::http::Headers &headers, const Params &params, DownloadProgress progress = nullptr);

        protocols::http::Result Options(const std::string &path);
        protocols::http::Result Options(const std::string &path, const protocols::http::Headers &headers);

        bool send(protocols::http::Request &req, protocols::http::Response &res, Error &error);
        protocols::http::Result send(const protocols::http::Request &req);

        void stop();
        std::string host() const;
        int port() const;

        size_t is_socket_open() const;
        socket_t socket() const;

        void set_hostname_addr_map(std::map<std::string, std::string> addr_map);
        void set_default_headers(protocols::http::Headers headers);
        void set_header_writer(std::function<ssize_t(Stream &, protocols::http::Headers &)> const &writer);

        void set_address_family(int family);
        void set_tcp_nodelay(bool on);
        void set_socket_options(SocketOptions socket_options);

        void set_connection_timeout(time_t sec, time_t usec = 0);

        template <class Rep, class Period>
        void set_connection_timeout(const std::chrono::duration<Rep, Period> &duration);

        void set_read_timeout(time_t sec, time_t usec = 0);

        template <class Rep, class Period>
        void set_read_timeout(const std::chrono::duration<Rep, Period> &duration);

        void set_write_timeout(time_t sec, time_t usec = 0);
        
        template <class Rep, class Period>
        void set_write_timeout(const std::chrono::duration<Rep, Period> &duration);

        void set_max_timeout(time_t msec);

        template <class Rep, class Period>
        void set_max_timeout(const std::chrono::duration<Rep, Period> &duration);

        void set_basic_auth(const std::string &username, const std::string &password);
        void set_bearer_token_auth(const std::string &token);

#ifdef CPPHTTPLIB_OPENSSL_SUPPORT
        void set_digest_auth(const std::string &username,const std::string &password);
#endif

        void set_keep_alive(bool on);
        void set_follow_location(bool on);
        void set_path_encode(bool on);
        void set_url_encode(bool on);
        void set_compress(bool on);
        void set_decompress(bool on);
        void set_interface(const std::string &intf);
        void set_proxy(const std::string &host, int port);
        void set_proxy_basic_auth(const std::string &username, const std::string &password);
        void set_proxy_bearer_token_auth(const std::string &token);

#ifdef CPPHTTPLIB_OPENSSL_SUPPORT
        void set_proxy_digest_auth(const std::string &username, const std::string &password);
#endif

#ifdef CPPHTTPLIB_OPENSSL_SUPPORT
        void enable_server_certificate_verification(bool enabled);
        void enable_server_hostname_verification(bool enabled);
        void set_server_certificate_verifier(
        std::function<SSLVerifierResponse(SSL *ssl)> verifier);
#endif

        void set_logger(Logger logger);
        void set_error_logger(ErrorLogger error_logger);

// SSL
#ifdef CPPHTTPLIB_OPENSSL_SUPPORT
        void set_ca_cert_path(const std::string &ca_cert_file_path, const std::string &ca_cert_dir_path = std::string());
        void set_ca_cert_store(X509_STORE *ca_cert_store);
        void load_ca_cert_store(const char *ca_cert, std::size_t size);
        long get_openssl_verify_result() const;
        SSL_CTX *ssl_context() const;
#endif

    private:

        std::unique_ptr<ClientImpl> cli_;

#ifdef CPPHTTPLIB_OPENSSL_SUPPORT
        bool is_ssl_ = false;
#endif

    };

    template <class Rep, class Period>
    inline void HTTPClient::set_connection_timeout(const std::chrono::duration<Rep, Period> &duration) 
    {
        cli_->set_connection_timeout(duration);
    }

    template <class Rep, class Period>
    inline void HTTPClient::set_read_timeout(const std::chrono::duration<Rep, Period> &duration) 
    {
        cli_->set_read_timeout(duration);
    }

    template <class Rep, class Period>
    inline void HTTPClient::set_write_timeout(const std::chrono::duration<Rep, Period> &duration) 
    {
        cli_->set_write_timeout(duration);
    }

    inline void HTTPClient::set_max_timeout(time_t msec) 
    {
        cli_->set_max_timeout(msec);
    }

    template <class Rep, class Period>
    inline void HTTPClient::set_max_timeout(const std::chrono::duration<Rep, Period> &duration) 
    {
        cli_->set_max_timeout(duration);
    }    

}}}//qor::components::network

#endif//QOR_PP_H_COMPONENTS_NETWORK_CLIENTS_HTTP_CLIENT
