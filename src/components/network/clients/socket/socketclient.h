// Copyright Querysoft Limited 2008 - 2025
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <string>
#include <chrono>
#include <mutex>
#include <map>
#include <functional>
#include <thread>
#include <sys/un.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/nameser.h>
#include <resolv.h>
#include <poll.h>
#include <assert.h>
#include <netdb.h>
#include <fcntl.h>

#include "src/framework/thread/thread.h"
#include "src/platform/network/sockets.h"
#include "src/platform/network/socket.h"
#include "durationdetails.h"
#include "error.h"
#include "src/components/network/clients/itransportclient.h"
#include "src/components/framework/pipeline/sinks/socketsink/socketwriter.h"
#include "src/components/framework/pipeline/sources/socketsource/socketreader.h"

namespace qor{ namespace components{ namespace network{

    class qor_pp_module_interface(QOR_SOCKETCLIENT) SocketClient : public ITransportClient
    {
    public:

        SocketClient(const std::string& host, int port);
        virtual ~SocketClient() = default;

        //Configuration
        virtual std::string Host() const;
        virtual void SetHostnameAddressMap(std::map<std::string, std::string> addr_map);
        virtual void SetInterface(const std::string &intf);
        virtual void SetProxy(const std::string &host, int port);
        virtual void SetAddressFamily(qor::network::sockets::eAddressFamily family);
        virtual void SetTCPNoDelay(bool on);
        virtual void SetIPV6Only(bool on);
        virtual void SetConnectionTimeout(time_t sec, time_t usec = 0);
        virtual void SetReadTimeout(time_t sec, time_t usec = 0);
        virtual void SetWriteTimeout(time_t sec, time_t usec = 0);
        virtual void SetMaxTimeout(time_t msec);
        //virtual void SetSocketOptions(SocketOptions socket_options);        
        template <class Rep, class Period>
        void SetConnectionTimeout(const std::chrono::duration<Rep, Period> &duration)
        {
            duration_to_sec_and_usec(duration, [&](time_t sec, time_t usec) 
                {
                    SetConnectionTimeout(sec, usec);
                }
            );
        }

        template <class Rep, class Period>
        void SetReadTimeout(const std::chrono::duration<Rep, Period> &duration)
        {
            duration_to_sec_and_usec( duration, [&](time_t sec, time_t usec) 
                { 
                    SetReadTimeout(sec, usec); 
                }
            );
        }        

        template <class Rep, class Period>
        void SetWriteTimeout(const std::chrono::duration<Rep, Period> &duration)
        {
            duration_to_sec_and_usec(duration, [&](time_t sec, time_t usec) 
                {
                    SetWriteTimeout(sec, usec); 
                }
            );
        }        

        template <class Rep, class Period>
        void SetMaxTimeout(const std::chrono::duration<Rep, Period> &duration)
        {
            auto msec = std::chrono::duration_cast<std::chrono::milliseconds>(duration).count();
            SetMaxTimeout(msec);
        }

        virtual time_t GetMaxTimeout_msec(void)
        {
            return this->max_timeout_msec_;
        }

        virtual bool FollowLocation(void);
        virtual bool IsUnixSocket(void);
        virtual unsigned short Port(void) const;
        virtual bool IsSSL(void);
        virtual std::string GetHost(void);
        virtual std::string GetHostAndPort(void);
        virtual qor::pipeline::Sink* GetSink(void);
        virtual qor::pipeline::Source* GetSource(void);
        virtual qor::pipeline::Buffer* GetOutputBuffer(void);
        virtual qor::pipeline::Buffer* GetInputBuffer(void);
        SocketWriter* GetWriter();

        //Operation
        virtual void Stop();
        virtual void ShutdownSocket() const;
        virtual void CloseSocket();
        virtual bool Connect();                                
        virtual bool PrepareToSend();
        virtual bool Process(std::chrono::time_point<std::chrono::steady_clock> start_time, std::function<bool(void*)> callback);
        virtual void Shutdown(void);
        
    private:

        template <typename T> inline ssize_t handle_EINTR(T fn) 
        {
            ssize_t res = 0;
            while (true) 
            {
                res = fn();
                if (res < 0 && errno == EINTR) 
                {
                    std::this_thread::sleep_for(std::chrono::microseconds{1});
                    continue;
                }
                break;
            }
            return res;
        }

        std::string adjust_host_string(const std::string &host) const 
        {
            if (host.find(':') != std::string::npos) 
            { 
                return "[" + host + "]"; 
            }
            return host;
        }

        std::string escape_abstract_namespace_unix_domain(const std::string &s) 
        {
            if (s.size() > 1 && s[0] == '\0') 
            {
                auto ret = s;
                ret[0] = '@';
                return ret;
            }
            return s;
        }

        std::string unescape_abstract_namespace_unix_domain(const std::string &s) 
        {
            if (s.size() > 1 && s[0] == '@') 
            {
                auto ret = s;
                ret[0] = '\0';
                return ret;
            }
            return s;
        }

        // Socket endpoint information
        const std::string m_host;
        const int m_port;
        const std::string m_hostAndPort;
        ref_of<qor::network::Socket>::type m_Socket;
        ref_of<SocketClientConnector>::type m_Connector;
        SocketWriter m_Writer;
        SocketReader m_Reader;
        qor::pipeline::ByteBuffer m_OutputBuffer;
        qor::pipeline::ByteBuffer m_InputBuffer;

        mutable std::mutex socket_mutex_;

        // These are all protected under socket_mutex
        size_t socket_requests_in_flight_ = 0;
        std::thread::id socket_requests_are_from_thread_ = std::thread::id();
        bool socket_should_be_closed_when_request_is_done_ = false;

        // Hostname-IP map
        std::map<std::string, std::string> m_AddressMap;

        time_t connection_timeout_sec_ = 300;//CPPHTTPLIB_CONNECTION_TIMEOUT_SECOND;
        time_t connection_timeout_usec_ = 0;//CPPHTTPLIB_CONNECTION_TIMEOUT_USECOND;
        time_t read_timeout_sec_ = 300;//CPPHTTPLIB_CLIENT_READ_TIMEOUT_SECOND;
        time_t read_timeout_usec_ = 0;//CPPHTTPLIB_CLIENT_READ_TIMEOUT_USECOND;
        time_t write_timeout_sec_ = 5;//CPPHTTPLIB_CLIENT_WRITE_TIMEOUT_SECOND;
        time_t write_timeout_usec_ = 0;//CPPHTTPLIB_CLIENT_WRITE_TIMEOUT_USECOND;
        time_t max_timeout_msec_ = 0;//CPPHTTPLIB_CLIENT_MAX_TIMEOUT_MSECOND;
        qor::network::sockets::eAddressFamily m_AddressFamily = qor::network::sockets::eAddressFamily::AF_Unspecified;
        bool follow_location_ = false;
        bool keep_alive_ = false;
        bool m_TCPNoDelay = false;//CPPHTTPLIB_TCP_NODELAY;
        bool m_IPv6Only = false;//CPPHTTPLIB_IPV6_V6ONLY;
        //SocketOptions socket_options_ = nullptr;
        std::string m_Interface;
        std::string m_ProxyHost;
        int m_ProxyPort = -1;

        SocketClient(const SocketClient&) = delete;
        SocketClient& operator = (const SocketClient&) = delete;
        bool SetSocketOptTime(int level, int optname, time_t sec, time_t usec);
        bool is_connection_error();        
        bool Connect(const std::string &host, const std::string &ip, int port);
        bool SetSocketOptImpl(int level, int optname, const void *optval, socklen_t optlen);

        bool SetSocketOpt(int level, int optname, int optval) 
        {
            return SetSocketOptImpl(level, optname, &optval, sizeof(optval));
        }

    };

}}}//qor::components::network